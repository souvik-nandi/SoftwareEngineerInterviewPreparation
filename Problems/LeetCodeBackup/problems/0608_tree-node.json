{
    "id": "608",
    "question": {
        "questionId": "608",
        "questionFrontendId": "608",
        "boundTopicId": null,
        "title": "Tree Node",
        "titleSlug": "tree-node",
        "content": "<p>Table: <code>Tree</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| p_id        | int  |\n+-------------+------+\nid is the primary key column for this table.\nEach row of this table contains information about the id of a node and the id of its parent node in a tree.\nThe given structure is always a valid tree.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Each node in the tree can be one of three types:</p>\n\n<ul>\n\t<li><strong>&quot;Leaf&quot;</strong>: if the node is a leaf node.</li>\n\t<li><strong>&quot;Root&quot;</strong>: if the node is the root of the tree.</li>\n\t<li><strong>&quot;Inner&quot;</strong>: If the node is neither a leaf node nor a root node.</li>\n</ul>\n\n<p>Write an SQL query to report the type of each node in the tree.</p>\n\n<p>Return the result table <strong>ordered</strong> by <code>id</code> <strong>in ascending order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/22/tree1.jpg\" style=\"width: 304px; height: 224px;\" />\n<pre>\n<strong>Input:</strong> \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+\n<strong>Output:</strong> \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n| 2  | Inner |\n| 3  | Leaf  |\n| 4  | Leaf  |\n| 5  | Leaf  |\n+----+-------+\n<strong>Explanation:</strong> \nNode 1 is the root node because its parent node is null and it has child nodes 2 and 3.\nNode 2 is an inner node because it has parent node 1 and child node 4 and 5.\nNodes 3, 4, and 5 are leaf nodes because they have parent nodes and they do not have child nodes.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/22/tree2.jpg\" style=\"width: 64px; height: 65px;\" />\n<pre>\n<strong>Input:</strong> \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n+----+------+\n<strong>Output:</strong> \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n+----+-------+\n<strong>Explanation:</strong> If there is only one node on the tree, you only need to output its root attributes.\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 539,
        "dislikes": 37,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "{\"headers\": {\"Tree\": [\"id\", \"p_id\"]}, \"rows\": {\"Tree\": [[1,null],[2,1],[3,1],[4,2],[5,2]]}}\n{\"headers\": {\"Tree\": [\"id\", \"p_id\"]}, \"rows\": {\"Tree\": [[1,null]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}]}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"65.8K\", \"totalSubmission\": \"88.8K\", \"totalAcceptedRaw\": 65799, \"totalSubmissionRaw\": 88786, \"acRate\": \"74.1%\"}",
        "hints": [
            "You can judge the node type by querying whether the node's id shows up in p_id column and whether the node's p_id is null."
        ],
        "solution": {
            "id": "201",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "{\"headers\": {\"Tree\": [\"id\", \"p_id\"]}, \"rows\": {\"Tree\": [[1,null],[2,1],[3,1],[4,2],[5,2]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Tree (id int, p_id int)\"\n  ],\n  \"mssql\": [\n    \"Create table Tree (id int, p_id int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Tree (id int, p_id int)\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Tree (id int, p_id int)",
            "Truncate table Tree",
            "insert into Tree (id, p_id) values ('1', 'None')",
            "insert into Tree (id, p_id) values ('2', '1')",
            "insert into Tree (id, p_id) values ('3', '1')",
            "insert into Tree (id, p_id) values ('4', '2')",
            "insert into Tree (id, p_id) values ('5', '2')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "201",
        "content": "[TOC]\n\n## Solution\n---\n\n#### Approach I: Using `UNION` [Accepted]\n\n**Intuition**\n\nWe can print the node type by judging every record by its definition in this table.\n* Root: it does not have a parent node at all\n* Inner: it is the parent node of some nodes, and it has a not NULL parent itself.\n* Leaf: rest of the cases other than above two\n\n**Algorithm**\n\nBy transiting the node type definition, we can have the following code.\n\nFor the root node, it does not have a parent.\n```sql\nSELECT\n    id, 'Root' AS Type\nFROM\n    tree\nWHERE\n    p_id IS NULL\n```\n\nFor the leaf nodes, they do not have any children, and it has a parent.\n```sql\nSELECT\n    id, 'Leaf' AS Type\nFROM\n    tree\nWHERE\n    id NOT IN (SELECT DISTINCT\n            p_id\n        FROM\n            tree\n        WHERE\n            p_id IS NOT NULL)\n        AND p_id IS NOT NULL\n```\n\nFor the inner nodes, they have have some children and a parent.\n```sql\nSELECT\n    id, 'Inner' AS Type\nFROM\n    tree\nWHERE\n    id IN (SELECT DISTINCT\n            p_id\n        FROM\n            tree\n        WHERE\n            p_id IS NOT NULL)\n        AND p_id IS NOT NULL\n```\nSo, one solution to the problem is to combine these cases together using `UNION`.\n\n**MySQL**\n\n```sql\nSELECT\n    id, 'Root' AS Type\nFROM\n    tree\nWHERE\n    p_id IS NULL\n\nUNION\n\nSELECT\n    id, 'Leaf' AS Type\nFROM\n    tree\nWHERE\n    id NOT IN (SELECT DISTINCT\n            p_id\n        FROM\n            tree\n        WHERE\n            p_id IS NOT NULL)\n        AND p_id IS NOT NULL\n\nUNION\n\nSELECT\n    id, 'Inner' AS Type\nFROM\n    tree\nWHERE\n    id IN (SELECT DISTINCT\n            p_id\n        FROM\n            tree\n        WHERE\n            p_id IS NOT NULL)\n        AND p_id IS NOT NULL\nORDER BY id;\n```\n\n#### Approach II: Using flow control statement `CASE` [Accepted]\n\n**Algorithm**\n\nThe idea is similar with the above solution but the code is simpler by utilizing the flow control statements, which is effective to output differently based on different input values. In this case, we can use [`CASE`](https://dev.mysql.com/doc/refman/5.7/en/case.html) statement.\n\n**MySQL**\n\n```sql\nSELECT\n    id AS `Id`,\n    CASE\n        WHEN tree.id = (SELECT atree.id FROM tree atree WHERE atree.p_id IS NULL)\n          THEN 'Root'\n        WHEN tree.id IN (SELECT atree.p_id FROM tree atree)\n          THEN 'Inner'\n        ELSE 'Leaf'\n    END AS Type\nFROM\n    tree\nORDER BY `Id`\n;\n```\n>MySQL provides different flow control statements besides `CASE`. You can try to rewrite the slution above using [`IF`](https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html#function_if) flow control statement.\n\n#### Approach III: Using `IF` function [Accepted]\n\n**Algorithm**\n\nAlso, we can use a single [`IF`](https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html#function_if) function instead of the complex flow control statements.\n\n**MySQL**\n\n```sql\nSELECT\n    atree.id,\n    IF(ISNULL(atree.p_id),\n        'Root',\n        IF(atree.id IN (SELECT p_id FROM tree), 'Inner','Leaf')) Type\nFROM\n \u00a0 \u00a0tree atree\nORDER BY atree.id\n```\n>Note: This solution was inspired by [@richarddia](https://discuss.leetcode.com/user/richarddia)",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "195",
            "count": 26,
            "average": "4.923",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "tree-node",
    "playgroundData": {}
}