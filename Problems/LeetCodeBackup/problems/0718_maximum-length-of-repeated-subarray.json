{
    "id": "718",
    "question": {
        "questionId": "718",
        "questionFrontendId": "718",
        "boundTopicId": null,
        "title": "Maximum Length of Repeated Subarray",
        "titleSlug": "maximum-length-of-repeated-subarray",
        "content": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>the maximum length of a subarray that appears in <strong>both</strong> arrays</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The repeated subarray with maximum length is [3,2,1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 100</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 4060,
        "dislikes": 98,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Longest Common Subpath\", \"titleSlug\": \"longest-common-subpath\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "exampleTestcases": "[1,2,3,2,1]\n[3,2,1,4,7]\n[0,0,0,0,0]\n[0,0,0,0,0]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Rolling Hash",
                "slug": "rolling-hash",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Hash Function",
                "slug": "hash-function",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Intuit\", \"slug\": \"intuit\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Roblox\", \"slug\": \"roblox\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Citadel\", \"slug\": \"citadel\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Karat\", \"slug\": \"karat\", \"timesEncountered\": 13}, {\"taggedByAdmin\": false, \"name\": \"Indeed\", \"slug\": \"indeed\", \"timesEncountered\": 9}, {\"taggedByAdmin\": false, \"name\": \"Wayfair\", \"slug\": \"wayfair\", \"timesEncountered\": 5}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Palantir Technologies\", \"slug\": \"palantir-technologies\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int findLength(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int findLength(int[] nums1, int[] nums2) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def findLength(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint findLength(int* nums1, int nums1Size, int* nums2, int nums2Size){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int FindLength(int[] nums1, int[] nums2) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findLength = function(nums1, nums2) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef find_length(nums1, nums2)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func findLength(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func findLength(nums1 []int, nums2 []int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def findLength(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun findLength(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn find_length(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function findLength($nums1, $nums2) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function findLength(nums1: number[], nums2: number[]): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (find-length nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec find_length(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nfind_length(Nums1, Nums2) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec find_length(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def find_length(nums1, nums2) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"180.9K\", \"totalSubmission\": \"351.7K\", \"totalAcceptedRaw\": 180898, \"totalSubmissionRaw\": 351709, \"acRate\": \"51.4%\"}",
        "hints": [
            "Use dynamic programming.  dp[i][j] will be the answer for inputs A[i:], B[j:]."
        ],
        "solution": {
            "id": "269",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[1,2,3,2,1]\n[3,2,1,4,7]",
        "metaData": "{\n  \"name\": \"findLength\",\n  \"params\": [\n    {\n      \"name\": \"nums1\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"nums2\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "269",
        "content": "[TOC]\n\n\n#### Approach #1: Brute Force with Initial Character Map [Time Limit Exceeded]\n\n**Intuition and Algorithm**\n\nIn a typical brute force, for all starting indices `i` of `A` and `j` of `B`, we will check for the longest matching subarray `A[i:i+k] == B[j:j+k]` of length `k`.  This would look roughly like the following psuedocode:\n\n```python\nans = 0\nfor i in [0 .. A.length - 1]:\n    for j in [0 .. B.length - 1]:\n        k = 0\n        while (A[i+k] == B[j+k]): k += 1 #and i+k < A.length etc.\n        ans = max(ans, k)\n```\n\nOur insight is that in typical cases, most of the time `A[i] != B[j]`.  We could instead keep a hashmap `Bstarts[A[i]] = all j such that B[j] == A[i]`, and only loop through those in our `j` loop.\n\n**Python**\n```python\nclass Solution(object):\n    def findLength(self, A, B):\n        ans = 0\n        Bstarts = collections.defaultdict(list)\n        for j, y in enumerate(B):\n            Bstarts[y].append(j)\n\n        for i, x in enumerate(A):\n            for j in Bstarts[x]:\n                k = 0\n                while i + k < len(A) and j + k < len(B) and A[i + k] == B[j + k]:\n                    k += 1\n                ans = max(ans, k)\n        return ans\n```\n\n**Java**\n```java\nclass Solution {\n    public int findLength(int[] A, int[] B) {\n        int ans = 0;\n        Map<Integer, ArrayList<Integer>> Bstarts = new HashMap();\n        for (int j = 0; j < B.length; j++) {\n            Bstarts.computeIfAbsent(B[j], x -> new ArrayList()).add(j);\n        }\n\n        for (int i = 0; i < A.length; i++) if (Bstarts.containsKey(A[i])) {\n            for (int j: Bstarts.get(A[i])) {\n                int k = 0;\n                while (i+k < A.length && j+k < B.length && A[i+k] == B[j+k]) {\n                    k++;\n                }\n                ans = Math.max(ans, k);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(M*N*\\min(M, N))$$, where $$M, N$$ are the lengths of `A, B`.  The worst case is when all the elements are equal.\n\n* Space Complexity: $$O(N)$$, the space used by `Bstarts`.  (Of course, we could amend our algorithm to make this $$O(\\min(M, N))$$.)\n\n---\n\n#### Approach #2: Binary Search with Naive Check [Time Limit Exceeded]\n\n**Intuition**\n\nIf there is a length `k` subarray common to `A` and `B`, then there is a length `j <= k` subarray as well.  \n\nLet `check(length)` be the answer to the question \"Is there a subarray with `length` length, common to `A` and `B`?\"  This is a function with range that must take the form `[True, True, ..., True, False, False, ..., False]` with at least one `True`.  We can binary search on this function.\n\n**Algorithm**\n\nFocusing on the binary search, our invariant is that `check(hi)` will always be `False`.  We'll start with `hi = min(len(A), len(B)) + 1`; clearly `check(hi) is False`.\n\nNow we perform our check in the midpoint `mi` of `lo` and `hi`.  When it is possible, then `lo = mi + 1`, and when it isn't, `hi = mi`.  This maintains the invariant.  At the end of our binary search, `hi == lo` and `lo` is the lowest value such that `check(lo) is False`, so we want `lo - 1`.\n\nAs for the check itself, we can naively check whether any `A[i:i+k] == B[j:j+k]` using set structures.\n\n**Python**\n```python\nclass Solution(object):\n    def findLength(self, A, B):\n        def check(length):\n            seen = set(tuple(A[i:i+length]) \n                       for i in range(len(A) - length + 1))\n            return any(tuple(B[j:j+length]) in seen \n                       for j in range(len(B) - length + 1))\n\n        lo, hi = 0, min(len(A), len(B)) + 1\n        while lo < hi:\n            mi = (lo + hi) // 2\n            if check(mi):\n                lo = mi + 1\n            else:\n                hi = mi\n        return lo - 1\n```\n\n**Java**\n```java\nclass Solution {\n    public boolean check(int length, int[] A, int[] B) {\n        Set<String> seen = new HashSet();\n        for (int i = 0; i + length <= A.length; ++i) {\n            seen.add(Arrays.toString(Arrays.copyOfRange(A, i, i+length)));\n        }\n        for (int j = 0; j + length <= B.length; ++j) {\n            if (seen.contains(Arrays.toString(Arrays.copyOfRange(B, j, j+length)))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public int findLength(int[] A, int[] B) {\n        int lo = 0, hi = Math.min(A.length, B.length) + 1;\n        while (lo < hi) {\n            int mi = (lo + hi) / 2;\n            if (check(mi, A, B)) lo = mi + 1;\n            else hi = mi;\n        }\n        return lo - 1;\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O((M + N) * \\min(M, N) * \\log{(\\min(M, N))})$$, where $$M, N$$ are the lengths of `A, B`.  The log factor comes from the binary search.  The complexity of our naive check of a given $$\\text{length}$$ is $$O((M+N) * \\text{length})$$, as we will create the `seen` strings with complexity $$O(M * \\text{length})$$, then search for them with complexity $$O(N * \\text{length})$$, and our total complexity when performing our `check` is the addition of these two.\n\n* Space Complexity: $$O(M^2)$$, the space used by `seen`.\n\n---\n\n#### Approach #3: Dynamic Programming [Accepted]\n\n**Intuition and Algorithm**\n\nSince a common subarray of `A` and `B` must start at some `A[i]` and `B[j]`, let `dp[i][j]` be the longest common prefix of `A[i:]` and `B[j:]`.  Whenever `A[i] == B[j]`, we know `dp[i][j] = dp[i+1][j+1] + 1`.  Also, the answer is `max(dp[i][j])` over all `i, j`.\n\nWe can perform bottom-up dynamic programming to find the answer based on this recurrence.  Our loop invariant is that the answer is already calculated correctly and stored in `dp` for any larger `i, j`.\n\n**Python**\n\n```python\nclass Solution(object):\n    def findLength(self, A, B):\n        memo = [[0] * (len(B) + 1) for _ in range(len(A) + 1)]\n        for i in range(len(A) - 1, -1, -1):\n            for j in range(len(B) - 1, -1, -1):\n                if A[i] == B[j]:\n                    memo[i][j] = memo[i + 1][j + 1] + 1\n        return max(max(row) for row in memo)\n```\n\n**Java**\n\n```java\nclass Solution {\n    public int findLength(int[] A, int[] B) {\n        int ans = 0;\n        int[][] memo = new int[A.length + 1][B.length + 1];\n        for (int i = A.length - 1; i >= 0; --i) {\n            for (int j = B.length - 1; j >= 0; --j) {\n                if (A[i] == B[j]) {\n                    memo[i][j] = memo[i+1][j+1] + 1;\n                    if (ans < memo[i][j]) ans = memo[i][j];\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(M*N)$$, where $$M, N$$ are the lengths of `A, B`.\n\n* Space Complexity: $$O(M*N)$$, the space used by `dp`.\n\n---\n\n#### Approach #4: Binary Search with Rolling Hash [Accepted]\n\n**Intuition**\n\nAs in *Approach #2*, we will binary search for the answer.  However, we will use a *rolling hash* (Rabin-Karp algorithm) to store hashes in our set structure.\n\n**Algorithm**\n\nFor some prime $$p$$, consider the following function modulo some prime modulus $$\\mathcal{M}$$:\n\n$$\\text{hash}(S) = \\sum_{0 \\leq i < len(S)} p^i * S[i]$$\n\nNotably, $$\\text{hash}(S[1:] + x) = \\frac{(\\text{hash}(S) - S[0])}{p} + p^{n-1} x$$.  This shows we can get the hash of all $$A[i:i+\\text{guess}]$$ in linear time.  We will also use the fact that $$p^{-1} = p^{\\mathcal{M}-2} \\mod \\mathcal{M}$$.\n\nFor every `i >= length - 1`, we will want to record the hash of `A[i-length+1], A[i-length+2], ..., A[i]`.  After, we will truncate the first element by `h = (h - A[i - (length - 1)]) * Pinv % MOD` to get ready to add the next element.\n\nTo make our algorithm air tight, we also make a naive check when our work with rolling hashes says that we have found a match.\n\n```python\nclass Solution(object):\n    def findLength(self, A, B):\n        P, MOD = 113, 10**9 + 7\n        Pinv = pow(P, MOD - 2, MOD)\n        def check(guess):\n            def rolling(A, length):\n                if length == 0:\n                    yield 0, 0\n                    return\n\n                h, power = 0, 1\n                for i, x in enumerate(A):\n                    h = (h + x * power) % MOD\n                    if i < length - 1:\n                        power = (power * P) % MOD\n                    else:\n                        yield h, i - (length - 1)\n                        h = (h - A[i - (length - 1)]) * Pinv % MOD\n\n            hashes = collections.defaultdict(list)\n            for ha, start in rolling(A, guess):\n                hashes[ha].append(start)\n            for ha, start in rolling(B, guess):\n                iarr = hashes.get(ha, [])\n                if any(A[i: i + guess] == B[start: start + guess] for i in iarr):\n                    return True\n            return False\n\n        lo, hi = 0, min(len(A), len(B)) + 1\n        while lo < hi:\n            mi = (lo + hi) // 2\n            if check(mi):\n                lo = mi + 1\n            else:\n                hi = mi\n        return lo - 1\n```\n\n**Java**\n```java\nimport java.math.BigInteger;\n\nclass Solution {\n    int P = 113;\n    int MOD = 1_000_000_007;\n    int Pinv = BigInteger.valueOf(P).modInverse(BigInteger.valueOf(MOD)).intValue();\n\n    private int[] rolling(int[] source, int length) {\n        int[] ans = new int[source.length - length + 1];\n        long h = 0, power = 1;\n        if (length == 0) return ans;\n        for (int i = 0; i < source.length; ++i) {\n            h = (h + source[i] * power) % MOD;\n            if (i < length - 1) {\n                power = (power * P) % MOD;\n            } else {\n                ans[i - (length - 1)] = (int) h;\n                h = (h - source[i - (length - 1)]) * Pinv % MOD;\n                if (h < 0) h += MOD;\n            }\n        }\n        return ans;\n    }\n\n    private boolean check(int guess, int[] A, int[] B) {\n        Map<Integer, List<Integer>> hashes = new HashMap();\n        int k = 0;\n        for (int x: rolling(A, guess)) {\n            hashes.computeIfAbsent(x, z -> new ArrayList()).add(k++);\n        }\n        int j = 0;\n        for (int x: rolling(B, guess)) {\n            for (int i: hashes.getOrDefault(x, new ArrayList<Integer>()))\n                if (Arrays.equals(Arrays.copyOfRange(A, i, i+guess),\n                                  Arrays.copyOfRange(B, j, j+guess))) {\n                    return true;\n                }\n            j++;\n        }\n        return false;\n    }\n\n    public int findLength(int[] A, int[] B) {\n        int lo = 0, hi = Math.min(A.length, B.length) + 1;\n        while (lo < hi) {\n            int mi = (lo + hi) / 2;\n            if (check(mi, A, B)) lo = mi + 1;\n            else hi = mi;\n        }\n        return lo - 1;\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O((M+N) * \\log{(\\min(M, N))})$$, where $$M, N$$ are the lengths of `A, B`.  The log factor is contributed by the binary search, while creating the rolling hashes is $$O(M + N)$$.  The checks for duplicate hashes are $$O(1)$$.  If we perform a naive check to make sure our answer is correct, it adds a factor of $$O(\\min(M, N))$$ to our cost of `check`, which keeps the complexity the same.\n\n* Space Complexity: $$O(M)$$, the space used to store `hashes` and the subarrays in our final naive check.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "265",
            "count": 106,
            "average": "4.179",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "maximum-length-of-repeated-subarray",
    "playgroundData": {}
}