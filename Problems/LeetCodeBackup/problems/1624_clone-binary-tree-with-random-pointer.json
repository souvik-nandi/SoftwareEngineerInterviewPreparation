{
    "id": "1624",
    "question": {
        "questionId": "1624",
        "questionFrontendId": "1485",
        "boundTopicId": null,
        "title": "Clone Binary Tree With Random Pointer",
        "titleSlug": "clone-binary-tree-with-random-pointer",
        "content": "<p>A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.</p>\n\n<p>Return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the tree.</p>\n\n<p>The tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of <code>[val, random_index]</code> where:</p>\n\n<ul>\n\t<li><code>val</code>: an integer representing <code>Node.val</code></li>\n\t<li><code>random_index</code>: the index of the node (in the input) where the random pointer points to, or <code>null</code> if it does not point to any node.</li>\n</ul>\n\n<p>You will be given the tree in class <code>Node</code> and you should return the cloned tree in class <code>NodeCopy</code>. <code>NodeCopy</code> class is just a clone of <code>Node</code> class with the same attributes and constructors.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/clone_1.png\" style=\"width: 500px; height: 473px;\" />\n<pre>\n<strong>Input:</strong> root = [[1,null],null,[4,3],[7,0]]\n<strong>Output:</strong> [[1,null],null,[4,3],[7,0]]\n<strong>Explanation:</strong> The original binary tree is [1,null,4,7].\nThe random pointer of node one is null, so it is represented as [1, null].\nThe random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree.\nThe random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the array representing the tree.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/clone_2.png\" style=\"width: 500px; height: 540px;\" />\n<pre>\n<strong>Input:</strong> root = [[1,4],null,[1,0],null,[1,5],[1,5]]\n<strong>Output:</strong> [[1,4],null,[1,0],null,[1,5],[1,5]]\n<strong>Explanation:</strong> The random pointer of a node can be the node itself.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/clone_3.png\" style=\"width: 500px; height: 426px;\" />\n<pre>\n<strong>Input:</strong> root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\n<strong>Output:</strong> [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the <code>tree</code> is in the range <code>[0, 1000].</code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 294,
        "dislikes": 46,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Clone Graph\", \"titleSlug\": \"clone-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Copy List with Random Pointer\", \"titleSlug\": \"copy-list-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone N-ary Tree\", \"titleSlug\": \"clone-n-ary-tree\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[[1,null],null,[4,3],[7,0]]\n[[1,4],null,[1,0],null,[1,5],[1,5]]\n[[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Tree",
                "slug": "tree",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Binary Tree",
                "slug": "binary-tree",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"1\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     Node *left;\n *     Node *right;\n *     Node *random;\n *     Node() : val(0), left(nullptr), right(nullptr), random(nullptr) {}\n *     Node(int x) : val(x), left(nullptr), right(nullptr), random(nullptr) {}\n *     Node(int x, Node *left, Node *right, Node *random) : val(x), left(left), right(right), random(random) {}\n * };\n */\n\nclass Solution {\npublic:\n    NodeCopy* copyRandomBinaryTree(Node* root) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "/**\n * Definition for Node.\n * public class Node {\n *     int val;\n *     Node left;\n *     Node right;\n *     Node random;\n *     Node() {}\n *     Node(int val) { this.val = val; }\n *     Node(int val, Node left, Node right, Node random) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *         this.random = random;\n *     }\n * }\n */\n\nclass Solution {\n    public NodeCopy copyRandomBinaryTree(Node root) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "# Definition for Node.\n# class Node(object):\n#     def __init__(self, val=0, left=None, right=None, random=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n#         self.random = random\n\nclass Solution(object):\n    def copyRandomBinaryTree(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: NodeCopy\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "# Definition for Node.\n# class Node:\n#     def __init__(self, val=0, left=None, right=None, random=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n#         self.random = random\n\nclass Solution:\n    def copyRandomBinaryTree(self, root: 'Optional[Node]') -> 'Optional[NodeCopy]':\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "/**\n * Definition for Node.\n * public class Node {\n *     public int val;\n *     public Node left;\n *     public Node right;\n *     public Node random;\n *     public Node(int val=0, Node left=null, Node right=null, Node random=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *         this.random = random;\n *     }\n * }\n */\n\npublic class Solution {\n    public NodeCopy CopyRandomBinaryTree(Node root) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * // Definition for a Node.\n * function Node(val, left, right, random) {\n *    this.val = val === undefined ? null : val;\n *    this.left = left === undefined ? null : left;\n *    this.right = right === undefined ? null : right;\n *    this.random = random === undefined ? null : random;\n * };\n */\n\n/**\n * @param {Node} root\n * @return {NodeCopy}\n */\nvar copyRandomBinaryTree = function(root) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# Definition for Node.\n# class Node\n#     attr_accessor :val, :left, :right, :random\n#     def initialize(val = 0, left = nil, right = nil, random = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#         @random = random\n#     end\n# end\n\n# @param {Node} root\n# @return {NodeCopy}\ndef copy_random_binary_tree(root)\n\nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var left: Node?\n *     public var right: Node?\n *\t   public var random: Node?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; self.random = nil; }\n *     public init(_ val: Int) {self.val = val; self.left = nil; self.right = nil; self.random = nil; }\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *         self.random = nil\n *     }\n * }\n */\n\nclass Solution {\n    func copyRandomBinaryTree(_ root: Node?) -> NodeCopy? {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Left *Node\n *     Right *Node\n *     Random *Node\n * }\n */\n\nfunc copyRandomBinaryTree(root *Node) *NodeCopy {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int, _left: Node = null, _right: Node = null, _random: Node = null) {\n *   var value: Int = _value\n *   var left: Node = _left\n *   var right: Node = _right\n *   var random: Node = _random\n * }\n */\n\nobject Solution {\n    def copyRandomBinaryTree(root: Node): NodeCopy = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "/**\n * Example:\n * var ti = Node(5)\n * var v = ti.`val`\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var left: Node? = null\n *     var right: Node? = null\n *     var random: Node? = null\n * }\n */\n\nclass Solution {\n    fun copyRandomBinaryTree(root: Node?): NodeCopy? {\n    \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     public $random = null;\n *     function __construct($val = 0, $left = null, $right = null, $random = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *         $this->random = $random;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return NodeCopy\n     */\n    public function copyRandomBinaryTree($root) {\n    \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "/**\n * Definition for Node.\n * class Node {\n *     val: number\n *     left: Node | null\n *     right: Node | null\n *     random: Node | null\n *     constructor(val?: number, left?: Node | null, right?: Node | null, random?: Node | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *         this.random = (random===undefined ? null : random)\n *     }\n * }\n */\n\nfunction copyRandomBinaryTree(root: Node | null): NodeCopy | null {\n\n};",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"17.5K\", \"totalSubmission\": \"22K\", \"totalAcceptedRaw\": 17522, \"totalSubmissionRaw\": 22001, \"acRate\": \"79.6%\"}",
        "hints": [
            "Traverse the tree, keep a hashtable with you and create a nodecopy for each node in the tree.",
            "Start traversing the original tree again and connect the left, right and random pointers in the cloned tree the same way as the original tree with the help of the hashtable."
        ],
        "solution": {
            "id": "1083",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[[1,null],null,[4,3],[7,0]]",
        "metaData": "{\n  \"name\": \"copyRandomBinaryTree\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"manual\": true,\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"python3\",\n    \"javascript\",\n    \"typescript\",\n    \"kotlin\",\n    \"scala\",\n    \"swift\",\n    \"php\",\n    \"ruby\",\n    \"golang\"\n  ]\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1083",
        "content": "[TOC]\n\n## Solution\n\nThis solution article assumes the reader knows basic tree algorithms and has worked through our [Explore Card on Binary Trees](https://leetcode.com/explore/learn/card/data-structure-tree/134/traverse-a-tree/)\n\n---\n#### Approach 1: Iterative Tree Traversal + Hashmap\n\n**Intuition**\n\nAnytime we encounter a tree problem, we automatically know that we **have** to traverse the tree. Why? Well, we have to *look* at the tree to get an answer, right? So we will be (1) traversing the tree and (2) processing each node we look at.\n\nThere are 2 types of traversals: Depth-First-Search (DFS) and Breadth-First-Search (BFS). The simplest type of traversal is a preorder Depth-First Search. See below for a template we'll use later on.\n\n```python3\n# DFS Template\n\nstack = [root]\n\nwhile stack:\n    node = stack.pop()\n    if node.left:\n        stack.append(node.left)\n    if node.right:\n        stack.append(node.right)\n```\n\n**Algorithm**\n\nOkay. So we know we will be doing a DFS tree traversal. But what next? We mentioned earlier that we will be processing the nodes as we traverse the tree. Let's break that down into easy, actionable steps.\n\nAs we traverse the tree, we need to...\n\n1. Create a copy of each node\n2. Connect the copied nodes together\n\nBingo, that's it. You're done.\n\nKidding, let's figure out what this will look like a little more concretely. We're going to do two traversals; one to copy each node, and another to connect the copied nodes together.\n\n*Step 1: Create a copy of each node*\n\nWe just established that our first processing step is creating a *copy* of each node in the original tree. Good, but we also need a place to store the copied nodes with easy lookup access for step 2.\n\nWhat type of data structure fits this profile? Hashmap!\n\nWhy? Hashmaps let us map a `key` to `value` AND access that value in `O(1)` time.\n\nLet's grab our DFS Template from earlier and add Step 1 to it.\n\n```python3\n# Step 1. Create a copy of each node\n\ncopy = {}   # Store our copied nodes here\nstack = [root]\n\nwhile stack:\n    node = stack.pop()\n    copy[node] = NodeCopy(node.val)  # Map the original node to its NodeCopy\n    if node.left:\n        stack.append(node.left)\n    if node.right:\n        stack.append(node.right)\n```\n\nThis is how it looks visually:\n\n!?!../Documents/1485_Animation_1.json:507,295!?!\n\n>**Interview Tip:** You might be tempted to store the value of the node as the key (e.g.: `copy[node.val]`). This would be fine if all node values in the tree were unique, but the sample inputs show that this is not the case. We can guarantee uniqueness by storing the actual node as the key instead. This is an excellent assumption/topic to discuss with your interviewer.\n\n\n*Step 2: Connect the copied nodes together*\n\nAt this point, we have a copy of each node in our tree stored in a hashmap. Our next step is to connect the `left`, `right`, and `random` pointers of the copied nodes together to form our original tree's structure. We will do this step in a second DFS traversal.\n\n> **Interview Tip:** Don't worry about prematurely optimizing your solution. Do this connecting step in a second DFS traversal because the Big O complexity of a two pass DFS is the same as a one pass DFS. Mention this thought process to your interviewer.\n\nThe code snippet is below. `copy[node]` looks up and retrieves the current node's copy. We do `copy[node].left` to set the current node's copy left pointer equal to the copy of the current node's left node. Same idea for right and random pointers.\n```python3\n# Step 2. Connect the copied nodes together\n\nstack = [root]\n\nwhile stack:\n    node = stack.pop()\n    if node.left:\n        copy[node].left = copy[node.left]      # connect left pointer\n        stack.append(node.left)\n    if node.right:\n        copy[node].right = copy[node.right]    # connect right pointer\n        stack.append(node.right)\n    if node.random:\n        copy[node].random = copy[node.random]  # connect random pointer\n```\n\nThis is how it looks visually:\n\n!?!../Documents/1485_Animation_2.json:841,351!?!\n\n**Code**\n\nCongrats, you've solved the problem! Put the steps together and we get the following solution:\n\n<iframe src=\"https://leetcode.com/playground/i54Ypa7S/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"i54Ypa7S\"></iframe>\n\n> **Pop Quiz:** What would happen if we added `node.random` to the stack in Step 1?\n\n> **Answer:** We would enter an infinite recursive loop and receive a TLE error because we would be creating a cycle within our tree traversal.\n\n\n**Complexity Analysis**\n\nLet $$n$$ be the number of nodes in the tree.\n\n* Time complexity: $$ O(n + n) = O(2n) = O(n) $$.\n\n    + Each traversal costs $$O(n)$$ because we check every node once. We traverse the tree twice, which gives us $$O(n + n)= O(2n)$$. In Big O, we drop any constants to get $$O(n)$$ as our final time complexity.\n\n* Space complexity: $$O(n)$$ linear space to store a copy of each node in our hashmap. Also worth mentioning that the stack space for our DFS can grow to worst-case `O(n)` for a skewed binary tree.\n\n---\n\n### Approach 2: Recursive Tree Traversal + Hashmap\n\nAll is well. You've finished the problem. But your interviewer asks you the awesome follow up question.\n\n\"Can you do it recursively?\"\n\nMore information on recursive traversals can be found on the [Binary Tree Explore Card](https://leetcode.com/explore/learn/card/data-structure-tree/134/traverse-a-tree/)\n\n**Code**\n\n<iframe src=\"https://leetcode.com/playground/Gu4aysd5/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Gu4aysd5\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$n$$ be the number of nodes in the tree.\n\n* Time complexity: $$ O(n + n) = O(2n) = O(n) $$ Same reasoning as the iterative approach.\n\n* Space complexity: $$O(n)$$ Same reasoning as the iterative approach.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1038",
            "count": 10,
            "average": "3.200",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "clone-binary-tree-with-random-pointer",
    "playgroundData": {
        "i54Ypa7S": {
            "playground": {
                "testcaseInput": "",
                "name": "clone-binary-tree-with-random-pointer-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "Gu4aysd5": {
            "playground": {
                "testcaseInput": "",
                "name": "clone-binary-tree-with-random-pointer-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}