{
    "id": "359",
    "question": {
        "questionId": "359",
        "questionFrontendId": "359",
        "boundTopicId": null,
        "title": "Logger Rate Limiter",
        "titleSlug": "logger-rate-limiter",
        "content": "<p>Design a logger system that receives a stream of messages along with their timestamps. Each <strong>unique</strong> message should only be printed <strong>at most every 10 seconds</strong> (i.e. a message printed at timestamp <code>t</code> will prevent other identical messages from being printed until timestamp <code>t + 10</code>).</p>\n\n<p>All messages will come in chronological order. Several messages may arrive at the same timestamp.</p>\n\n<p>Implement the <code>Logger</code> class:</p>\n\n<ul>\n\t<li><code>Logger()</code> Initializes the <code>logger</code> object.</li>\n\t<li><code>bool shouldPrintMessage(int timestamp, string message)</code> Returns <code>true</code> if the <code>message</code> should be printed in the given <code>timestamp</code>, otherwise returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Logger&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;, &quot;shouldPrintMessage&quot;]\n[[], [1, &quot;foo&quot;], [2, &quot;bar&quot;], [3, &quot;foo&quot;], [8, &quot;bar&quot;], [10, &quot;foo&quot;], [11, &quot;foo&quot;]]\n<strong>Output</strong>\n[null, true, true, false, false, false, true]\n\n<strong>Explanation</strong>\nLogger logger = new Logger();\nlogger.shouldPrintMessage(1, &quot;foo&quot;);  // return true, next allowed timestamp for &quot;foo&quot; is 1 + 10 = 11\nlogger.shouldPrintMessage(2, &quot;bar&quot;);  // return true, next allowed timestamp for &quot;bar&quot; is 2 + 10 = 12\nlogger.shouldPrintMessage(3, &quot;foo&quot;);  // 3 &lt; 11, return false\nlogger.shouldPrintMessage(8, &quot;bar&quot;);  // 8 &lt; 12, return false\nlogger.shouldPrintMessage(10, &quot;foo&quot;); // 10 &lt; 11, return false\nlogger.shouldPrintMessage(11, &quot;foo&quot;); // 11 &gt;= 11, return true, next allowed timestamp for &quot;foo&quot; is 11 + 10 = 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li>\n\t<li>Every <code>timestamp</code> will be passed in non-decreasing order (chronological order).</li>\n\t<li><code>1 &lt;= message.length &lt;= 30</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>shouldPrintMessage</code>.</li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 1338,
        "dislikes": 167,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Design Hit Counter\", \"titleSlug\": \"design-hit-counter\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[\"Logger\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\"]\n[[],[1,\"foo\"],[2,\"bar\"],[3,\"foo\"],[8,\"bar\"],[10,\"foo\"],[11,\"foo\"]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Design",
                "slug": "design",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 37}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 8}, {\"taggedByAdmin\": false, \"name\": \"Atlassian\", \"slug\": \"atlassian\", \"timesEncountered\": 8}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Citadel\", \"slug\": \"citadel\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Netflix\", \"slug\": \"netflix\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Square\", \"slug\": \"square\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Logger {\npublic:\n    Logger() {\n        \n    }\n    \n    bool shouldPrintMessage(int timestamp, string message) {\n        \n    }\n};\n\n/**\n * Your Logger object will be instantiated and called as such:\n * Logger* obj = new Logger();\n * bool param_1 = obj->shouldPrintMessage(timestamp,message);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Logger {\n\n    public Logger() {\n        \n    }\n    \n    public boolean shouldPrintMessage(int timestamp, String message) {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * Logger obj = new Logger();\n * boolean param_1 = obj.shouldPrintMessage(timestamp,message);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Logger(object):\n\n    def __init__(self):\n        \n\n    def shouldPrintMessage(self, timestamp, message):\n        \"\"\"\n        :type timestamp: int\n        :type message: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your Logger object will be instantiated and called as such:\n# obj = Logger()\n# param_1 = obj.shouldPrintMessage(timestamp,message)",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Logger:\n\n    def __init__(self):\n        \n\n    def shouldPrintMessage(self, timestamp: int, message: str) -> bool:\n        \n\n\n# Your Logger object will be instantiated and called as such:\n# obj = Logger()\n# param_1 = obj.shouldPrintMessage(timestamp,message)",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\n\ntypedef struct {\n    \n} Logger;\n\n\nLogger* loggerCreate() {\n    \n}\n\nbool loggerShouldPrintMessage(Logger* obj, int timestamp, char * message) {\n  \n}\n\nvoid loggerFree(Logger* obj) {\n    \n}\n\n/**\n * Your Logger struct will be instantiated and called as such:\n * Logger* obj = loggerCreate();\n * bool param_1 = loggerShouldPrintMessage(obj, timestamp, message);\n \n * loggerFree(obj);\n*/",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Logger {\n\n    public Logger() {\n        \n    }\n    \n    public bool ShouldPrintMessage(int timestamp, string message) {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * Logger obj = new Logger();\n * bool param_1 = obj.ShouldPrintMessage(timestamp,message);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "\nvar Logger = function() {\n    \n};\n\n/** \n * @param {number} timestamp \n * @param {string} message\n * @return {boolean}\n */\nLogger.prototype.shouldPrintMessage = function(timestamp, message) {\n    \n};\n\n/** \n * Your Logger object will be instantiated and called as such:\n * var obj = new Logger()\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "class Logger\n    def initialize()\n        \n    end\n\n\n=begin\n    :type timestamp: Integer\n    :type message: String\n    :rtype: Boolean\n=end\n    def should_print_message(timestamp, message)\n        \n    end\n\n\nend\n\n# Your Logger object will be instantiated and called as such:\n# obj = Logger.new()\n# param_1 = obj.should_print_message(timestamp, message)",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "\nclass Logger {\n\n    init() {\n        \n    }\n    \n    func shouldPrintMessage(_ timestamp: Int, _ message: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * let obj = Logger()\n * let ret_1: Bool = obj.shouldPrintMessage(timestamp, message)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "type Logger struct {\n    \n}\n\n\nfunc Constructor() Logger {\n    \n}\n\n\nfunc (this *Logger) ShouldPrintMessage(timestamp int, message string) bool {\n    \n}\n\n\n/**\n * Your Logger object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.ShouldPrintMessage(timestamp,message);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "class Logger() {\n\n    def shouldPrintMessage(timestamp: Int, message: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * var obj = new Logger()\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Logger() {\n\n    fun shouldPrintMessage(timestamp: Int, message: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * var obj = Logger()\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "struct Logger {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Logger {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn should_print_message(&self, timestamp: i32, message: String) -> bool {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * let obj = Logger::new();\n * let ret_1: bool = obj.should_print_message(timestamp, message);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Logger {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $timestamp\n     * @param String $message\n     * @return Boolean\n     */\n    function shouldPrintMessage($timestamp, $message) {\n        \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * $obj = Logger();\n * $ret_1 = $obj->shouldPrintMessage($timestamp, $message);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "class Logger {\n    constructor() {\n\n    }\n\n    shouldPrintMessage(timestamp: number, message: string): boolean {\n\n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * var obj = new Logger()\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define logger%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; should-print-message : exact-integer? string? -> boolean?\n    (define/public (should-print-message timestamp message)\n\n      )))\n\n;; Your logger% object will be instantiated and called as such:\n;; (define obj (new logger%))\n;; (define param_1 (send obj should-print-message timestamp message))",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec logger_init_() -> any().\nlogger_init_() ->\n  .\n\n-spec logger_should_print_message(Timestamp :: integer(), Message :: unicode:unicode_binary()) -> boolean().\nlogger_should_print_message(Timestamp, Message) ->\n  .\n\n\n%% Your functions will be called as such:\n%% logger_init_(),\n%% Param_1 = logger_should_print_message(Timestamp, Message),\n\n%% logger_init_ will be called before every test case, in which you can do some necessary initializations.",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Logger do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec should_print_message(timestamp :: integer, message :: String.t) :: boolean\n  def should_print_message(timestamp, message) do\n\n  end\nend\n\n# Your functions will be called as such:\n# Logger.init_()\n# param_1 = Logger.should_print_message(timestamp, message)\n\n# Logger.init_ will be called before every test case, in which you can do some necessary initializations.",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"239.4K\", \"totalSubmission\": \"317.9K\", \"totalAcceptedRaw\": 239360, \"totalSubmissionRaw\": 317941, \"acRate\": \"75.3%\"}",
        "hints": [],
        "solution": {
            "id": "826",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": "ac",
        "sampleTestCase": "[\"Logger\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\"]\n[[],[1,\"foo\"],[2,\"bar\"],[3,\"foo\"],[8,\"bar\"],[10,\"foo\"],[11,\"foo\"]]",
        "metaData": "{\n  \"classname\": \"Logger\",\n  \"constructor\": {\n    \"params\": []\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"timestamp\"\n        },\n        {\n          \"type\": \"string\",\n          \"name\": \"message\"\n        }\n      ],\n      \"name\": \"shouldPrintMessage\",\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "826",
        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Queue + Set\n\n**Intuition**\n\nBefore we tackle the problem, it is imperative to clarify the conditions of the problem, since it was not explicit in the problem description. Here is one important note:\n\n>It is possible that several messages arrive roughly at the same time.\n\nWe could interpret that the input messages are in chronological order, _i.e._ the timestamps of the messages are monotonically increasing, though not _strictly_. This constraint is critical, since it would simplify the task, as one will see in the following solutions.\n\nAs a first solution, let us build a solution _intuitively_ following the tasks described in the problem.\n\n>We keep the incoming messages in a **queue**. In addition, to accelerate the check of duplicates, we use a **set** data structure to index the messages.\n\n![pic](../Figures/359/359_deque.png)\n\nAs one can see from the above example where the number indicates the timestamp of each message, the arrival of the message with the timestamp `18` would invalidate both the messages with the timestamp of `5` and `7` which go beyond the time window of 10 seconds.\n\n**Algorithm**\n\n- First of all, we use a queue as a sort of sliding window to keep all the printable messages in certain time frame (10 seconds).\n\n- At the arrival of each incoming message, it comes with a `timestamp`. This timestamp implies the evolution of the sliding windows. Therefore, we should first invalidate those _expired_ messages in our queue. \n\n- Since the `queue` and `set` data structures should be in sync with each other, we would also remove those expired messages from our message set.\n\n- After the updates of our message queue and set, we then simply check if there is any duplicate for the new incoming message. If not, we add the message to the queue as well as the set.\n\n<iframe src=\"https://leetcode.com/playground/Wp48M5VH/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Wp48M5VH\"></iframe>\n\nAs one can see, the usage of set data structure is not _absolutely_ necessary. One could simply iterate the message queue to check if there is any duplicate.\n\nAnother important note is that if the messages are not chronologically ordered then we would have to iterate through the entire queue to remove the expired messages, rather than having _early stopping_. Or one could use some sorted queue such as **Priority Queue** to keep the messages.\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the size of the queue. In the worst case, all the messages in the queue become obsolete. As a result, we need clean them up.\n\n- Space Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the size of the queue. We keep the incoming messages in both the queue and set. The upper bound of the required space would be $$2N$$, if we have no duplicate at all.\n<br/>\n<br/>\n\n---\n#### Approach 2: Hashtable / Dictionary\n\n**Intuition**\n\nOne could combine the queue and set data structure into a **hashtable** or **dictionary**, which gives us the capacity of keeping all unique messages as of queue as well as the capacity to quickly evaluate the duplication of messages as of set.\n\n>The idea is that we keep a hashtable/dictionary with the message as key, and its timestamp as the value. The hashtable keeps all the unique messages along with the latest timestamp that the message was printed.\n\n![pic](../Figures/359/359_hashtable.png)\n\nAs one can see from the above example, there is an entry in the hashtable with the message `m2` and the timestamp `2`. Then there comes another message `m2` with the timestamp `15`. Since the message was printed 13 seconds before (_i.e._ beyond the buffer window), it is therefore eligible to print again the message. As a result, the timestamp of the message `m2` would be updated to `15`.\n\n**Algorithm**\n\n- We initialize a hashtable/dictionary to keep the messages along with the timestamp.\n\n- At the arrival of a new message, the message is eligible to be printed with either of the two conditions as follows:\n\n    - case 1). we have never seen the message before.\n\n    - case 2). we have seen the message before, and it was printed more than 10 seconds ago.\n\n- In both of the above cases, we would then update the entry that is associated with the message in the hashtable, with the latest timestamp.\n\n<iframe src=\"https://leetcode.com/playground/HCa3N3jf/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"HCa3N3jf\"></iframe>\n\n*Note: for clarity, we separate the two cases into two blocks. One could combine the two blocks together to have a more concise solution.*\n\nThe main difference between this approach with hashtable and the previous approach with queue is that in previous approach we do *proactive* cleaning, _i.e._ at each invocation of function, we first remove those expired messages. \n\nWhile in this approach, we keep all the messages even when they are expired. This characteristics might become problematic, since the usage of memory would keep on growing over the time. Sometimes it might be more desirable to have the _garbage collection_ property of the previous approach.\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(1)$$. The lookup and update of the hashtable takes a constant time.\n\n- Space Complexity: $$\\mathcal{O}(M)$$ where $$M$$ is the size of all incoming messages. Over the time, the hashtable would have an entry for each unique message that has appeared.\n<br/>\n<br/>",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "790",
            "count": 80,
            "average": "4.650",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "logger-rate-limiter",
    "playgroundData": {
        "Wp48M5VH": {
            "playground": {
                "testcaseInput": "",
                "name": "logger-rate-limiter-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "HCa3N3jf": {
            "playground": {
                "testcaseInput": "",
                "name": "logger-rate-limiter-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}