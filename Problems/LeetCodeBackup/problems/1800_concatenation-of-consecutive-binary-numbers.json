{
    "id": "1800",
    "question": {
        "questionId": "1800",
        "questionFrontendId": "1680",
        "boundTopicId": null,
        "title": "Concatenation of Consecutive Binary Numbers",
        "titleSlug": "concatenation-of-consecutive-binary-numbers",
        "content": "<p>Given an integer <code>n</code>, return <em>the <strong>decimal value</strong> of the binary string formed by concatenating the binary representations of </em><code>1</code><em> to </em><code>n</code><em> in order, <strong>modulo </strong></em><code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>&quot;1&quot; in binary corresponds to the decimal value 1. \n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 27\n<strong>Explanation: </strong>In binary, 1, 2, and 3 corresponds to &quot;1&quot;, &quot;10&quot;, and &quot;11&quot;.\nAfter concatenating them, we have &quot;11011&quot;, which corresponds to the decimal value 27.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 12\n<strong>Output:</strong> 505379714\n<strong>Explanation</strong>: The concatenation results in &quot;1101110010111011110001001101010111100&quot;.\nThe decimal value of that is 118505380540.\nAfter modulo 10<sup>9</sup> + 7, the result is 505379714.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 357,
        "dislikes": 212,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "1\n3\n12",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Math",
                "slug": "math",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Simulation",
                "slug": "simulation",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}], \"1\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int concatenatedBinary(int n) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int concatenatedBinary(int n) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def concatenatedBinary(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def concatenatedBinary(self, n: int) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint concatenatedBinary(int n){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int ConcatenatedBinary(int n) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar concatenatedBinary = function(n) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer} n\n# @return {Integer}\ndef concatenated_binary(n)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func concatenatedBinary(_ n: Int) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func concatenatedBinary(n int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def concatenatedBinary(n: Int): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun concatenatedBinary(n: Int): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn concatenated_binary(n: i32) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function concatenatedBinary($n) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function concatenatedBinary(n: number): number {\n\n};",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"34.6K\", \"totalSubmission\": \"65.8K\", \"totalAcceptedRaw\": 34590, \"totalSubmissionRaw\": 65828, \"acRate\": \"52.5%\"}",
        "hints": [
            "Express the nth number value in a recursion formula and think about how we can do a fast evaluation."
        ],
        "solution": {
            "id": "1071",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "1",
        "metaData": "{\n  \"name\": \"concatenatedBinary\",\n  \"params\": [\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1071",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nThe sequence described in the problem is [A047778](https://oeis.org/A047778), and you can check the first few terms [here](https://oeis.org/A047778/list). As we see, the number grows rapidly.\n\nBelow, we will discuss three approaches: *Change to Binary String*, *Math*, and *Math (Bitwise Operation)*.\n\nGenerally, we recommend the third approach since it has fast performance and low space usage.\n\n---\n\n#### Approach 1: Change to Binary String\n\n**Intuition**\n\nThe problem requires us to do three things:\n\n1. Transform numbers from $$1$$ to $$n$$ into binary.\n\n  This step is similar to [Convert a Number to Hexadecimal](https://leetcode.com/problems/convert-a-number-to-hexadecimal/). All we need to do is keep dividing by $$2$$ and collecting the remainders. Also, many programming languages have built-in APIs.\n  \n2. Concatenate binarys.\n\n  It is simple since we always have a built-in API.\n  \n3. Transform the concatenation into decimal.\n\n  The third step is similar to [Convert Binary Number in a Linked List to Integer](https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/). We need to iterate each element, and for each element, we multiply the current result by $$2$$ and add the element to the result.\n\n![Figure 1.1](../Documents/5620/5620_1_1.drawio.svg)\n\nIf you are unclear about the detail, please check the problem linked above.\n\nHowever, if we directly combine those three steps, we probably meet *Time Limit Exceed*. This is because the second step, concatenation, takes a long time since it needs to generate a new string after each connection or to reallocate itself. Of course, in some programming languages such as Python, it is fast enough to pass, but for some others, optimizations are needed.\n\nLuckily, if we dig into those three steps, we will find that the concatenation is **not** necessary. When we transform the binary into the decimal, we only need the **next** element when iterating. Therefore, we can transform the next number into binary when we need the next element.\n\nFor example, if `n == 3`, and we have calculated the binary form of `1` (binary: `1`) and `2` (binary: `10`), and the current result is `110` (binary) = `6` (decimal). Now we want to include `3`. We can transform `3` into `11` (binary) and then add to the result. There is no need for concatenation.\n\n![Figure 1.2](../Documents/5620/5620_1_2.drawio.svg)\n\n**Algorithm**\n\n*Step 1:* Initialize an integer `result` to store the final result.\n\n*Step 2:* Iterate from 1 to n. For each number:\n  - Convert the number into binary form.\n  - Iterate the binary string. For each element (`0` or `1`), update `result` to 2*`result` + element.\n\n*Step 3:* Return `result`.\n\n> Challenge: Can you implement the code yourself without seeing our implementations?\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/Fj2dtLoE/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"Fj2dtLoE\"></iframe>\n\nNote: Due to the convenient API and big integer characteristics in Python, we can directly **concatenate** strings together and make it into decimal at once. Though it requires extra space but is easier to implement.\n\n**Complexity Analysis**\n\n* Time Complexity: $$\\mathcal{O}(n\\log(n))$$. We iterate $$n$$ numbers, and for each number we spend $$\\mathcal{O}(\\log(n))$$ to transform it into the binary form and add it to the final result.\n\n* Space Complexity: Depends on the implementation. In Python, we firstly concatenate all string together, so the total space usage is $$\\mathcal{O}(n\\log(n))$$. While in Java and C++, we add the string into the final result immediately without concatenating, so the space complexity is $$\\mathcal{O}(n)$$. Of course, you can implement the immediately adding version in Python, but that requires extra codes.\n\n---\n\n#### Approach 2: Math\n\n**Intuition**\n\nRecall the last example in *Approach 1*. Let's dig into what happens when we add `3` (binary: `11`) to previous result `110` (binary, concatenated by `1` and `10`) (decimal: `6`).\n\nWhat we do indeed is shift `110` (binary) two units left and then add `3`.\n\n![Figure 2.1](../Documents/5620/5620_2_1.drawio.svg)\n\nMoving \"two\" units left is because `11` (binary) has a length of $$2$$.\n\nTo find out the length of the binary representation of a number, we can use $$\\log$$ with base $$2$$. Alternatively, we can record the current length, and increase it when we meet a power of $$2$$.\n\nIn conclusion, we can multiply the previous result by some power of $$2$$ to shift it to the left, and add the number to get the next result.\n\nThis process does not involve anything related to the binary transformation!\n\n**Algorithm**\n\n*Step 1:* Initialize an integer `result` to store the final result.\n\n*Step 2:* Iterate from 1 to n. For each number `i`:\n  - Find the length of the binary representation of the number. Denote by `length`.\n  - Update `result` to $$\\text{result} \\cdot 2^{\\text{length}} + i$$.\n\n*Step 3:* Return `result`.\n\n> Challenge: Can you implement the code yourself without seeing our implementations?\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/kWXjrdYL/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"kWXjrdYL\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$\\mathcal{O}(n\\log(n))$$. We iterate $$n$$ numbers, and for each number we spend $$\\mathcal{O}(\\log(n))$$ to check wether it is power of $$2$$ and add to the final result.\n\n* Space Complexity: $$\\mathcal{O}(1)$$, since we do not need any extra data structure.\n\n---\n\n#### Approach 3: Math (Bitwise Operation)\n\n**Intuition**\n\nIn *Approach 2*, we still need to spend $$\\mathcal{O}(\\log(i))$$ to find the length of number `i`. Can we make it faster?\n\nOf course! \n\nWith bitwise operation, we can check whether a number is the power of $$2$$ in $$\\mathcal{O}(1)$$. If `(x & (x-1)) == 0`, then `x` is the power of $$2$$.\n\nFor example, if `x == 4`, then `x - 1 == 3`. Their binary form is `100` (binary) and `011` (binary). All of their bits are different, so the bitwise \"and\" operation yields `0`.\n\n![Figure 3.1](../Documents/5620/5620_3_1.drawio.svg)\n\nWe only need to increase the length when we meet a power of $$2$$.\n\nAlso, we can use bitwise operations to replace other executions.\n\n![Figure 3.1](../Documents/5620/5620_3_2.drawio.svg)\n\n**Algorithm**\n\n*Step 1:* Initialize an integer `result` to store the final result.\n\n*Step 2:* Iterate from 1 to n. For each number `i`:\n  - Find the length of the binary representation of the number. Denote by `length`.\n  - Update `result` to `result << length | i`.\n\n*Step 3:* Return `result`.\n\n> Challenge: Can you implement the code yourself without seeing our implementations?\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/EdnTZkK7/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"EdnTZkK7\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$\\mathcal{O}(n)$$. We iterate $$n$$ numbers, and for each number we spend $$\\mathcal{O}(1)$$ to add it to the final result.\n\n* Space Complexity: $$\\mathcal{O}(1)$$, since we do not need any extra data structure.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1026",
            "count": 22,
            "average": "5.000",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "concatenation-of-consecutive-binary-numbers",
    "playgroundData": {
        "Fj2dtLoE": {
            "playground": {
                "testcaseInput": "",
                "name": "concatenation-of-consecutive-binary-numbers-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "kWXjrdYL": {
            "playground": {
                "testcaseInput": "",
                "name": "concatenation-of-consecutive-binary-numbers-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "EdnTZkK7": {
            "playground": {
                "testcaseInput": "",
                "name": "concatenation-of-consecutive-binary-numbers-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}