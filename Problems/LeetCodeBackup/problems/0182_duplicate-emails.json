{
    "id": "182",
    "question": {
        "questionId": "182",
        "questionFrontendId": "182",
        "boundTopicId": null,
        "title": "Duplicate Emails",
        "titleSlug": "duplicate-emails",
        "content": "<p>Table: <code>Person</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to report all the duplicate emails.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nPerson table:\n+----+---------+\n| id | email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n<strong>Output:</strong> \n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n<strong>Explanation:</strong> a@b.com is repeated two times.\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1174,
        "dislikes": 51,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "{\"headers\": {\"Person\": [\"id\", \"email\"]}, \"rows\": {\"Person\": [[1, \"a@b.com\"], [2, \"c@d.com\"], [3, \"a@b.com\"]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"377.6K\", \"totalSubmission\": \"542.4K\", \"totalAcceptedRaw\": 377571, \"totalSubmissionRaw\": 542377, \"acRate\": \"69.6%\"}",
        "hints": [],
        "solution": {
            "id": "214",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "{\"headers\": {\"Person\": [\"id\", \"email\"]}, \"rows\": {\"Person\": [[1, \"a@b.com\"], [2, \"c@d.com\"], [3, \"a@b.com\"]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Person (id int, email varchar(255))\"\n  ],\n  \"mssql\": [\n    \"Create table Person (id int, email varchar(255))\"\n  ],\n  \"oraclesql\": [\n    \"Create table Person (id int, email varchar(255))\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Person (id int, email varchar(255))",
            "Truncate table Person",
            "insert into Person (id, email) values ('1', 'a@b.com')",
            "insert into Person (id, email) values ('2', 'c@d.com')",
            "insert into Person (id, email) values ('3', 'a@b.com')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "214",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach I: Using `GROUP BY` and a temporary table [Accepted]\n\n**Algorithm**\n\nDuplicated emails existed more than one time. To count the times each email exists, we can use the following code.\n\n```sql\nselect Email, count(Email) as num\nfrom Person\ngroup by Email;\n```\n\n```\n| Email   | num |\n|---------|-----|\n| a@b.com | 2   |\n| c@d.com | 1   |\n```\n\nTaking this as a temporary table, we can get a solution as below.\n\n```sql\nselect Email from\n(\n  select Email, count(Email) as num\n  from Person\n  group by Email\n) as statistic\nwhere num > 1\n;\n```\n\n#### Approach II: Using `GROUP BY` and `HAVING` condition [Accepted]\n\nA more common used way to add a condition to a `GROUP BY` is to use the `HAVING` clause, which is much simpler and more efficient.\n\nSo we can rewrite the above solution to this one.\n\n**MySQL**\n\n```sql\nselect Email\nfrom Person\ngroup by Email\nhaving count(Email) > 1;\n```",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "209",
            "count": 49,
            "average": "4.735",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "duplicate-emails",
    "playgroundData": {}
}