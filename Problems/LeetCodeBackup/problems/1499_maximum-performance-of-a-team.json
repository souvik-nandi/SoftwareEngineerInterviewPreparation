{
    "id": "1499",
    "question": {
        "questionId": "1499",
        "questionFrontendId": "1383",
        "boundTopicId": null,
        "title": "Maximum Performance of a Team",
        "titleSlug": "maximum-performance-of-a-team",
        "content": "<p>You are given two integers <code>n</code> and <code>k</code> and two integer arrays <code>speed</code> and <code>efficiency</code> both of length <code>n</code>. There are <code>n</code> engineers numbered from <code>1</code> to <code>n</code>. <code>speed[i]</code> and <code>efficiency[i]</code> represent the speed and efficiency of the <code>i<sup>th</sup></code> engineer respectively.</p>\n\n<p>Choose <strong>at most</strong> <code>k</code> different engineers out of the <code>n</code> engineers to form a team with the maximum <strong>performance</strong>.</p>\n\n<p>The performance of a team is the sum of their engineers&#39; speeds multiplied by the minimum efficiency among their engineers.</p>\n\n<p>Return <em>the maximum performance of this team</em>. Since the answer can be a huge number, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\n<strong>Output:</strong> 60\n<strong>Explanation:</strong> \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\n<strong>Output:</strong> 68\n<strong>Explanation:\n</strong>This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\n<strong>Output:</strong> 72\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>speed.length == n</code></li>\n\t<li><code>efficiency.length == n</code></li>\n\t<li><code>1 &lt;= speed[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= efficiency[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 1190,
        "dislikes": 39,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Maximum Fruits Harvested After at Most K Steps\", \"titleSlug\": \"maximum-fruits-harvested-after-at-most-k-steps\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "exampleTestcases": "6\n[2,10,3,1,5,8]\n[5,4,3,9,7,2]\n2\n6\n[2,10,3,1,5,8]\n[5,4,3,9,7,2]\n3\n6\n[2,10,3,1,5,8]\n[5,4,3,9,7,2]\n4",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Greedy",
                "slug": "greedy",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Sorting",
                "slug": "sorting",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Heap (Priority Queue)",
                "slug": "heap-priority-queue",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"DoorDash\", \"slug\": \"doordash\", \"timesEncountered\": 19}, {\"taggedByAdmin\": true, \"name\": \"Citrix\", \"slug\": \"citrix\", \"timesEncountered\": 4}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"IBM\", \"slug\": \"ibm\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def maxPerformance(self, n, speed, efficiency, k):\n        \"\"\"\n        :type n: int\n        :type speed: List[int]\n        :type efficiency: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint maxPerformance(int n, int* speed, int speedSize, int* efficiency, int efficiencySize, int k){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int MaxPerformance(int n, int[] speed, int[] efficiency, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number} n\n * @param {number[]} speed\n * @param {number[]} efficiency\n * @param {number} k\n * @return {number}\n */\nvar maxPerformance = function(n, speed, efficiency, k) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer} n\n# @param {Integer[]} speed\n# @param {Integer[]} efficiency\n# @param {Integer} k\n# @return {Integer}\ndef max_performance(n, speed, efficiency, k)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func maxPerformance(_ n: Int, _ speed: [Int], _ efficiency: [Int], _ k: Int) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func maxPerformance(n int, speed []int, efficiency []int, k int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def maxPerformance(n: Int, speed: Array[Int], efficiency: Array[Int], k: Int): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun maxPerformance(n: Int, speed: IntArray, efficiency: IntArray, k: Int): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn max_performance(n: i32, speed: Vec<i32>, efficiency: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $speed\n     * @param Integer[] $efficiency\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPerformance($n, $speed, $efficiency, $k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function maxPerformance(n: number, speed: number[], efficiency: number[], k: number): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (max-performance n speed efficiency k)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec max_performance(N :: integer(), Speed :: [integer()], Efficiency :: [integer()], K :: integer()) -> integer().\nmax_performance(N, Speed, Efficiency, K) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec max_performance(n :: integer, speed :: [integer], efficiency :: [integer], k :: integer) :: integer\n  def max_performance(n, speed, efficiency, k) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"39.9K\", \"totalSubmission\": \"95.8K\", \"totalAcceptedRaw\": 39859, \"totalSubmissionRaw\": 95847, \"acRate\": \"41.6%\"}",
        "hints": [
            "Keep track of the engineers by their efficiency in decreasing order.",
            "Starting from one engineer, to build a team, it suffices to bring K-1 more engineers who have higher efficiencies as well as high speeds."
        ],
        "solution": {
            "id": "1139",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "6\n[2,10,3,1,5,8]\n[5,4,3,9,7,2]\n2",
        "metaData": "{\n  \"name\": \"maxPerformance\",\n  \"params\": [\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    },\n    {\n      \"type\": \"integer[]\",\n      \"name\": \"speed\"\n    },\n    {\n      \"type\": \"integer[]\",\n      \"name\": \"efficiency\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"k\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1139",
        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n#### Overview\r\n\r\nAt first glance, the problem might seem to be a combination problem (_e.g._ [Combination Sum III](https://leetcode.com/problems/combination-sum-iii/)), meaning one could enumerate all possible compositions and return the team with the maximum performance based on the given benchmark.\r\n\r\nHowever, while this **brute force** idea is intuitive, it is also inefficient, because the number of combinations grows exponentially with the number of engineers.\r\nIn fact, there are some insights that can be derived from the problem, which we can leverage to greatly speed up the algorithm.\r\n\r\nIn this article, we will introduce a greedy algorithm together with the application of priority queue to solve the problem.\r\n\r\n\r\n<br/>\r\n---\r\n#### Approach: Greedy with Priority Queue\r\n\r\n**Intuition**\r\n\r\n>As a reminder, the **_performance_** of a team is defined as the **sum** of all members' **speeds** multiplied by the **_minimum efficiency_** among the members.\r\n\r\nAs one can see, the performance of a team depends on _**two variables**_.\r\n\r\nTo facilitate the enumeration process, let us first **fix** the value of one of the variables, namely the _minimum efficiency_ of the team.\r\n\r\nThe key idea behind the enumeration process is as follows:\r\n\r\n>For each candidate, we treat him/her as the one who has the _minimum efficiency_ in a team. Then, we select the rest of the team members based on this condition.\r\n\r\n- The above enumeration is **sound**, which means it is guaranteed to find the optimal solution to the problem.\r\nFor example, before arriving at a final solution where candidate *X* has the minimum efficiency on the team, we must have enumerated all potential team compositions that include candidate X.\r\n\r\n- Most importantly, the above enumeration helps **prune** some of the unnecessary team compositions. Hence it runs significantly faster.\r\nStarting from a fixed candidate and only accepting new team members that have a higher efficiency than the fixed candidate, allows us to only consider teams of size `k`, rather than enumerating all teams of size one to `k`.\r\nThis is because once the minimum efficiency of a team is fixed, each new team member is guaranteed to improve the team's performance.\r\nTherefore, we should add as many new members as possible.\r\n\r\nActually, the above enumeration can be categorized as a [Greedy algorithm](https://en.wikipedia.org/wiki/Greedy_algorithm), where we decompose a problem into a series of stages, and at each stage we make the **_locally optimal_** choice.\r\n\r\nIn our case, we derive the solution through an enumeration process, where at each step we build a _locally optimal_ team by starting from a fixed engineer with the minimum efficiency on the team.\r\nAt the end of the enumeration process, we select the maximum among the locally optimal solutions to obtain the **globally optimal** solution.\r\n\r\n**Algorithm**\r\n\r\nTo see how the above enumeration works, let us walk through some concrete examples.\r\n\r\nSuppose that we have a list of 6 engineers with `speed = [2,10,3,1,5,8]`, `efficiency = [5,4,3,9,7,2]`, and we are asked to compose a team with at most `k=2` members.\r\n\r\nHere are three steps that demonstrate how we can compose a team with the maximum performance and with **_at most_** `k` members.\r\n\r\n1). Let's select the first engineer from the list of candidates as a potential member of the team.\r\nThe first engineer has speed of `2` and an efficiency of `5`.\r\n\r\n_More importantly, we will impose a condition that all future team members must have an efficiency **greater than or equal to** the first team member._\r\n\r\n![example step 1](../Figures/1383/1383_example_1.png)\r\n\r\n2). Next, we will select the rest of the team members.\r\nWe will use the following criteria in order to maximize the performance of the team:\r\n\r\n- Each of the selected members should have an efficiency that is at least as high as the engineer that was picked in the first step.\r\n\r\n- With the minimum effiency fixed, it will be beneficial to pick as many additional members as possible, up to the maximum quota of `k-1` members.\r\n\r\nWith the first candidate fixed as a member of the team, we need to select at most one more member for the team. We are limited to at most one more member because `k-1 = 2-1 = 1`.\r\n\r\n![example step 2](../Figures/1383/1383_example_2.png)\r\n\r\nAccording to the criteria listed above, in order to **_maximize_** the performance of the team, we should invite the fifth candidate to join the team. Here is the rationale.\r\nBoth the _fourth_ and _fifth_ candidates have a higher efficiency than the first candidate.\r\nTherefore, both of them are eligible to join the team.\r\nHowever, since the fifth candidate is faster than the fourth candidate, it is **_optimal_** to choose the fifth candidate in order to maximize the total speed of the team, and therefore maximize the performance of the team.\r\n\r\n3). We repeat the above two steps for each of the remaining candidates.\r\nAt the end of the enumeration process, we will discover that the team composition with the second candidate as the one with the minimum efficiency will emerge as the one with the *maximum* performance.\r\n\r\n![example step 3](../Figures/1383/1383_example_3.png)\r\n\r\n**Implementation**\r\n\r\nThe most complex step in the algorithm is the second step.  In the second step, we have selected a member who will have the lowest efficiency in the team, and we must determine **_how_** to construct the rest of the team.\r\nWe can answer this question, by breaking it down into two tasks:\r\n\r\n- First of all, given a fixed member, we must **find** all eligible candidates (at most `k-1` members) whose efficiencies are higher than the fixed member's efficiency.\r\n\r\n    - To achieve this task, we could **_sort_** the candidates, in descending order, based on _efficiency_.\r\n\r\n    - We then iterate through the sorted candidates. For each candidate, we only need to consider the earlier candidates. Since the list is sorted, only the earlier candidates will have a higher efficiency than the current candidate.\r\n\r\n- Given all the eligible candidates, in order to maximize the total speed, we need to **find** the **fastest** `k-1` eligible candidates.\r\n\r\n    - To achieve this task, we can **_sort_** the candidates again. But this time, we sort only the earlier candidates, and most importantly we sort by _speed_ rather than efficiency.\r\n\r\n    - The sorting idea is a valid one. However, a more efficient option would be to apply the [Priority Queue](https://en.wikipedia.org/wiki/Priority_queue) data structure here.\r\n    The priority queue, also known as **_heap_**, is a data structure which *dynamically* maintains the order of elements based on some predefined _priority_.\r\n    The priority queue is well-known for its optimized time complexity when maintaining a list of sorted elements.\r\n    As such, we will we opt to use a priority queue in the following implementation.\r\n\r\n![algorithm](../Figures/1383/1383_algorithm.png)\r\n\r\nTo recap, we will build a **greedy** algorithm that utilizes the **priority queue** data structure. Here are the steps in detail.\r\n\r\n- First of all, let's sort the candidates by efficiency in descending order.\r\n\r\n- Then, we will iterate through the sorted candidates.\r\n  - At each iteration, our goal is to construct a team with at most `k` members, while treating the current candidate as the one with the lowest efficiency on the team.\r\n  - We use a priority queue to store the speeds for the rest `k-1` team members.\r\n  The priority queue is maintained as a **sliding window** along with our iteration.  For example, we pop out the member with the lowest speed when we exceed the predefined capacity of the queue, which is `k-1`.\r\n\r\n\r\n<iframe src=\"https://leetcode.com/playground/EEvxmpYV/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EEvxmpYV\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the total number of candidates, and $$K$$ be the size of the team.\r\n\r\n- Time Complexity: $$O\\big(N \\cdot (\\log N + \\log K)\\big)$$\r\n\r\n    - First of all, we build a list of candidates from the inputs, which takes $$O(N)$$ time.\r\n\r\n    - We then sort the candidates, which takes $$O(N \\log N)$$ time.\r\n\r\n    - We iterate through the sorted candidates. At each iteration, we will perform at most two operations on the priority queue: one push and one pop.\r\n    Each operation takes $$O\\big(\\log (K-1) \\big)$$ time, where $$K-1$$ is the capacity of the queue.\r\n    To sum up, the time complexity of this iteration will be $$O\\big(N \\cdot \\log (K-1)\\big) = O(N \\cdot \\log K)$$.\r\n\r\n    - Thus, the overall time complexity of the algorithm will be $$O\\big(N \\cdot (\\log N + \\log K)\\big)$$.\r\n\r\n- Space Complexity: $$O(N + K)$$\r\n\r\n    - We build a list of candidates from the inputs, which takes $$O(N)$$ space.\r\n\r\n    - We also use the priority queue data structure whose space capacity is $$O(K-1)$$.\r\n\r\n    - Note that we use sorting in the algorithm, and the space complexity of the sorting algorithm depends on the implementation of each programming language.\r\n    For instance, the `sorted()` function in Python is implemented with the [Timsort](https://en.wikipedia.org/wiki/Timsort) algorithm whose space complexity is $$\\mathcal{O}(N)$$.\r\n    While in Java, the [Collections.sort()](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#sort-byte:A-) is implemented as a variant of the quicksort algorithm whose space complexity is $$\\mathcal{O}(\\log{N})$$.\r\n\r\n    - To sum up, the overall space complexity of the entire algorithm is $$O(N + K)$$.\r\n\r\n\r\n<br/>\r\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1144",
            "count": 50,
            "average": "4.860",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "maximum-performance-of-a-team",
    "playgroundData": {
        "EEvxmpYV": {
            "playground": {
                "testcaseInput": "",
                "name": "maximum-performance-of-a-team-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}