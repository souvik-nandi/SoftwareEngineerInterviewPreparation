{
    "id": "570",
    "question": {
        "questionId": "570",
        "questionFrontendId": "570",
        "boundTopicId": null,
        "title": "Managers with at Least 5 Direct Reports",
        "titleSlug": "managers-with-at-least-5-direct-reports",
        "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| department  | varchar |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the name of an employee, their department, and the id of their manager.\nIf managerId is null, then the employee does not have a manager.\nNo employee will be the manager of themself.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to report the managers with at least <strong>five direct reports</strong>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+-----+-------+------------+-----------+\n| id  | name  | department | managerId |\n+-----+-------+------------+-----------+\n| 101 | John  | A          | None      |\n| 102 | Dan   | A          | 101       |\n| 103 | James | A          | 101       |\n| 104 | Amy   | A          | 101       |\n| 105 | Anne  | A          | 101       |\n| 106 | Ron   | B          | 101       |\n+-----+-------+------------+-----------+\n<strong>Output:</strong> \n+------+\n| name |\n+------+\n| John |\n+------+\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 243,
        "dislikes": 36,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "{\"headers\": {\"Employee\": [\"id\", \"name\", \"department\", \"managerId\"]}, \"rows\": {\"Employee\": [[101, \"John\", \"A\", null],[102, \"Dan\", \"A\", 101], [103, \"James\", \"A\", 101], [104, \"Amy\", \"A\", 101], [105, \"Anne\", \"A\", 101], [106, \"Ron\", \"B\", 101]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"63.4K\", \"totalSubmission\": \"94.5K\", \"totalAcceptedRaw\": 63449, \"totalSubmissionRaw\": 94455, \"acRate\": \"67.2%\"}",
        "hints": [
            "Try to get all the mangerIDs that have count bigger than 5",
            "Use the last hint's result as a table and do join with origin table at id equals to managerId",
            "This is a very good example to show the performance of SQL code. Try to work out other solutions and you may be surprised by running time difference.",
            "If your solution uses 'IN' function and runs more than 5 seconds, try to optimize it by using 'JOIN' instead."
        ],
        "solution": {
            "id": "209",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "{\"headers\": {\"Employee\": [\"id\", \"name\", \"department\", \"managerId\"]}, \"rows\": {\"Employee\": [[101, \"John\", \"A\", null],[102, \"Dan\", \"A\", 101], [103, \"James\", \"A\", 101], [104, \"Amy\", \"A\", 101], [105, \"Anne\", \"A\", 101], [106, \"Ron\", \"B\", 101]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Employee (id int, name varchar(255), department varchar(255), managerId int)\"\n  ],\n  \"mssql\": [\n    \"Create table Employee (id int, name varchar(255), department varchar(255), managerId int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Employee (id int, name varchar(255), department varchar(255), managerId int)\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Employee (id int, name varchar(255), department varchar(255), managerId int)",
            "Truncate table Employee",
            "insert into Employee (id, name, department, managerId) values ('101', 'John', 'A', 'None')",
            "insert into Employee (id, name, department, managerId) values ('102', 'Dan', 'A', '101')",
            "insert into Employee (id, name, department, managerId) values ('103', 'James', 'A', '101')",
            "insert into Employee (id, name, department, managerId) values ('104', 'Amy', 'A', '101')",
            "insert into Employee (id, name, department, managerId) values ('105', 'Anne', 'A', '101')",
            "insert into Employee (id, name, department, managerId) values ('106', 'Ron', 'B', '101')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "209",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using `JOIN` and a temporary table [Accepted]\n\n**Algorithm**\n\nFirst, we can get the Id of the manager having more than 5 direct reports just using this *ManagerId* column.\n\nThen, we can get the name of this manager by join that table with the **Employee** table.\n\n**MySQL**\n\n```sql\nSELECT\n    Name\nFROM\n    Employee AS t1 JOIN\n    (SELECT\n        ManagerId\n    FROM\n        Employee\n    GROUP BY ManagerId\n    HAVING COUNT(ManagerId) >= 5) AS t2\n    ON t1.Id = t2.ManagerId\n;\n```",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "204",
            "count": 14,
            "average": "3.071",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "managers-with-at-least-5-direct-reports",
    "playgroundData": {}
}