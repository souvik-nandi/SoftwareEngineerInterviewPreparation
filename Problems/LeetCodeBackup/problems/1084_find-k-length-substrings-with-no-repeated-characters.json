{
    "id": "1084",
    "question": {
        "questionId": "1084",
        "questionFrontendId": "1100",
        "boundTopicId": null,
        "title": "Find K-Length Substrings With No Repeated Characters",
        "titleSlug": "find-k-length-substrings-with-no-repeated-characters",
        "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the number of substrings in </em><code>s</code><em> of length </em><code>k</code><em> with no repeated characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;havefunonleetcode&quot;, k = 5\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 6 substrings they are: &#39;havef&#39;,&#39;avefu&#39;,&#39;vefun&#39;,&#39;efuno&#39;,&#39;etcod&#39;,&#39;tcode&#39;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;home&quot;, k = 5\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Notice k can be larger than the length of s. In this case, it is not possible to find any substring.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 448,
        "dislikes": 9,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "\"havefunonleetcode\"\n5\n\"home\"\n5",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "String",
                "slug": "string",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 4}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int numKLenSubstrNoRepeats(string s, int k) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int numKLenSubstrNoRepeats(String s, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def numKLenSubstrNoRepeats(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def numKLenSubstrNoRepeats(self, s: str, k: int) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint numKLenSubstrNoRepeats(char * s, int k){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int NumKLenSubstrNoRepeats(string s, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar numKLenSubstrNoRepeats = function(s, k) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef num_k_len_substr_no_repeats(s, k)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func numKLenSubstrNoRepeats(_ s: String, _ k: Int) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func numKLenSubstrNoRepeats(s string, k int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def numKLenSubstrNoRepeats(s: String, k: Int): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun numKLenSubstrNoRepeats(s: String, k: Int): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn num_k_len_substr_no_repeats(s: String, k: i32) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function numKLenSubstrNoRepeats($s, $k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function numKLenSubstrNoRepeats(s: string, k: number): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (num-k-len-substr-no-repeats s k)\n  (-> string? exact-integer? exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec num_k_len_substr_no_repeats(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nnum_k_len_substr_no_repeats(S, K) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec num_k_len_substr_no_repeats(s :: String.t, k :: integer) :: integer\n  def num_k_len_substr_no_repeats(s, k) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"31.1K\", \"totalSubmission\": \"41.6K\", \"totalAcceptedRaw\": 31079, \"totalSubmissionRaw\": 41589, \"acRate\": \"74.7%\"}",
        "hints": [
            "How to check efficiently each K-length substring?",
            "First store the first leftmost K-length substring in a hashTable or array of frequencies.",
            "Then iterate through the rest of characters and erase the first element and add the next element from the right. If in the hashTable we have K different character we add 1 to the counter. After that return as answer the counter."
        ],
        "solution": {
            "id": "1302",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "\"havefunonleetcode\"\n5",
        "metaData": "{\n  \"name\": \"numKLenSubstrNoRepeats\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"k\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "827",
            "date": "2022-02-15",
            "incompleteChallengeCount": 28,
            "streakCount": 0,
            "type": "WEEKLY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1302",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Brute Force\n\n**Intuition**\n\nThe constraints specify that the input string can only have lowercase English letters. Hence, the longest possible substring with no repeated characters can only have at most 26 characters! Adding any other character would require the repetition of a character. This means that for any $$k > 26$$, there cannot be a substring with no repeated characters! Hence, we will only need to check for $$k <= 26$$ which can be done via the brute force method in the given constraints.   \n\n**Algorithm**\n\nAs discussed, if $$k > 26$$, then we can simply return 0 as there can't be any string of length greater than 26 with all unique characters. For all other cases where $$k <= 26$$, we can individually check every substring of length $$k$$ to see if it has repeated characters or not. To check if a substring has repeated characters, we can make use of a hash table or a frequency array. How exactly can we use them? For each substring, we will insert its elements into the hash table or frequency array one by one. While doing so, if we see that the current element is already present, we will know that it is a repeated element.\n\nLet us summarize the algorithm.\n\n1. Iterate over $$s$$ from index 0 to index $$n - k$$ (inclusive), where $$n$$ is the length of $$s$$. We stop at index $$n - k$$ because any substring that starts after this index will contain less than $$k$$ characters.\n2. For each index $$i$$:  \n\n    i. Initialize a flag $$isUnique = true$$ signifying that we have not encountered any repeated character yet, and initialize a \nfrequency array of size 26 to count how many times we see each character. \n   - Note that we could also use a set instead of a frequency array.\n   - Note that Python offers an [else clause](https://docs.python.org/3/tutorial/controlflow.html?highlight=else%20clause#break-and-continue-statements-and-else-clauses-on-loops) feature for loops that we will use instead of a flag. \n\n   ii. Iterate over the next $$k$$ characters and keep incrementing the frequency of each encountered character in the frequency array.\n\n   iii. If the frequency of any character becomes greater than 1, set $$isUnique$$ to $$false$$, indicating that the current substring has a repeated character, and break from the iteration.\n\n    iv. After iterating over the $$k$$ characters, if the $$isUnique$$ flag is still $$true$$ then the current substring has no repeated characters, so increment the answer by 1.\n\n3. After iterating over all indices from 0 to $$n - k$$, return the number of substrings with no repeated characters.\n\n!?!../Documents/1100/slideshow1.json:960,540!?!\n<br>\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/NztMpfcQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"NztMpfcQ\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the length of $$s$$, $$k$$ be the given substring length, and $$m$$ be the number of unique characters allowed in the string. In this case, $$m = 26$$.\n\n* Time complexity: $$O(n \\cdot \\min(m, k))$$.\n\n    + It might seem like the complexity should be $$O(n \\cdot k)$$ since for each index, we are checking if the substring of length $$k$$ starting at that index has repeated characters or not. But recall that we only do these operations when $$k <= m$$. For all other cases, i.e. when $$k > m$$, we return 0. Hence we can say that $$k$$ is bounded by $$m$$, which makes the time complexity $$O(n \\cdot \\min(m, k))$$. \n    + Further, since $$m = 26$$ here, we can consider it to be constant which would make the complexity equivalent to $$O(n)$$.\n\n* Space complexity: $$O(m)$$\n\n    + The only extra space used is by the frequency array of size $$m$$, which in this case is equal to 26. Hence, this can be considered as constant space, i.e. $$O(1)$$.  \n\n---\n#### Approach 2: Sliding Window\n\n**Intuition**\n\nThe problem requires us to count the number of k-length substrings with no repeated characters. Let us rephrase this a little. It is equivalent to saying that we need to count k-length *windows* in the string which consists only of unique characters. So, we can *slide* through the string and count the number of *windows* which have a length $$k$$ and which only consist of unique characters. To summarize the not-so-clever wordplay, we can make use of the Sliding Window technique to approach the problem as well!\n\n**Algorithm**\n\nThe Sliding Window technique makes use of two pointers $$left$$ and $$right$$ to traverse the string. $$left$$ and $$right$$ pointers actually represent the leftmost index and the rightmost index of the window (or substring) respectively. We need to expand (by incrementing the $$right$$ pointer), and contract (by incrementing the $$left$$ pointer) the window such that the following rules are taken care of. \n\n* The window (or substring) only contains unique characters.\n* The size of the window does not exceed $$k$$, i.e $$right - left + 1 <= k$$\n\nThe first rule can be taken care of by using a hash table or frequency array as discussed in the previous approach. We will *expand* our window and keep inserting elements in the frequency array. If we find that an element is already present in the array, then we need to *contract* our window and remove elements from the array until the duplicate element is removed. This will ensure that the current window, i.e. the substring represented by $$s[left, right]$$ (inclusive), only contains unique characters. The size of the window will be $$right - left + 1$$. This size can be smaller than or equal to $$k$$. If it is equal to $$k$$, then we can increment our answer and contract the window by incrementing $$left$$ and removing the leftmost element from the frequency array. This will ensure that the size of the window never exceeds $$k$$, thereby obeying the second rule as well. \n\nLet us summarize the algorithm.\n\n1. Initialize a frequency array of size 26 and two pointers $$left$$ and $$right$$, both initially point to the 0th index.\n2. While $$right$$ is less than $$n$$, where $$n$$ is the length of the string, do the following:\n\n   i. Add the current character to the frequency array, i.e, increase its frequency by 1 in the array. \n\n   ii. If the frequency of the current character in the frequency array is greater than 1, then it is a duplicate character. Increment the $$left$$ pointer and keep removing elements from the frequency array until the duplicate character has been removed. The window represented by $$left$$ and $$right$$ (inclusive) will now only contain unique characters.\n\n   iii. If the size of the current window is equal to $$k$$, then increment the answer and contract the window by incrementing $$left$$ and removing the leftmost character from the frequency array. This is done so that the size of the window does not exceed $$k$$.\n\n   iv. Expand the window by incrementing the $$right$$ pointer so that the next character can be processed.\n\n3. Once $$right$$ reaches the end of the string, return the answer.\n\n!?!../Documents/1100/slideshow2.json:960,540!?!\n<br>\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/94ckapiT/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"94ckapiT\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the length of $$s$$ and $$m$$ be the number of unique characters allowed in the string. In this case, $$m = 26$$.\n\n* Time complexity: $$O(n)$$.\n\n    + It might seem like the nested loop should result in an $$O(n^2)$$ complexity but notice that both the loops only ever increment $$left$$ or $$right$$ and this is done while $$right$$ is less than $$n$$. Hence, each character will be visited at most twice: once by the $$left$$ pointer and once by the $$right$$ pointer. This results in a complexity of $$O(2n)$$ which is equivalent to $$O(n)$$.\n\n* Space complexity: $$O(m)$$\n\n    + The only extra space used is by the frequency array of size $$m$$, which in this case is equal to 26. Hence, this can be considered as constant space, i.e. $$O(1)$$.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1307",
            "count": 11,
            "average": "5.000",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "find-k-length-substrings-with-no-repeated-characters",
    "playgroundData": {
        "NztMpfcQ": {
            "playground": {
                "testcaseInput": "",
                "name": "find-k-length-substrings-with-no-repeated-characters-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "94ckapiT": {
            "playground": {
                "testcaseInput": "",
                "name": "find-k-length-substrings-with-no-repeated-characters-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}