{
    "id": "615",
    "question": {
        "questionId": "615",
        "questionFrontendId": "615",
        "boundTopicId": null,
        "title": "Average Salary: Departments VS Company",
        "titleSlug": "average-salary-departments-vs-company",
        "content": "<p>Table: <code>Salary</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| employee_id | int  |\n| amount      | int  |\n| pay_date    | date |\n+-------------+------+\nid is the primary key column for this table.\nEach row of this table indicates the salary of an employee in one month.\nemployee_id is a foreign key from the Employee table.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Employee</code></p>\n\n<pre>\n+---------------+------+\n| Column Name   | Type |\n+---------------+------+\n| employee_id   | int  |\n| department_id | int  |\n+---------------+------+\nemployee_id is the primary key column for this table.\nEach row of this table indicates the department of an employee.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to report the comparison result <strong>(higher/lower/same)</strong> of the average salary of employees in a department to the company&#39;s average salary.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nSalary table:\n+----+-------------+--------+------------+\n| id | employee_id | amount | pay_date   |\n+----+-------------+--------+------------+\n| 1  | 1           | 9000   | 2017/03/31 |\n| 2  | 2           | 6000   | 2017/03/31 |\n| 3  | 3           | 10000  | 2017/03/31 |\n| 4  | 1           | 7000   | 2017/02/28 |\n| 5  | 2           | 6000   | 2017/02/28 |\n| 6  | 3           | 8000   | 2017/02/28 |\n+----+-------------+--------+------------+\nEmployee table:\n+-------------+---------------+\n| employee_id | department_id |\n+-------------+---------------+\n| 1           | 1             |\n| 2           | 2             |\n| 3           | 2             |\n+-------------+---------------+\n<strong>Output:</strong> \n+-----------+---------------+------------+\n| pay_month | department_id | comparison |\n+-----------+---------------+------------+\n| 2017-02   | 1             | same       |\n| 2017-03   | 1             | higher     |\n| 2017-02   | 2             | same       |\n| 2017-03   | 2             | lower      |\n+-----------+---------------+------------+\n<strong>Explanation:</strong> \nIn March, the company&#39;s average salary is (9000+6000+10000)/3 = 8333.33...\nThe average salary for department &#39;1&#39; is 9000, which is the salary of employee_id &#39;1&#39; since there is only one employee in this department. So the comparison result is &#39;higher&#39; since 9000 &gt; 8333.33 obviously.\nThe average salary of department &#39;2&#39; is (6000 + 10000)/2 = 8000, which is the average of employee_id &#39;2&#39; and &#39;3&#39;. So the comparison result is &#39;lower&#39; since 8000 &lt; 8333.33.\n\nWith he same formula for the average salary comparison in February, the result is &#39;same&#39; since both the department &#39;1&#39; and &#39;2&#39; have the same average salary with the company, which is 7000.\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 184,
        "dislikes": 61,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Countries You Can Safely Invest In\", \"titleSlug\": \"countries-you-can-safely-invest-in\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "{\"headers\":{\"Salary\":[\"id\",\"employee_id\",\"amount\",\"pay_date\"],\"Employee\":[\"employee_id\",\"department_id\"]},\"rows\":{\"Salary\":[[1,1,9000,\"2017/03/31\"],[2,2,6000,\"2017/03/31\"],[3,3,10000,\"2017/03/31\"],[4,1,7000,\"2017/02/28\"],[5,2,6000,\"2017/02/28\"],[6,3,8000,\"2017/02/28\"]],\"Employee\":[[1,1],[2,2],[3,2]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 7}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"27.9K\", \"totalSubmission\": \"49K\", \"totalAcceptedRaw\": 27866, \"totalSubmissionRaw\": 48984, \"acRate\": \"56.9%\"}",
        "hints": [],
        "solution": {
            "id": "169",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "{\"headers\":{\"Salary\":[\"id\",\"employee_id\",\"amount\",\"pay_date\"],\"Employee\":[\"employee_id\",\"department_id\"]},\"rows\":{\"Salary\":[[1,1,9000,\"2017/03/31\"],[2,2,6000,\"2017/03/31\"],[3,3,10000,\"2017/03/31\"],[4,1,7000,\"2017/02/28\"],[5,2,6000,\"2017/02/28\"],[6,3,8000,\"2017/02/28\"]],\"Employee\":[[1,1],[2,2],[3,2]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Salary (id int, employee_id int, amount int, pay_date date)\",\n    \"Create table If Not Exists Employee (employee_id int, department_id int)\"\n  ],\n  \"mssql\": [\n    \"Create table Salary (id int, employee_id int, amount int, pay_date date)\",\n    \"Create table Employee (employee_id int, department_id int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Salary (id int, employee_id int, amount int, pay_date date)\",\n    \"Create table Employee (employee_id int, department_id int)\",\n    \"alter SESSION set NLS_DATE_FORMAT = 'YYYY/MM/DD'\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Salary (id int, employee_id int, amount int, pay_date date)",
            "Create table If Not Exists Employee (employee_id int, department_id int)",
            "Truncate table Salary",
            "insert into Salary (id, employee_id, amount, pay_date) values ('1', '1', '9000', '2017/03/31')",
            "insert into Salary (id, employee_id, amount, pay_date) values ('2', '2', '6000', '2017/03/31')",
            "insert into Salary (id, employee_id, amount, pay_date) values ('3', '3', '10000', '2017/03/31')",
            "insert into Salary (id, employee_id, amount, pay_date) values ('4', '1', '7000', '2017/02/28')",
            "insert into Salary (id, employee_id, amount, pay_date) values ('5', '2', '6000', '2017/02/28')",
            "insert into Salary (id, employee_id, amount, pay_date) values ('6', '3', '8000', '2017/02/28')",
            "Truncate table Employee",
            "insert into Employee (employee_id, department_id) values ('1', '1')",
            "insert into Employee (employee_id, department_id) values ('2', '2')",
            "insert into Employee (employee_id, department_id) values ('3', '2')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "169",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using `avg()` and `case...when...` [Accepted]\n\n**Intuition**\n\nSolve this problem by 3 steps as below.\n\n**Algorithm**\n\n1.Calculate the company's average salary in every month\nMySQL has the built-in function avg() to get the average of a list of numbers. Also, we need to format the *pay_date* column for future use.\n\n```sql\nselect avg(amount) as company_avg,  date_format(pay_date, '%Y-%m') as pay_month\nfrom salary\ngroup by date_format(pay_date, '%Y-%m')\n;\n```\n\n| company_avg | pay_month |\n|-------------|-----------|\n| 7000.0000   | 2017-02   |\n| 8333.3333   | 2017-03   |\n\n2.Calculate the each department's average salary in every month\nTo do this, we need to join the **salary** table with the **employee** table using condition `salary.employee_id = employee.id`.\n\n```sql\nselect department_id, avg(amount) as department_avg, date_format(pay_date, '%Y-%m') as pay_month\nfrom salary\njoin employee on salary.employee_id = employee.employee_id\ngroup by department_id, pay_month\n;\n```\n\n| department_id | department_avg | pay_month |\n|---------------|----------------|-----------|\n| 1             | 7000.0000      | 2017-02   |\n| 1             | 9000.0000      | 2017-03   |\n| 2             | 7000.0000      | 2017-02   |\n| 2             | 8000.0000      | 2017-03   |\n\n3.Compare the previous numbers and display the result\nThis step might be the hardest if you have no idea on how to use MySQL flow control statement [`case...when...`](https://dev.mysql.com/doc/refman/5.7/en/case.html).\n\nMySQL, like other programming languages, also has its flow control. Click [this link](https://dev.mysql.com/doc/refman/5.7/en/flow-control-statements.html) to learn it.\n\nAt last, combine the above two query and join them `on department_salary.pay_month = company_salary.pay_month`.\n\n**MySQL**\n\n```sql\nselect department_salary.pay_month, department_id,\ncase\n  when department_avg>company_avg then 'higher'\n  when department_avg<company_avg then 'lower'\n  else 'same'\nend as comparison\nfrom\n(\n  select department_id, avg(amount) as department_avg, date_format(pay_date, '%Y-%m') as pay_month\n  from salary join employee on salary.employee_id = employee.employee_id\n  group by department_id, pay_month\n) as department_salary\njoin\n(\n  select avg(amount) as company_avg,  date_format(pay_date, '%Y-%m') as pay_month from salary group by date_format(pay_date, '%Y-%m')\n) as company_salary\non department_salary.pay_month = company_salary.pay_month\n;\n```",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "164",
            "count": 13,
            "average": "4.692",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "average-salary-departments-vs-company",
    "playgroundData": {}
}