{
    "id": "1134",
    "question": {
        "questionId": "1134",
        "questionFrontendId": "1182",
        "boundTopicId": null,
        "title": "Shortest Distance to Target Color",
        "titleSlug": "shortest-distance-to-target-color",
        "content": "<p>You are given an array <code>colors</code>, in which there are three colors: <code>1</code>, <code>2</code> and&nbsp;<code>3</code>.</p>\n\n<p>You are also given some queries. Each query consists of two integers <code>i</code>&nbsp;and <code>c</code>, return&nbsp;the shortest distance between the given index&nbsp;<code>i</code> and the target color <code>c</code>. If there is no solution return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]\n<strong>Output:</strong> [3,0,3]\n<strong>Explanation: </strong>\nThe nearest 3 from index 1 is at index 4 (3 steps away).\nThe nearest 2 from index 2 is at index 2 itself (0 steps away).\nThe nearest 1 from index 6 is at index 3 (3 steps away).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> colors = [1,2], queries = [[0,3]]\n<strong>Output:</strong> [-1]\n<strong>Explanation: </strong>There is no 3 in the array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= colors.length &lt;= 5*10^4</code></li>\n\t<li><code>1 &lt;= colors[i] &lt;= 3</code></li>\n\t<li><code>1&nbsp;&lt;= queries.length &lt;= 5*10^4</code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= queries[i][0] &lt;&nbsp;colors.length</code></li>\n\t<li><code>1 &lt;= queries[i][1] &lt;= 3</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 379,
        "dislikes": 16,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "[1,1,2,1,3,2,2,3,3]\n[[1,3],[2,2],[6,1]]\n[1,2]\n[[0,3]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    vector<int> shortestDistanceColor(vector<int>& colors, vector<vector<int>>& queries) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def shortestDistanceColor(self, colors, queries):\n        \"\"\"\n        :type colors: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* shortestDistanceColor(int* colors, int colorsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public IList<int> ShortestDistanceColor(int[] colors, int[][] queries) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} colors\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar shortestDistanceColor = function(colors, queries) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} colors\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef shortest_distance_color(colors, queries)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func shortestDistanceColor(_ colors: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func shortestDistanceColor(colors []int, queries [][]int) []int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def shortestDistanceColor(colors: Array[Int], queries: Array[Array[Int]]): List[Int] = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun shortestDistanceColor(colors: IntArray, queries: Array<IntArray>): List<Int> {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn shortest_distance_color(colors: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function shortestDistanceColor($colors, $queries) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function shortestDistanceColor(colors: number[], queries: number[][]): number[] {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (shortest-distance-color colors queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec shortest_distance_color(Colors :: [integer()], Queries :: [[integer()]]) -> [integer()].\nshortest_distance_color(Colors, Queries) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec shortest_distance_color(colors :: [integer], queries :: [[integer]]) :: [integer]\n  def shortest_distance_color(colors, queries) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"25.3K\", \"totalSubmission\": \"46.7K\", \"totalAcceptedRaw\": 25264, \"totalSubmissionRaw\": 46689, \"acRate\": \"54.1%\"}",
        "hints": [
            "Greedy solution is too slow because of the limits.",
            "Can you solve this problem offline by doing some pre-processing?",
            "Calculate the answers for all indexes moving to their left and to their right."
        ],
        "solution": {
            "id": "1104",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[1,1,2,1,3,2,2,3,3]\n[[1,3],[2,2],[6,1]]",
        "metaData": "{\n  \"name\": \"shortestDistanceColor\",\n  \"params\": [\n    {\n      \"name\": \"colors\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"queries\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "1004",
            "date": "2022-07-15",
            "incompleteChallengeCount": 14,
            "streakCount": 0,
            "type": "WEEKLY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1104",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Binary Search\n\n**Intuition**\n\nGiven an array `colors` and a series of queries, each of which contains two integers `i` and `c`, we want to find the shortest distance between `i` and the target color `c`.\nThe most straightforward approach would be: For each query containing index `i` and color `c`, find all occurrences of `c` in the array. For each occurrence, calculate the distance between it and index `i`. Return the shortest distance found.\n\nHowever, the above approach wastes time going through colors that are not `c`.\nTo solve this, we could begin by initializing three lists; one for each color. We could then iterate over `colors`, putting each index into its respective color list. Then when we go through the list of queries, we only need to look at the list that corresponds with `c`. The cleanest way of storing these lists would be to use a hashmap; the keys are colors, and the values are lists.\n\n!?!../Documents/1182_approach_1.json:602,361!?!\n\nWe've made a big improvement - but don't stop here - we can make it even better! The fact is, we don't have to scan an entire list for the given query containing `i` and `c`;\nthe values in each list are sorted, because we inserted the indexes in order, from `0` to `n`.\nTherefore, we can use a binary search to find the value nearest to `i`. Using binary search improves the time complexity from linear to logarithmic.\n\n**Algorithm**\n\n- Initialize a hashmap to map each color to a list of indexes.\n- Iterate over `colors` and put each index into its corresponding list of the hashmap.\n- For each query containing `i` and `c`:\n  - if `c` is not one of the keys in the hashmap, then we know that `colors` does not contain `c` and therefore should return `-1` as stated in the problem description;\n  - else, we want to find the position of `i` in its corresponding color list `indexList` to maintain the sorted order:\n    - if `i` is smaller than all elements in `indexList`, then `i - indexList[0]` is the shortest distance;\n    - else if `i` is larger than all elements in the color list, then `indexList[indexList.size() - 1] - i` is the shortest distance;\n    - else, the nearest occurrence of `c` to `i` is either at the insertion index, or the one before it, and so we calculate the distance from `i` to each of them, and return the smallest.\n\n> **Interview Tip:** It can be challenging to know whether you should implement the binary search algorithm yourself, or whether you should use the built-in one. Some interviewers will want you to implement it, as that is a part of what they're evaluating you on. Others might expect you to use the built-in one, as writing your own is often seen as poor *software engineering* practice.\nTo be on the safe side, we recommend that you ask your interviewer *whether or not it's okay for you to use the built-in* binary search. If they say it's your choice, then we recommend using the built-in binary search, as that is considered best practice in software engineering.\nTo learn more about implementing binary search, [check out our explore card](https://leetcode.com/explore/learn/card/binary-search/)\n\n<iframe src=\"https://leetcode.com/playground/kKDFVGCx/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"kKDFVGCx\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$\\mathcal{O}(Q \\log N + N)$$, where $Q$ is the length of `queries` and $N$ is the length of `colors`.\n\n  Going through the input array `colors` and storing each `color - index` pair take $$\\mathcal{O}(N)$$ time. When iterating `queries` and generating results, we apply binary search once for each query, and each binary search takes $$\\mathcal{O}(\\log N)$$, which results in $$\\mathcal{O}(Q \\log N)$$. Putting them together and ignoring constants for Big O notation, we have $$\\mathcal{O}(Q \\log N + N)$$.\n* Space Complexity : $$\\mathcal{O}(N)$$.\nThis is because we store the indexes of each `color - index` pair in a hashmap.\n\n<br/>\n\n---\n\n#### Approach 2: Pre-computed\n\n**Intuition**\n\nAnother approach is to pre-compute and store the shortest distance between each index `i` and each color `c` so that, for each query, we can then return the answer in constant time.\n\nTo find the shortest distance between `i` and `c`, we divide it into two steps: firstly find the nearest `c` on `i`'s left; secondly, find the nearest `c` on `i`'s right.\nThe minimum of these is the shortest distance.\n\n\nAn important fact is that, if `color[i]` and `color[j]` are `c` when `i<j` and there's no `c` between `i` and `j`, then for each index `k` between `i` and `j`:\n- the shortest distance between `k` and `c` on its *left* is `k-i`.\n- the shortest distance between `k` and `c` on its *right* is `j-k`.\n\n![Nearest color to the index.](../Figures/1182/1182-5.png)\n{:align=\"center\"}\n\n*Figure 1. Find the nearest color on the left and right.*\n{:align=\"center\"}\n\nTherefore, we can find the nearest target color in two separate phases:\n- Iterating **from left to right** and looking **forwards** to find the nearest target color on the **left**.\n- Iterating **from right to left** and looking **backwards** to find the nearest target color on the **right**.\n\nPlease don't hesitate to look at the visualizations below. Looking left (forwards) and right (backwards) are quite similar therefore I've put them sequentially for your reference.\n\n!?!../Documents/1182_approach_2.json:750,597!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/XnEJHUpA/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"XnEJHUpA\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time Complexity : $$\\mathcal{O}(N + Q)$$, where $N$ is the length of `colors` and $Q$ is the length of `queries`.\n\n  This is because we use iterations to fill `distance` which is a matrix of 3 rows and  $N$ columns taking $$\\mathcal{O}(N)$$ time. Afterwards, we generate the answer for each query in `queries` in $$\\mathcal{O}(1)$$.\n* Space Complexity : $$\\mathcal{O}(N)$$.\nThis is because we initialize two arrays of size 3 and one 2D array of 3 rows and $N$ columns.\n<br/>\n\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1059",
            "count": 29,
            "average": "4.724",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "shortest-distance-to-target-color",
    "playgroundData": {
        "kKDFVGCx": {
            "playground": {
                "testcaseInput": "",
                "name": "shortest-distance-to-target-color-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "XnEJHUpA": {
            "playground": {
                "testcaseInput": "",
                "name": "shortest-distance-to-target-color-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}