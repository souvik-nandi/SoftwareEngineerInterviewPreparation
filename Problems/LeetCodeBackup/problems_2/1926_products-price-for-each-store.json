{
    "id": "1926",
    "question": {
        "questionId": "1926",
        "questionFrontendId": "1777",
        "boundTopicId": null,
        "title": "Product's Price for Each Store",
        "titleSlug": "products-price-for-each-store",
        "content": "<p>Table: <code>Products</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| store       | enum    |\n| price       | int     |\n+-------------+---------+\n(product_id, store) is the primary key for this table.\nstore is an ENUM of type (&#39;store1&#39;, &#39;store2&#39;, &#39;store3&#39;) where each represents the store this product is available at.\nprice is the price of the product at this store.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to find the price of each product in each store.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nProducts table:\n+-------------+--------+-------+\n| product_id  | store  | price |\n+-------------+--------+-------+\n| 0           | store1 | 95    |\n| 0           | store3 | 105   |\n| 0           | store2 | 100   |\n| 1           | store1 | 70    |\n| 1           | store3 | 80    |\n+-------------+--------+-------+\n<strong>Output:</strong> \n+-------------+--------+--------+--------+\n| product_id  | store1 | store2 | store3 |\n+-------------+--------+--------+--------+\n| 0           | 95     | 100    | 105    |\n| 1           | 70     | null   | 80     |\n+-------------+--------+--------+--------+\n<strong>Explanation:</strong> \nProduct 0 price&#39;s are 95 for store1, 100 for store2 and, 105 for store3.\nProduct 1 price&#39;s are 70 for store1, 80 for store3 and, it&#39;s not sold in store2.\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 89,
        "dislikes": 8,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Rearrange Products Table\", \"titleSlug\": \"rearrange-products-table\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Dynamic Pivoting of a Table\", \"titleSlug\": \"dynamic-pivoting-of-a-table\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "exampleTestcases": "{\"headers\":{\"Products\":[\"product_id\",\"store\",\"price\"]},\"rows\":{\"Products\":[[\"0\",\"store1\",\"95\"],[\"0\",\"store3\",\"105\"],[\"0\",\"store2\",\"100\"],[\"1\",\"store1\",\"70\"],[\"1\",\"store3\",\"80\"]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"12.7K\", \"totalSubmission\": \"14.8K\", \"totalAcceptedRaw\": 12661, \"totalSubmissionRaw\": 14784, \"acRate\": \"85.6%\"}",
        "hints": [],
        "solution": null,
        "status": null,
        "sampleTestCase": "{\"headers\":{\"Products\":[\"product_id\",\"store\",\"price\"]},\"rows\":{\"Products\":[[\"0\",\"store1\",\"95\"],[\"0\",\"store3\",\"105\"],[\"0\",\"store2\",\"100\"],[\"1\",\"store1\",\"70\"],[\"1\",\"store3\",\"80\"]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Products (product_id int, store ENUM('store1', 'store2', 'store3'), price int)\"\n  ],\n  \"mssql\": [\n    \"Create table Products (product_id int, store varchar(6) not null check(store in ('store1', 'store2', 'store3')), price int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Products (product_id int, store varchar(6) not null check(store in ('store1', 'store2', 'store3')), price int)\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Products (product_id int, store ENUM('store1', 'store2', 'store3'), price int)",
            "Truncate table Products",
            "insert into Products (product_id, store, price) values ('0', 'store1', '95')",
            "insert into Products (product_id, store, price) values ('0', 'store3', '105')",
            "insert into Products (product_id, store, price) values ('0', 'store2', '100')",
            "insert into Products (product_id, store, price) values ('1', 'store1', '70')",
            "insert into Products (product_id, store, price) values ('1', 'store3', '80')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": null,
    "questionCode": "products-price-for-each-store",
    "playgroundData": null
}