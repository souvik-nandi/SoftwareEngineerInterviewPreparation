{
    "id": "2064",
    "question": {
        "questionId": "2064",
        "questionFrontendId": "1919",
        "boundTopicId": null,
        "title": "Leetcodify Similar Friends",
        "titleSlug": "leetcodify-similar-friends",
        "content": "<p>Table: <code>Listens</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| user_id     | int     |\n| song_id     | int     |\n| day         | date    |\n+-------------+---------+\nThere is no primary key for this table. It may contain duplicates.\nEach row of this table indicates that the user user_id listened to the song song_id on the day day.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Friendship</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user1_id      | int     |\n| user2_id      | int     |\n+---------------+---------+\n(user1_id, user2_id) is the primary key for this table.\nEach row of this table indicates that the users user1_id and user2_id are friends.\nNote that user1_id &lt; user2_id.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to report the similar friends of Leetcodify users. A user <code>x</code> and user <code>y</code> are&nbsp;similar friends if:</p>\n\n<ul>\n\t<li>Users <code>x</code> and <code>y</code> are friends, and</li>\n\t<li>Users <code>x</code> and <code>y</code> listened to the same three or more different songs <strong>on the same day</strong>.</li>\n</ul>\n\n<p>Return the result table in <strong>any order</strong>. Note that you must return the similar pairs of friends the same way they were represented in the input (i.e., always <code>user1_id &lt; user2_id</code>).</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nListens table:\n+---------+---------+------------+\n| user_id | song_id | day        |\n+---------+---------+------------+\n| 1       | 10      | 2021-03-15 |\n| 1       | 11      | 2021-03-15 |\n| 1       | 12      | 2021-03-15 |\n| 2       | 10      | 2021-03-15 |\n| 2       | 11      | 2021-03-15 |\n| 2       | 12      | 2021-03-15 |\n| 3       | 10      | 2021-03-15 |\n| 3       | 11      | 2021-03-15 |\n| 3       | 12      | 2021-03-15 |\n| 4       | 10      | 2021-03-15 |\n| 4       | 11      | 2021-03-15 |\n| 4       | 13      | 2021-03-15 |\n| 5       | 10      | 2021-03-16 |\n| 5       | 11      | 2021-03-16 |\n| 5       | 12      | 2021-03-16 |\n+---------+---------+------------+\nFriendship table:\n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n| 2        | 4        |\n| 2        | 5        |\n+----------+----------+\n<strong>Output:</strong> \n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n+----------+----------+\n<strong>Explanation:</strong> \nUsers 1 and 2 are friends, and they listened to songs 10, 11, and 12 on the same day. They are similar friends.\nUsers 1 and 3 listened to songs 10, 11, and 12 on the same day, but they are not friends.\nUsers 2 and 4 are friends, but they did not listen to the same three different songs.\nUsers 2 and 5 are friends and listened to songs 10, 11, and 12, but they did not listen to them on the same day.\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 33,
        "dislikes": 5,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Leetcodify Friends Recommendations\", \"titleSlug\": \"leetcodify-friends-recommendations\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "exampleTestcases": "{\"headers\":{\"Listens\":[\"user_id\",\"song_id\",\"day\"],\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Listens\":[[1,10,\"2021-03-15\"],[1,11,\"2021-03-15\"],[1,12,\"2021-03-15\"],[2,10,\"2021-03-15\"],[2,11,\"2021-03-15\"],[2,12,\"2021-03-15\"],[3,10,\"2021-03-15\"],[3,11,\"2021-03-15\"],[3,12,\"2021-03-15\"],[4,10,\"2021-03-15\"],[4,11,\"2021-03-15\"],[4,13,\"2021-03-15\"],[5,10,\"2021-03-16\"],[5,11,\"2021-03-16\"],[5,12,\"2021-03-16\"]],\"Friendship\":[[1,2],[2,4],[2,5]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Spotify\", \"slug\": \"spotify\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"3K\", \"totalSubmission\": \"7K\", \"totalAcceptedRaw\": 3027, \"totalSubmissionRaw\": 7038, \"acRate\": \"43.0%\"}",
        "hints": [],
        "solution": null,
        "status": null,
        "sampleTestCase": "{\"headers\":{\"Listens\":[\"user_id\",\"song_id\",\"day\"],\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Listens\":[[1,10,\"2021-03-15\"],[1,11,\"2021-03-15\"],[1,12,\"2021-03-15\"],[2,10,\"2021-03-15\"],[2,11,\"2021-03-15\"],[2,12,\"2021-03-15\"],[3,10,\"2021-03-15\"],[3,11,\"2021-03-15\"],[3,12,\"2021-03-15\"],[4,10,\"2021-03-15\"],[4,11,\"2021-03-15\"],[4,13,\"2021-03-15\"],[5,10,\"2021-03-16\"],[5,11,\"2021-03-16\"],[5,12,\"2021-03-16\"]],\"Friendship\":[[1,2],[2,4],[2,5]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Listens (user_id int, song_id int, day date)\",\n    \"Create table If Not Exists Friendship (user1_id int, user2_id int)\"\n  ],\n  \"mssql\": [\n    \"Create table Listens (user_id int, song_id int, day date)\",\n    \"Create table Friendship (user1_id int, user2_id int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Listens (user_id int, song_id int, day date)\",\n    \"Create table Friendship (user1_id int, user2_id int)\",\n    \"ALTER SESSION SET nls_date_format='YYYY-MM-DD'\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Listens (user_id int, song_id int, day date)",
            "Create table If Not Exists Friendship (user1_id int, user2_id int)",
            "Truncate table Listens",
            "insert into Listens (user_id, song_id, day) values ('1', '10', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('1', '11', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('1', '12', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('2', '10', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('2', '11', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('2', '12', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('3', '10', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('3', '11', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('3', '12', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('4', '10', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('4', '11', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('4', '13', '2021-03-15')",
            "insert into Listens (user_id, song_id, day) values ('5', '10', '2021-03-16')",
            "insert into Listens (user_id, song_id, day) values ('5', '11', '2021-03-16')",
            "insert into Listens (user_id, song_id, day) values ('5', '12', '2021-03-16')",
            "Truncate table Friendship",
            "insert into Friendship (user1_id, user2_id) values ('1', '2')",
            "insert into Friendship (user1_id, user2_id) values ('2', '4')",
            "insert into Friendship (user1_id, user2_id) values ('2', '5')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": null,
    "questionCode": "leetcodify-similar-friends",
    "playgroundData": null
}