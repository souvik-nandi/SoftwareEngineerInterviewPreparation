{
    "id": "612",
    "question": {
        "questionId": "612",
        "questionFrontendId": "612",
        "boundTopicId": null,
        "title": "Shortest Distance in a Plane",
        "titleSlug": "shortest-distance-in-a-plane",
        "content": "<p>Table: <code>Point2D</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| x           | int  |\n| y           | int  |\n+-------------+------+\n(x, y) is the primary key column for this table.\nEach row of this table indicates the position of a point on the X-Y plane.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>The distance between two points <code>p<sub>1</sub>(x<sub>1</sub>, y<sub>1</sub>)</code> and <code>p<sub>2</sub>(x<sub>2</sub>, y<sub>2</sub>)</code> is <code>sqrt((x<sub>2</sub> - x<sub>1</sub>)<sup>2</sup> + (y<sub>2</sub> - y<sub>1</sub>)<sup>2</sup>)</code>.</p>\n\n<p>Write an SQL query to report the shortest distance between any two points from the <code>Point2D</code> table. Round the distance to <strong>two decimal points</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nPoint2D table:\n+----+----+\n| x  | y  |\n+----+----+\n| -1 | -1 |\n| 0  | 0  |\n| -1 | -2 |\n+----+----+\n<strong>Output:</strong> \n+----------+\n| shortest |\n+----------+\n| 1.00     |\n+----------+\n<strong>Explanation:</strong> The shortest distance is 1.00 from point (-1, -1) to (-1, 2).\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 174,
        "dislikes": 64,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "{\"headers\":{\"Point2D\":[\"x\",\"y\"]},\"rows\":{\"Point2D\":[[-1,-1],[0,0],[-1,-2]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"31.7K\", \"totalSubmission\": \"50.3K\", \"totalAcceptedRaw\": 31738, \"totalSubmissionRaw\": 50261, \"acRate\": \"63.1%\"}",
        "hints": [],
        "solution": {
            "id": "178",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "{\"headers\":{\"Point2D\":[\"x\",\"y\"]},\"rows\":{\"Point2D\":[[-1,-1],[0,0],[-1,-2]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create Table If Not Exists Point2D (x int not null, y int not null)\"\n  ],\n  \"mssql\": [\n    \"Create Table Point2D (x int not null, y int not null)\"\n  ],\n  \"oraclesql\": [\n    \"Create Table Point2D (x int not null, y int not null)\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create Table If Not Exists Point2D (x int not null, y int not null)",
            "Truncate table Point2D",
            "insert into Point2D (x, y) values ('-1', '-1')",
            "insert into Point2D (x, y) values ('0', '0')",
            "insert into Point2D (x, y) values ('-1', '-2')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "178",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Using `SQRT`, `POW()` functions and math knowledge [Accepted]\n\n**Intuition**\n\nCalculate the distances between each two points and then display the smallest one.\n\n**Algorithm**\n\nThe [euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) between two points P1(x1,y1) and P2(x2, y2) in two dimensions is defined as $$\\sqrt{(x1-x2)^2+(y1-y2)^2}$$. So in order to get the distances, we can join this table with itself, and then utilize the built-in function `POW()` and `SQRT()` like below.\n\n```sql\nSELECT\n    p1.x,\n    p1.y,\n    p2.x,\n    p2.y,\n    SQRT((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2))) AS distance\nFROM\n    point_2d p1\n        JOIN\n    point_2d p2 ON p1.x != p2.x OR p1.y != p2.y\n;\n```\n\n>Note:\n> - The condition 'p1.x != p2.x OR p2.y != p2.y' is to avoid calculating the distance of a point with itself.\n> Otherwise, the minimum distance will be always zero.\n> - The columns p1.x, p1.y, p2.x and p2.y are for demonstrating. They are not necessary for the final solution.\n\nSo the output would be as below after running this code on the sample data.\n```\n| x  | y  | x  | y  | distance           |\n|----|----|----|----|--------------------|\n| 0  | 0  | -1 | -1 | 1.4142135623730951 |\n| -1 | -2 | -1 | -1 | 1                  |\n| -1 | -1 | 0  | 0  | 1.4142135623730951 |\n| -1 | -2 | 0  | 0  | 2.23606797749979   |\n| -1 | -1 | -1 | -2 | 1                  |\n| 0  | 0  | -1 | -2 | 2.23606797749979   |\n```\n\nAt last, choose the minimum distance and round it to 2 decimals as required.\n\n**MySQL**\n\n```sql\nSELECT\n    ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))), 2) AS shortest\nFROM\n    point_2d p1\n        JOIN\n    point_2d p2 ON p1.x != p2.x OR p1.y != p2.y\n;\n```\n>Note: To put the MIN() inside of SQRT() will slightly improve the performance.\n\n#### Approach 2: Optimize to avoid reduplicate calculations [Accepted]\n\n**Intuition**\n\nIt is unnecessary to calculate the distance between all points to all other points since some of them may already be done.\nSo how to avoid the reduplicate calculations?\n\n**Algorithm**\n\nWhen join the table with itself, we can claim to only calculate the distance between one point to another point in a certain rule such ponts with bigger x value.\nBy following this rule, we can avoid quite a lot of reduplicate calculations.\n\n```sql\nSELECT\n    t1.x,\n    t1.y,\n    t2.x,\n    t2.y,\n    SQRT((POW(t1.x - t2.x, 2) + POW(t1.y - t2.y, 2))) AS distance\nFROM\n    point_2d t1\n        JOIN\n    point_2d t2 ON (t1.x <= t2.x AND t1.y < t2.y)\n        OR (t1.x <= t2.x AND t1.y > t2.y)\n        OR (t1.x < t2.x AND t1.y = t2.y)\n;\n```\n\nThe output is as below for the sample data. You may notice that there are only 4 records, 1/3 less than the previous solution.\n\n```\n| x  | y  | x  | y  | distance           |\n|----|----|----|----|--------------------|\n| -1 | -2 | -1 | -1 | 1                  |\n| -1 | -1 | 0  | 0  | 1.4142135623730951 |\n| -1 | -2 | 0  | 0  | 2.23606797749979   |\n| -1 | -1 | -1 | -2 | 1                  |\n```\n\n>Note:\nThe best case is to compare n*(n-1)/2 times, but practically it is not always true considering two points may have same x value or y value.\nIn this case, you may notice the distance between (-1, -2) and (-1, -1) appearing twice in the first and last line in the output.\n\nHere comes the solution to select the shortest distance and round to two decimals.\n\n**MySQL**\n\n```sql\nSELECT\n    ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))),2) AS shortest\nFROM\n    point_2d p1\n        JOIN\n    point_2d p2 ON (p1.x <= p2.x AND p1.y < p2.y)\n        OR (p1.x <= p2.x AND p1.y > p2.y)\n        OR (p1.x < p2.x AND p1.y = p2.y)\n;\n```",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "173",
            "count": 12,
            "average": "4.667",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "shortest-distance-in-a-plane",
    "playgroundData": {}
}