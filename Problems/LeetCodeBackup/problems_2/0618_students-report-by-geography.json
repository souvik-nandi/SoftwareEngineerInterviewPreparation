{
    "id": "618",
    "question": {
        "questionId": "618",
        "questionFrontendId": "618",
        "boundTopicId": null,
        "title": "Students Report By Geography",
        "titleSlug": "students-report-by-geography",
        "content": "<p>Table: <code>Student</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| name        | varchar |\n| continent   | varchar |\n+-------------+---------+\nThere is no primary key for this table. It may contain duplicate rows.\nEach row of this table indicates the name of a student and the continent they came from.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A school has students from Asia, Europe, and America.</p>\n\n<p>Write an SQL query to <a href=\"https://en.wikipedia.org/wiki/Pivot_table\" target=\"_blank\">pivot</a> the continent column in the <code>Student</code> table so that each name is <strong>sorted alphabetically</strong> and displayed underneath its corresponding continent. The output headers should be <code>America</code>, <code>Asia</code>, and <code>Europe</code>, respectively.</p>\n\n<p>The test cases are generated so that the student number from America is not less than either Asia or Europe.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nStudent table:\n+--------+-----------+\n| name   | continent |\n+--------+-----------+\n| Jane   | America   |\n| Pascal | Europe    |\n| Xi     | Asia      |\n| Jack   | America   |\n+--------+-----------+\n<strong>Output:</strong> \n+---------+------+--------+\n| America | Asia | Europe |\n+---------+------+--------+\n| Jack    | Xi   | Pascal |\n| Jane    | null | null   |\n+---------+------+--------+\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If it is unknown which continent has the most students, could you write a query to generate the student report?</p>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 128,
        "dislikes": 142,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "{\"headers\":{\"Student\":[\"name\",\"continent\"]},\"rows\":{\"Student\":[[\"Jane\",\"America\"],[\"Pascal\",\"Europe\"],[\"Xi\",\"Asia\"],[\"Jack\",\"America\"]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"17.5K\", \"totalSubmission\": \"27.4K\", \"totalAcceptedRaw\": 17469, \"totalSubmissionRaw\": 27427, \"acRate\": \"63.7%\"}",
        "hints": [],
        "solution": {
            "id": "175",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "{\"headers\":{\"Student\":[\"name\",\"continent\"]},\"rows\":{\"Student\":[[\"Jane\",\"America\"],[\"Pascal\",\"Europe\"],[\"Xi\",\"Asia\"],[\"Jack\",\"America\"]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Student (name varchar(50), continent varchar(7))\"\n  ],\n  \"mssql\": [\n    \"Create table Student (name varchar(50), continent varchar(7))\"\n  ],\n  \"oraclesql\": [\n    \"Create table Student (name varchar(50), continent varchar(7))\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Student (name varchar(50), continent varchar(7))",
            "Truncate table Student",
            "insert into Student (name, continent) values ('Jane', 'America')",
            "insert into Student (name, continent) values ('Pascal', 'Europe')",
            "insert into Student (name, continent) values ('Xi', 'Asia')",
            "insert into Student (name, continent) values ('Jack', 'America')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "175",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using \"session variables\" and `join` [Accepted]\n\n**Intuition**\n\nAssign a separate auto increment row id to each of the continent, and then join them together.\n\n**Algorithm**\n\nTo set the row id for each continent, we need to use session variables.\nFor example, we can use the following statement to assign a auto increment row number for students in America.\n\n```sql\nSELECT \n    row_id, America\nFROM\n    (SELECT @am:=0) t,\n    (SELECT \n        @am:=@am + 1 AS row_id, name AS America\n    FROM\n        student\n    WHERE\n        continent = 'America'\n    ORDER BY America) AS t2\n;\n```\n\n    | row_id | America |\n    |--------|---------|\n    | 1      | Jack    |\n    | 2      | Jane    |\n\nSimilarly, we can assign other dedicated row id for other continents as the following result.\n\n    | row_id | Asia |\n    |--------|------|\n    | 1      | Xi   |\n\n    | row_id | Europe |\n    |--------|--------|\n    | 1      | Jesper |\n\n\nThen if we join these 3 temp tables together and using the same row_id as the condition, we can have the following table.\n\n    | row_id | America | Asia | Europe |\n    |--------|---------|------|--------|\n    | 1      | Jack    | Xi   | Pascal |\n    | 2      | Jane    |      |        |\n\nOne issue you may encounter is the student list for America is not complete if you use regular inner join since there are more records in this list comparing with the other two. So you may have a solution to use the `outer join`. Correct! But how to arrange the 3 tables? The trick is to put the America list in the middle so that we can use `right (outer) join` and `right (outer) join` to connect with other two tables.\n\n**MySQL**\n\n```sql\nSELECT \n    America, Asia, Europe\nFROM\n    (SELECT @as:=0, @am:=0, @eu:=0) t,\n    (SELECT \n        @as:=@as + 1 AS asid, name AS Asia\n    FROM\n        student\n    WHERE\n        continent = 'Asia'\n    ORDER BY Asia) AS t1\n        RIGHT JOIN\n    (SELECT \n        @am:=@am + 1 AS amid, name AS America\n    FROM\n        student\n    WHERE\n        continent = 'America'\n    ORDER BY America) AS t2 ON asid = amid\n        LEFT JOIN\n    (SELECT \n        @eu:=@eu + 1 AS euid, name AS Europe\n    FROM\n        student\n    WHERE\n        continent = 'Europe'\n    ORDER BY Europe) AS t3 ON amid = euid\n;\n```",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "170",
            "count": 17,
            "average": "4.294",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "students-report-by-geography",
    "playgroundData": {}
}