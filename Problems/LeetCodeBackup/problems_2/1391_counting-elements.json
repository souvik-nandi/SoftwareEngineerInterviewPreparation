{
    "id": "1391",
    "question": {
        "questionId": "1391",
        "questionFrontendId": "1426",
        "boundTopicId": null,
        "title": "Counting Elements",
        "titleSlug": "counting-elements",
        "content": "<p>Given an integer array <code>arr</code>, count how many elements <code>x</code> there are, such that <code>x + 1</code> is also in <code>arr</code>. If there are duplicates in <code>arr</code>, count them separately.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1 and 2 are counted cause 2 and 3 are in arr.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,1,3,3,5,5,7,7]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No numbers are counted, cause there is no 2, 4, 6, or 8 in arr.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= arr[i] &lt;= 1000</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 86,
        "dislikes": 20,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "[1,2,3]\n[1,1,3,3,5,5,7,7]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"DRW\", \"slug\": \"drw\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int countElements(vector<int>& arr) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int countElements(int[] arr) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def countElements(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def countElements(self, arr: List[int]) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint countElements(int* arr, int arrSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int CountElements(int[] arr) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar countElements = function(arr) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef count_elements(arr)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func countElements(_ arr: [Int]) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func countElements(arr []int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def countElements(arr: Array[Int]): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun countElements(arr: IntArray): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn count_elements(arr: Vec<i32>) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function countElements($arr) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function countElements(arr: number[]): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (count-elements arr)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec count_elements(Arr :: [integer()]) -> integer().\ncount_elements(Arr) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec count_elements(arr :: [integer]) :: integer\n  def count_elements(arr) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"90.2K\", \"totalSubmission\": \"151.6K\", \"totalAcceptedRaw\": 90228, \"totalSubmissionRaw\": 151637, \"acRate\": \"59.5%\"}",
        "hints": [
            "Use hashset to store all elements.",
            "Loop again to count all valid elements."
        ],
        "solution": {
            "id": "925",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[1,2,3]",
        "metaData": "{\n  \"name\": \"countElements\",\n  \"params\": [\n    {\n      \"name\": \"arr\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "925",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Search with Array\n\n**Intuition**\n\nThe simplest way of solving this problem is to loop through each integer, `x`, checking whether or not it should be counted. This requires checking whether or not `x + 1` is in `arr`.\n\n```text\ndefine function count_elements(arr):\n    count = 0\n    for each x in arr:\n        if integer_in_array(arr, x + 1):\n            count = count + 1\n    return count\n```\n\nTo implement the `integer_in_array` function in the above algorithm, we can use **linear search**. To do a linear search, we need to loop through each integer of `arr`. If we find the integer that we're looking for, then return `true`. If we get to the end of `arr`, then we know the integer is not there, and so should return `false`.\n\n```\ndefine function integer_in_array(arr, target):\n    for each x in arr:\n        if target is equal to x:\n            return true\n    return false\n```\n\nMany programming languages have a built in function for checking whether or not an integer is in `arr`, e.g. Python.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/m4jbby7y/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"m4jbby7y\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input array, `arr`.\n\n- Time complexity : $$O(N^2)$$.\n\n    We loop through each of the $$N$$ integers `x`, checking whether or not `x + 1` is also in `arr`. Checking whether or not `x + 1` is in `arr` is done using linear search, which requires checking through all $$N$$ integers in `arr`. Because we're doing $$N$$ operations $$N$$ times, we get a time complexity of $$O(N^2)$$.\n\n- Space complexity : $$O(1)$$.\n\n    We are only using a constant number of single-value variables (e.g. `count`), giving us a space complexity of $$O(1)$$.\n\n<br/>\n\n---\n\n#### Approach 2: Search with HashSet\n\n**Intuition**\n\nIf you're not familiar with the `HashSet` data structure, check out our [Hash Tables Explore Card](https://leetcode.com/explore/learn/card/hash-table/) to get up to speed.\n\nThe above algorithm will work fine for the maximum array length we're given here. However, we can do a lot better than $$O(N^2)$$, and an interviewer will no doubt expect you to come up with a better way.\n\nThe reason why the algorithm above was so inefficient is because we're performing $$N$$ linear searches, each with a cost of $$O(N)$$. When we have an algorithm that is performing many linear searches to check for item existence, we should instead be looking to change the way the data is stored so that the time complexity of doing each search is less.\n\nRecall that looking up items in a `HashSet` has a cost of $$O(1)$$. Creating a `HashSet` from an array of $$N$$ items has a cost of $$O(N)$$. We only need to create the `HashSet` *once*. After that, we can then replace all $$O(N)$$ linear searches with $$O(1)$$ `HashSet` lookups.\n\nBefore we go any further, here is an algorithm that is *incorrect*. Try to spot what the problem is; we'll discuss it just below.\n\n```text\ndefine function count_elements(arr):\n    hash_set = a new HashSet\n    add all integers of arr to hash_set\n    count = 0\n    for each x in hash_set:\n        if hash_set contains x + 1:\n            count = count + 1\n    return count\n```\n\nDid you spot the bug? If there were duplicates in `arr`, then the `count` returned will be too low! \n\nRecall that a `HashSet` removes duplicates. Consider a case like `arr = [1, 1, 2]`. The `HashSet` will be `{1, 2}`. Therefore, the above code will loop over each integer in the `HashSet`, which is only *one* copy of `1`. Yet `arr` had *two* copies of `1`. \n\nTo fix it, we need to loop over `arr`, but do the existence checks using the `HashSet`.\n\n```text\ndefine function count_elements(arr):\n    hash_set = a new HashSet\n    add all integers of arr to hash_set\n    count = 0\n    for each x in arr:\n        if hash_set contains x + 1:\n            count = count + 1\n    return count\n```\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/ksH3u6gu/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"ksH3u6gu\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input array, `arr`.\n\n- Time complexity : $$O(N)$$.\n\n    Creating a `HashSet` from $$N$$ integers takes $$O(N)$$ time. We then need to loop over each of the $$N$$ integers like before, except this time we check for `x + 1` by seeing if it is in the `HashSet`; an $$O(1)$$ operation. This gives us a total time complexity of $$O(N) + N \\cdot O(1) = O(N) + O(N) = O(N)$$.\n\n- Space complexity : $$O(N)$$.\n\n    The `HashSet` needs to store each unique integer from `arr`. In the worst case, all the integers in `arr` will be unique, meaning that the `HashSet` has a space complexity of $$O(N)$$.\n\nIt's interesting to note that $$O(N)$$ is an *upper bound* on the space complexity. If $$U$$ is the number of unique integers in `arr`, then the space complexity could more accurately be represented as $$O(U)$$.\n\n<br/>\n\n---\n\n#### Approach 3: Search with Sorted Array\n\n**Intuition**\n\nAnother way of changing the data storage to allow for more efficient searching is to sort it. Sorting has a time complexity of $$O(N \\, \\log \\, N)$$, and searching for integers in a sorted array, using binary search, has a cost of $$O(\\log \\, N)$$. This will give us a total time complexity of $$O(N \\, \\log \\, N)$$.\n\n```text\ndefine function countElements(arr):\n    sort arr\n    count = 0\n    for each x in arr:\n        binary search for x + 1 in arr\n        if x + 1 is in arr:\n            count = count + 1\n    return count\n```\n\nThe main challenge of this approach would be needing to implement your own binary search.\n\nHowever, we don't actually need to use binary search! If we iterate over the sorted `arr`, then we know that if `x + 1` exists, it will be after all the copies of `x`. \n\n![Searching for x + 1 in sorted arr.](../Figures/10003/sorting.png)\n\nEach copy of `x` should be counted if at least one copy of `x + 1` exists. Therefore, we can iterate down the sorted `arr`, keeping track of how many times the current `x` has appeared. When we get to a different integer, we can check if it's `x + 1`, and if it is, then the number of `x` we saw should be added to `count`.\n\n```text\ndefine function countElements(arr):\n    sort arr\n    count = 0\n    run_length = 1\n    for each i in range 1 to arr.length - 1:\n        if arr[i - 1] is not equal to arr[i]:\n            if arr[i - 1] + 1 is equal to arr[i]:\n                count = count + run_length\n            run_length = 0\n        run_length = run_length + 1\n    return count\n```\n\nHere is an animation of this approach.\n\n!?!../Documents/10003_sorting_approach.json:960,183!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/8shUpyzg/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"8shUpyzg\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(N \\, \\log \\, N)$$.\n\n    Sorting using a built-in sorting algorithm has a cost of $$O(N \\, \\log \\, N)$$. After that, we do a single pass through `arr`, which has a cost of $$O(N)$$, giving us a total time complexity of $$O(N \\, \\log \\, N) + O(N) = O(N \\, \\log \\, N)$$.\n\n- Space complexity : varies from $$O(N)$$ to $$O(1)$$.\n\n    The space complexity of this approach is dependent on the space complexity of the sorting algorithm you're using. The space complexity of sorting algorithms built into programming languages is generally anywhere from $$O(N)$$ to $$O(1)$$.\n\n    Notice that you could implement your own $$O(N \\, \\log \\, N)$$ time complexity, $$O(1)$$ space complexity, sorting algorithm if needed. In practice, $$O(N \\, \\log \\, N)$$ is not much worse than $$O(N)$$, and so this approach provides an interesting contrast to Approach 2 (which had a space complexity of $$O(N)$$).\n\n<br/>",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "873",
            "count": 13,
            "average": "4.923",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "counting-elements",
    "playgroundData": {
        "m4jbby7y": {
            "playground": {
                "testcaseInput": "",
                "name": "counting-elements-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "ksH3u6gu": {
            "playground": {
                "testcaseInput": "",
                "name": "counting-elements-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "8shUpyzg": {
            "playground": {
                "testcaseInput": "",
                "name": "counting-elements-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}