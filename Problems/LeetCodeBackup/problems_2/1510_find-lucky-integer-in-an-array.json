{
    "id": "1510",
    "question": {
        "questionId": "1510",
        "questionFrontendId": "1394",
        "boundTopicId": null,
        "title": "Find Lucky Integer in an Array",
        "titleSlug": "find-lucky-integer-in-an-array",
        "content": "<p>Given an array of integers <code>arr</code>, a <strong>lucky integer</strong> is an integer that has a frequency in the array equal to its value.</p>\n\n<p>Return <em>the largest <strong>lucky integer</strong> in the array</em>. If there is no <strong>lucky integer</strong> return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,2,3,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The only lucky number in the array is 2 because frequency[2] == 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,2,3,3,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 1, 2 and 3 are all lucky numbers, return the largest of them.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,2,2,3,3]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no lucky numbers in the array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 500</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 683,
        "dislikes": 20,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "[2,2,3,4]\n[1,2,2,3,3,3]\n[2,2,2,3,3]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Counting",
                "slug": "counting",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int findLucky(vector<int>& arr) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int findLucky(int[] arr) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def findLucky(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def findLucky(self, arr: List[int]) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint findLucky(int* arr, int arrSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int FindLucky(int[] arr) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar findLucky = function(arr) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} arr\n# @return {Integer}\ndef find_lucky(arr)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func findLucky(_ arr: [Int]) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func findLucky(arr []int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def findLucky(arr: Array[Int]): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun findLucky(arr: IntArray): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn find_lucky(arr: Vec<i32>) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function findLucky($arr) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function findLucky(arr: number[]): number {\n\n};",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"73.3K\", \"totalSubmission\": \"115.2K\", \"totalAcceptedRaw\": 73294, \"totalSubmissionRaw\": 115177, \"acRate\": \"63.6%\"}",
        "hints": [
            "Count the frequency of each integer in the array.",
            "Get all lucky numbers and return the largest of them."
        ],
        "solution": {
            "id": "922",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[2,2,3,4]",
        "metaData": "{\n  \"name\": \"findLucky\",\n  \"params\": [\n    {\n      \"name\": \"arr\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "922",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nThe simplest approach is to iterate through each number in the input array. Then for each number, iterate over the array again to count how many times that number occurs to determine whether or not it's a *lucky number*. We'll also need to keep track of the largest *lucky number* we've seen so far.\n\n```text\ndefine function find_lucky(arr):\n    largest_lucky_number = -1\n    for each num in arr:\n        occurances_of_num = count_occurances(arr, num)\n        if occurances_of_num equal to num AND num is larger than largest_lucky_number:\n            largest_lucky_number = num\n    return largest_lucky_number\n\ndefine function count_occurances(arr, candidate_num):\n    count = 0\n    for each num in arr:\n        if num equal to candidate_num:\n            count = count + 1\n    return count\n```\n\nMany programming languages have a built-in function that we can use instead of the `count_occurances(...)` function we've defined here. However, keep in mind that this operation will always be $$O(n)$$, regardless of whether you implemented it yourself or used a built-in function.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/9uxtaDGw/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"9uxtaDGw\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$n$$ be the the length of the input array.\n\n- Time complexity : $$O(n^2)$$.\n\n    For each of the $$n$$ numbers in the input array, we're counting how many times that number appears in the array. The count operation is $$O(n)$$, and so we get $$n \\cdot O(n) = O(n^2)$$.\n\n- Space complexity : $$O(1)$$.\n\n    This approach only uses a constant number of variables to keep track of where we're up to. Therefore, it has a $$O(1)$$ space complexity.\n\n<br/>\n\n---\n\n#### Approach 2: Sorting\n\n**Intuition**\n\nThe crux of this problem is counting how many times each number occurs, so that we can then determine whether or not a particular number is lucky. It would be easier to do this if the array was sorted. So, how about we just sort the array and then go from there?\n\nFor example, if the input array was as follows:\n\n```py\n[2, 7, 8, 2, 1, 2, 3, 4, 5, 2, 2, 3, 4, 4, 7, 4, 3, 7, 8, 7, 7, 7]\n```\n\nAfter sorting, we would have the following:\n\n```py\n[1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 7, 7, 7, 7, 7, 7, 8, 8]\n```\n\nFrom here, we can now search for the largest lucky number in a single pass of the array. We need to step through the array, keeping track of the length of the current streak. Once we're on the last number of the current streak, we should check whether or not that number is lucky.\n\nTo avoid needing to keep track of the largest lucky number seen, we should work from right-to-left (largest to smallest), as then when we encounter a lucky number, we know it's the largest that could possibly be in the array. Even better, we could reverse-sort instead of forward-sort. The best option will depend on which programming language you're using.\n\n```text\ndefine function findLucky(arr):\n    sort arr from largest to smallest\n    current_streak = 0\n    for each num in arr:\n        current_streak = current_streak + 1\n        if the next number in arr is different from num:\n            if num equal to current_streak:\n                return num\n            current_streak = 0\n    return -1\n```\n\nIn practice, this approach will perform well, especially for a short input array length.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/p5UJndXn/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"p5UJndXn\"></iframe>\n\nFor those who are familiar with the `Heap` data-structure, there is a neat variant of this approach that will have the same time complexity, but a $$O(1)$$ space complexity. Here is that approach in Python. This could be done in other languages, but you'd need to confirm the \"heapify\" functionality really is $$O(1)$$ space, or implement heapify yourself.\n\n<iframe src=\"https://leetcode.com/playground/kt2gWyCM/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"kt2gWyCM\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(n \\, \\log \\, n)$$.\n\n    This approach was split into 2 parts; sorting the array, and then searching for the largest lucky number in the sorted array.\n\n    Sorting an array using a built-in sorting algorithm requires $$O(n \\, \\log \\, n)$$ time. \n\n    Searching for the largest lucky number in the sorted array requires stepping through each of the $$n$$ elements in the array. Therefore, the cost of this part is $$O(n)$$.\n    \n    In big-oh notation, we drop insignificant added parts from the time complexity. Seeing as we know $$O(n \\, \\log \\, n)$$ will always be larger than $$O(n)$$, we get a final time complexity of $$O(n + n \\, \\log \\, n) = O(n \\, \\log \\, n)$$. \n\n- Space complexity : Varies from $$O(n)$$ to $$O(1)$$, depending on sorting implementation.\n\n    Most programming languages use a built-in sorting algorithm that requires $$O(n)$$ auxillary space. A few are $$O(\\log \\, n)$$ or even $$O(1)$$, but these seem to be the minority from what I've read.\n\n    Searching for the largest lucky number in the sorted array requires only $$O(1)$$ additional space, and so can be ignored.\n\n    The `Heap` variant of this approach has an $$O(1)$$ space complexity. Heapify requires only $$O(1)$$ extra space, as does removing and processing items from the heap.\n\n<br/>\n\n---\n\n#### Approach 3: Counter\n\n**Intuition**\n\nIf you were finding the largest lucky number of an array by hand, you would probably just make a tally chart.\n\n![Table of sample check in times and stations](../Figures/1394/tally_chart.png)\n\nWe can do this in code, using a `HashMap` where the keys are the unique integers in the array, and the values are how many times each appeared. This is a very common usage for a `HashMap` in the programming interview world. Some programming languages have a special `HashMap` data structure specifically for this purpose, although Java does not. In the languages that have it, it might be called a `Counter`, `Bag`, or `MultiSet`.\n\nHere is some pseudocode for making the `HashMap` of `counts.`\n\n```text\ncounts = a new HashMap (number -> count)\nfor each num in arr:\n    if num is not in counts:\n        counts.put(num, 1)\n    else:\n        counts.put(num, counts.get(num) + 1)\n```\n\nThis code can be written more concisely in Java, using the `getOrDefault(...)` method of `Map`. See the Algorithm section for details on how this works (and see how awesome it is!).\n\nThe rest of the code is straightforward; we simply need to check each key/ value entry in `counts`, and if they are equal, then we know that we've found a lucky number. We don't know whether or not it's the largest one though, because `HashMap` keys are *not sorted*. Therefore, we'll need to use the pattern we used in Approach 1 of keeping track of the largest we've seen so far, until we get to the end.\n\n```text\nlargest_lucky_number = -1\nfor each number, count in counts.entries():\n    if number equal to count AND number is larger than largest_lucky_number:\n        largest_lucky_number = number\nreturn largest_lucky_number\n```\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/LwMgUV5y/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"LwMgUV5y\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(n)$$.\n\n    There are two steps to this approach; building a `HashMap` of counts, and looking through the `HashMap` for the largest lucky number. \n\n    Inserting an item into a `HashMap` has a cost of $$O(1)$$. Therefore, inserting the $$n$$ items into the `HashMap` has a cost of $$n \\cdot O(1) = O(n)$$. \n\n    Iterating over all the entries in a `HashMap` has a cost of $$O(m)$$, where $$m$$ is the number of entries in the `HashMap`. In the worst case, $$m = n$$ (all numbers were unique), and therefore the cost of this is $$O(n)$$.\n\n    We get a final time complexity of $$O(n) + O(n) = O(n)$$.\n\n- Space complexity : $$O(n)$$.\n\n    In the worst case, all numbers in the `HashMap` are unique, and therefore it will take $$O(n)$$ space to store it.\n\nApproach 2 and Approach 3 are both good approaches in practice, each with its own pros and cons. \n\n<br/>",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "870",
            "count": 5,
            "average": "4.200",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "find-lucky-integer-in-an-array",
    "playgroundData": {
        "9uxtaDGw": {
            "playground": {
                "testcaseInput": "",
                "name": "find-lucky-integer-in-an-array-3",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "p5UJndXn": {
            "playground": {
                "testcaseInput": "",
                "name": "find-lucky-integer-in-an-array-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "kt2gWyCM": {
            "playground": {
                "testcaseInput": "",
                "name": "find-lucky-integer-in-an-array-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "LwMgUV5y": {
            "playground": {
                "testcaseInput": "",
                "name": "find-lucky-integer-in-an-array-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}