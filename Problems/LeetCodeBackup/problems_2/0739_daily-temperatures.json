{
    "id": "739",
    "question": {
        "questionId": "739",
        "questionFrontendId": "739",
        "boundTopicId": null,
        "title": "Daily Temperatures",
        "titleSlug": "daily-temperatures",
        "content": "<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> temperatures = [73,74,75,71,69,72,76,73]\n<strong>Output:</strong> [1,1,4,2,1,1,0,0]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,40,50,60]\n<strong>Output:</strong> [1,1,1,0]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,60,90]\n<strong>Output:</strong> [1,1,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>30 &lt;=&nbsp;temperatures[i] &lt;= 100</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7533,
        "dislikes": 166,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Next Greater Element I\", \"titleSlug\": \"next-greater-element-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}, {\"title\": \"Online Stock Span\", \"titleSlug\": \"online-stock-span\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[73,74,75,71,69,72,76,73]\n[30,40,50,60]\n[30,60,90]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Stack",
                "slug": "stack",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Zillow\", \"slug\": \"zillow\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"DE Shaw\", \"slug\": \"de-shaw\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 12}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 8}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"ByteDance\", \"slug\": \"bytedance\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"C3 IoT\", \"slug\": \"c3-iot\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"tiktok\", \"slug\": \"tiktok\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Huawei\", \"slug\": \"huawei\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Cisco\", \"slug\": \"cisco\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Twitter\", \"slug\": \"twitter\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Visa\", \"slug\": \"visa\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    vector<int> dailyTemperatures(vector<int>& temperatures) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def dailyTemperatures(self, temperatures):\n        \"\"\"\n        :type temperatures: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* temperatures, int temperaturesSize, int* returnSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int[] DailyTemperatures(int[] temperatures) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} temperatures\n * @return {number[]}\n */\nvar dailyTemperatures = function(temperatures) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} temperatures\n# @return {Integer[]}\ndef daily_temperatures(temperatures)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func dailyTemperatures(_ temperatures: [Int]) -> [Int] {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func dailyTemperatures(temperatures []int) []int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def dailyTemperatures(temperatures: Array[Int]): Array[Int] = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun dailyTemperatures(temperatures: IntArray): IntArray {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn daily_temperatures(temperatures: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $temperatures\n     * @return Integer[]\n     */\n    function dailyTemperatures($temperatures) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function dailyTemperatures(temperatures: number[]): number[] {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (daily-temperatures temperatures)\n  (-> (listof exact-integer?) (listof exact-integer?))\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec daily_temperatures(Temperatures :: [integer()]) -> [integer()].\ndaily_temperatures(Temperatures) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec daily_temperatures(temperatures :: [integer]) :: [integer]\n  def daily_temperatures(temperatures) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"423.5K\", \"totalSubmission\": \"627.3K\", \"totalAcceptedRaw\": 423499, \"totalSubmissionRaw\": 627329, \"acRate\": \"67.5%\"}",
        "hints": [
            "If the temperature is say, 70 today, then in the future a warmer temperature must be either 71, 72, 73, ..., 99, or 100.  We could remember when all of them occur next."
        ],
        "solution": {
            "id": "1206",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[73,74,75,71,69,72,76,73]",
        "metaData": "{\n  \"name\": \"dailyTemperatures\",\n  \"params\": [\n    {\n      \"name\": \"temperatures\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1206",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nIn this problem, we are given a list of temperatures where the temperature at index $$i$$ represents the temperature of the $$i^{th}$$ day. Our goal is to, for each day, find the number of days until the next day that is warmer than the current day.  Often, the best place to start solving a problem is by considering a brute-force approach. The naive/brute-force way to solve this problem is to iterate through the array, and for each day, iterate through all of the remaining days until you find a warmer temperature. This approach would have a time complexity of $$O(N^2)$$, which is very slow given the constraints $$N < 10^5$$. What makes brute-force so inefficient?\n\n<iframe src=\"https://leetcode.com/playground/iTx4o3gU/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"iTx4o3gU\"></iframe>\n\nImagine if you had multiple days in a row with a decreasing temperature, and then one very hot day - `[40, 39, 38, 37, 36, 35, 34, 65]`. The final day is the \"answer\" day for all the other days. Why? Because all the other days are in descending order (and cooler than the last day). If we make use of the fact that temperatures in descending order can share the same \"answer\" day, we can improve the time complexity.\n\nIn the above example, we can \"delay\" finding the answer for the first 7 days, and upon finding a warmer temperature `65`, we can move backward to find the answer for all 7 days at the same time. This process of storing elements and then walking back through them matches the behavior of a stack.\n\n#### Approach 1: Monotonic Stack\n\n**Intuition**\n\nLet's look at a data structure known as a [Monotonic Stack](https://leetcode.com/tag/monotonic-stack/). A monotonic stack is simply a stack where the elements are always in sorted order. How does this help us? We can use a monotonic decreasing stack to hold temperatures. Monotonic **decreasing** means that the stack will always be sorted in descending order. Because the problem is asking for the **number** of days, instead of storing the temperatures themselves, we should store the indices of the days, and use `temperatures[i]` to find the temperature of the $$i^{th}$$ day.\n\n> Monotonic stacks are a good option when a problem involves comparing the size of numeric elements, with their order being relevant.\n\nOn each day, there are two possibilities. If the current day's temperature is not warmer than the temperature on the top of the stack, we can just push the current day onto the stack - since it is not as warm (equal or smaller), this will maintain the sorted property. \n\nIf the current day's temperature is warmer than the temperature on top of the stack, this is significant. It means that the current day is the **first** day with a warmer temperature than the day associated with the temperature on top of the stack. When we find a warmer temperature, the number of days is the difference between the current index and the index on the top of the stack. We can declare an `answer` array before iterating through the input and populate `answer` as we go along.\n\nWhen we find a warmer temperature, we can't stop after checking only one element at the top. Using the example `temperatures = [75, 71, 69, 72]`, once we arrive at the last day our stack looks like `stack = [0, 1, 2]`. For clarity, here's what the stack looks like with each temperature associated with the day: `stack = [(0, 75), (1, 71), (2, 69)]`. `72` (the current temperature) is greater than `69`, but it is also greater than `71`. To make sure we don't miss any days, we should pop from the stack until the top of the stack is no longer colder than the current temperature. Once that is the case, we can push the current day onto the stack.\n\n**Algorithm**\n\n1. Initialize an array `answer` with the same length as `temperatures` and all values initially set to `0`. Also, initialize a stack as an empty array.\n\n2. Iterate through `temperatures`. At each index `currDay`:\n    - If the stack is not empty, that means there are previous days for which we have not yet seen a warmer day. While the current temperature is warmer than the temperature of `prevDay` (the index of the day at the top of the stack):\n        - Set `answer[prevDay]` equal to the number of days that have passed between `prevDay` and the current day, that is, `answer[prevDay] = currDay - prevDay`.\n    - Push the current index `currDay` onto the stack.\n\n3. Return `answer`.\n\nHere's an example animation showing how this algorithm works. For clarity, temperatures of the days are included with the indices:\n\n!?!../Documents/739_Daily_Temperatures.json:960,540!?!\n\n<br>\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/HN7kZsXh/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"HN7kZsXh\"></iframe>\n\n\n**Complexity Analysis**\n\nGiven $$N$$ as the length of `temperatures`,\n\n* Time complexity: $$O(N)$$\n\n    At first glance, it may look like the time complexity of this algorithm should be $$O(N^2)$$, because there is a nested while loop inside the for loop. However, each element can only be added to the stack once, which means the stack is limited to $$N$$ pops. Every iteration of the while loop uses 1 pop, which means the while loop will not iterate more than $$N$$ times in total, across all iterations of the for loop. \n\n    An easier way to think about this is that in the worst case, every element will be pushed and popped once. This gives a time complexity of $$O(2 \\cdot N) = O(N)$$.\n\n* Space complexity: $$O(N)$$\n\n    If the input was non-increasing, then no element would ever be popped from the stack, and the stack would grow to a size of `N` elements at the end.\n\n    Note: `answer` does not count towards the space complexity because space used for the output format does not count.\n    \n<br/>\n\n---\n\n#### Approach 2: Array, Optimized Space\n\n**Intuition**\n\nWith the monotonic stack, we iterated forward through the array and moved backwards when we found a warmer day. In this approach, we'll do the reverse - iterate backwards through the array, and move forwards to find the number of days until a warmer day.\n\nIn the first approach, `answer` exists only to hold the answer. An important thing to notice is that `answer` carries information that we can use to solve the problem. We can save space and replace the functionality of the stack by using information from `answer`.\n\nLet's use the example test case `temperatures = [73, 74, 75, 71, 69, 72, 76, 73]`. Iterating backwards, after 5 days we have: `answer = [0, 0, 0, 2, 1, 1, 0, 0]`. \n\nThe next day to calculate is the day at index 2 with temperature `75`. How can we use `answer` to help us do this? Well, let's first check the next day - we might be lucky and it could be warmer. The next day (at index 3) has a temperature of `71`, which is not warmer. However, `answer[3]` tells us that the day at index 3 will not see a warmer temperature for `2` more days. A temperature warmer than `75` must also be warmer than `71` - so we know it is pointless to check `answer[4]`. We should check `temperatures[3 + answer[3]] = temperatures[5] = 72`, which is not warmer than `75`. Again, we know from `answer[5]` that we will not have a warmer temperature than `72` for `1` day. Therefore, the next day to check is `temperatures[5 + answer[5]] = temperatures[6] = 76`, which is warmer - we found our day.\n\nTo keep track of the number of days, we can use a variable `days` initially set to `1` and continuously add to it to query the next day. Using the above example, we would start with `currDay = 2`, and query `temperatures[currDay + days] = temperatures[2 + 1]`. After finding that it is not warmer, we will add `answer[3]` to `days`, and our next search will be at `temperatures[currDay + days] = temperatures[2 + 3]`. When we find our warmer day, we can set `answer[currDay] = days`.\n\nFrom this small example, it may seem like this algorithm isn't very efficient. However, imagine if we had something like `answer = [0, 85134, ...]` and we needed to calculate the answer for the first day (at index 0). If the second day is not warmer than the first day, then this algorithm allows us to skip over 85000 days, because we already know that none of those days could be warmer than the first day.\n\nOne last note: this process does not work for a day that does not have a warmer day in the future. Therefore, we need to use a variable `hottest` to keep track of the hottest day seen so far. If a day is warmer than `hottest`, then we know the answer for that day is `0`, and we don't need to go through the process described above.\n\n**Algorithm**\n\n1. Initialize an array `answer` with the same length as `temperatures` and all values initially set to `0`. Also, initialize an integer `hottest = 0` to track the hottest temperature seen so far.\n\n2. Iterate backwards through the input. At each index `currDay`, check if the current day is the hottest one seen so far. If it is, update `hottest` and move on. Otherwise, do the following:\n    - Initialize a variable `days = 1` because the next warmer day must be at least one day in the future.\n    - While `temperatures[currDay + days] <= temperatures[currDay]`:\n        - Add `answer[currDay + days]` to `days`. This effectively jumps directly to the next warmer day.\n    - Set `answer[currDay] = days`.\n\n3. Return `answer`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/UbwHui5X/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"UbwHui5X\"></iframe>\n\n\n**Complexity Analysis**\n\nGiven $$N$$ as the length of `temperatures`,\n\n* Time complexity: $$O(N)$$\n\n    Similar to the first approach, the nested while loop makes this algorithm look worse than $$O(N)$$. However, same as in the first approach, the total number of iterations in the while loop does not exceed $$N$$, which gives this algorithm a time complexity of $$O(2 \\cdot N) = O(N)$$.\n\n    The reason the iterations in the while loop does not exceed $$N$$ is because the \"jumps\" prevent an index from being visited twice. If we had the example `temperatures = [45, 43, 45, 43, 45, 31, 32, 33, 50]`, after 5 iterations we would have `answer = [..., 4, 1, 1, 1, 0]`. The day at index `2` will use `answer[4]` to jump to the final day (which is the next warmer day), and then `answer[4]` will not be used again. This is because at the first day, `answer[2]` will be used to jump all the way to the end. The final solution is `answer = [8,1,6,1,4,1,1,1,0]`. The `6` was found with the help of the `4` and the `8` was found with the help of the `6`.\n\n* Space complexity: $$O(1)$$\n\n    As stated above, while `answer` does use $$O(N)$$ space, the space used for the output does not count towards the space complexity. Thus, only constant extra space is used.\n\n<br/>\n\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1211",
            "count": 83,
            "average": "4.843",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "daily-temperatures",
    "playgroundData": {
        "iTx4o3gU": {
            "playground": {
                "testcaseInput": "",
                "name": "daily-temperatures-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "HN7kZsXh": {
            "playground": {
                "testcaseInput": "",
                "name": "daily-temperatures-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "UbwHui5X": {
            "playground": {
                "testcaseInput": "",
                "name": "daily-temperatures-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}