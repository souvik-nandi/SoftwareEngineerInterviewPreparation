{
    "id": "1546",
    "question": {
        "questionId": "1546",
        "questionFrontendId": "1412",
        "boundTopicId": null,
        "title": "Find the Quiet Students in All Exams",
        "titleSlug": "find-the-quiet-students-in-all-exams",
        "content": "<p>Table: <code>Student</code></p>\n\n<pre>\n+---------------------+---------+\n| Column Name         | Type    |\n+---------------------+---------+\n| student_id          | int     |\n| student_name        | varchar |\n+---------------------+---------+\nstudent_id is the primary key for this table.\nstudent_name is the name of the student.</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Exam</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| exam_id       | int     |\n| student_id    | int     |\n| score         | int     |\n+---------------+---------+\n(exam_id, student_id) is the primary key for this table.\nEach row of this table indicates that the student with student_id had a score points in the exam with id exam_id.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A <strong>quiet student</strong> is the one who took at least one exam and did not score the high or the low score.</p>\n\n<p>Write an SQL query to report the students <code>(student_id, student_name)</code> being quiet in all exams. Do not return the student who has never taken any exam.</p>\n\n<p>Return the result table <strong>ordered</strong> by <code>student_id</code>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nStudent table:\n+-------------+---------------+\n| student_id  | student_name  |\n+-------------+---------------+\n| 1           | Daniel        |\n| 2           | Jade          |\n| 3           | Stella        |\n| 4           | Jonathan      |\n| 5           | Will          |\n+-------------+---------------+\nExam table:\n+------------+--------------+-----------+\n| exam_id    | student_id   | score     |\n+------------+--------------+-----------+\n| 10         |     1        |    70     |\n| 10         |     2        |    80     |\n| 10         |     3        |    90     |\n| 20         |     1        |    80     |\n| 30         |     1        |    70     |\n| 30         |     3        |    80     |\n| 30         |     4        |    90     |\n| 40         |     1        |    60     |\n| 40         |     2        |    70     |\n| 40         |     4        |    80     |\n+------------+--------------+-----------+\n<strong>Output:</strong> \n+-------------+---------------+\n| student_id  | student_name  |\n+-------------+---------------+\n| 2           | Jade          |\n+-------------+---------------+\n<strong>Explanation:</strong> \nFor exam 1: Student 1 and 3 hold the lowest and high scores respectively.\nFor exam 2: Student 1 hold both highest and lowest score.\nFor exam 3 and 4: Studnet 1 and 4 hold the lowest and high scores respectively.\nStudent 2 and 5 have never got the highest or lowest in any of the exams.\nSince student 5 is not taking any exam, he is excluded from the result.\nSo, we only return the information of Student 2.\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 162,
        "dislikes": 11,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "{\"headers\": {\"Student\": [\"student_id\", \"student_name\"], \"Exam\": [\"exam_id\", \"student_id\", \"score\"]}, \"rows\": {\"Student\": [[1, \"Daniel\"], [2, \"Jade\"], [3, \"Stella\"], [4, \"Jonathan\"], [5, \"Will\"]], \"Exam\": [[10, 1, 70], [10, 2, 80], [10, 3, 90], [20, 1, 80], [30, 1, 70], [30, 3, 80], [30, 4, 90], [40, 1, 60], [40, 2, 70], [40, 4, 80]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"17.6K\", \"totalSubmission\": \"28K\", \"totalAcceptedRaw\": 17609, \"totalSubmissionRaw\": 27998, \"acRate\": \"62.9%\"}",
        "hints": [],
        "solution": null,
        "status": null,
        "sampleTestCase": "{\"headers\": {\"Student\": [\"student_id\", \"student_name\"], \"Exam\": [\"exam_id\", \"student_id\", \"score\"]}, \"rows\": {\"Student\": [[1, \"Daniel\"], [2, \"Jade\"], [3, \"Stella\"], [4, \"Jonathan\"], [5, \"Will\"]], \"Exam\": [[10, 1, 70], [10, 2, 80], [10, 3, 90], [20, 1, 80], [30, 1, 70], [30, 3, 80], [30, 4, 90], [40, 1, 60], [40, 2, 70], [40, 4, 80]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Student (student_id int, student_name varchar(30))\",\n    \"Create table If Not Exists Exam (exam_id int, student_id int, score int)\"\n  ],\n  \"mssql\": [\n    \"Create table Student (student_id int, student_name varchar(30))\",\n    \"Create table Exam (exam_id int, student_id int, score int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Student (student_id int, student_name varchar(30))\",\n    \"Create table Exam (exam_id int, student_id int, score int)\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Student (student_id int, student_name varchar(30))",
            "Create table If Not Exists Exam (exam_id int, student_id int, score int)",
            "Truncate table Student",
            "insert into Student (student_id, student_name) values ('1', 'Daniel')",
            "insert into Student (student_id, student_name) values ('2', 'Jade')",
            "insert into Student (student_id, student_name) values ('3', 'Stella')",
            "insert into Student (student_id, student_name) values ('4', 'Jonathan')",
            "insert into Student (student_id, student_name) values ('5', 'Will')",
            "Truncate table Exam",
            "insert into Exam (exam_id, student_id, score) values ('10', '1', '70')",
            "insert into Exam (exam_id, student_id, score) values ('10', '2', '80')",
            "insert into Exam (exam_id, student_id, score) values ('10', '3', '90')",
            "insert into Exam (exam_id, student_id, score) values ('20', '1', '80')",
            "insert into Exam (exam_id, student_id, score) values ('30', '1', '70')",
            "insert into Exam (exam_id, student_id, score) values ('30', '3', '80')",
            "insert into Exam (exam_id, student_id, score) values ('30', '4', '90')",
            "insert into Exam (exam_id, student_id, score) values ('40', '1', '60')",
            "insert into Exam (exam_id, student_id, score) values ('40', '2', '70')",
            "insert into Exam (exam_id, student_id, score) values ('40', '4', '80')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": null,
    "questionCode": "find-the-quiet-students-in-all-exams",
    "playgroundData": null
}