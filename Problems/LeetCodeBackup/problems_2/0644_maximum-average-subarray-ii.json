{
    "id": "644",
    "question": {
        "questionId": "644",
        "questionFrontendId": "644",
        "boundTopicId": null,
        "title": "Maximum Average Subarray II",
        "titleSlug": "maximum-average-subarray-ii",
        "content": "<p>You are given an integer array <code>nums</code> consisting of <code>n</code> elements, and an integer <code>k</code>.</p>\n\n<p>Find a contiguous subarray whose <strong>length is greater than or equal to</strong> <code>k</code> that has the maximum average value and return <em>this value</em>. Any answer with a calculation error less than <code>10<sup>-5</sup></code> will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,12,-5,-6,50,3], k = 4\n<strong>Output:</strong> 12.75000\n<b>Explanation:\n</b>- When the length is 4, averages are [0.5, 12.75, 10.5] and the maximum average is 12.75\n- When the length is 5, averages are [10.4, 10.8] and the maximum average is 10.8\n- When the length is 6, averages are [9.16667] and the maximum average is 9.16667\nThe maximum average is when we choose a subarray of length 4 (i.e., the sub array [12, -5, -6, 50]) which has the max average 12.75, so we return 12.75\nNote that we do not consider the subarrays of length &lt; 4.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5], k = 1\n<strong>Output:</strong> 5.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 549,
        "dislikes": 64,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Maximum Average Subarray I\", \"titleSlug\": \"maximum-average-subarray-i\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "exampleTestcases": "[1,12,-5,-6,50,3]\n4\n[5]\n1",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def findMaxAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\ndouble findMaxAverage(int* nums, int numsSize, int k){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public double FindMaxAverage(int[] nums, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findMaxAverage = function(nums, k) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float}\ndef find_max_average(nums, k)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func findMaxAverage(nums []int, k int) float64 {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun findMaxAverage(nums: IntArray, k: Int): Double {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn find_max_average(nums: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Float\n     */\n    function findMaxAverage($nums, $k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function findMaxAverage(nums: number[], k: number): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (find-max-average nums k)\n  (-> (listof exact-integer?) exact-integer? flonum?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec find_max_average(Nums :: [integer()], K :: integer()) -> float().\nfind_max_average(Nums, K) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec find_max_average(nums :: [integer], k :: integer) :: float\n  def find_max_average(nums, k) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"17.7K\", \"totalSubmission\": \"49.8K\", \"totalAcceptedRaw\": 17669, \"totalSubmissionRaw\": 49809, \"acRate\": \"35.5%\"}",
        "hints": [],
        "solution": {
            "id": "222",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": true,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[1,12,-5,-6,50,3]\n4",
        "metaData": "{\r\n  \"name\": \"findMaxAverage\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}\r\n",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "222",
        "content": "[TOC]\n\n## Video Solution\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/482858215?texttrack=en\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n#### Approach #1 Iterative method [Time Limit Exceeded]\n\nOne of the simplest solutions is to consider the sum of every possible subarray with length greater than or equal to $$k$$ and to determine the maximum average from out of those. But, instead of finding out this sum in a naive manner for every subarray with length greater than or equal to $$k$$ separately, we can do as follows.\n\nFor every starting point, $$s$$, considered, we can iterate over the elements of $$nums$$ starting from $$nums$$, and keep a track of the $$sum$$ found till the current index($$i$$). Whenever the index reached is such that the number of elements lying between $$s$$ and $$i$$ is greater than or equal to $$k$$, we can check if the average of the elements between $$s$$ and $$i$$ is greater than the average found till now or not.\n\n<iframe src=\"https://leetcode.com/playground/uX3gpV7T/shared\" frameBorder=\"0\" name=\"uX3gpV7T\" width=\"100%\" height=\"309\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. Two for loops iterating over the whole length of $$nums$$ with $$n$$ elements.\n\n* Space complexity : $$O(1)$$. Constant extra space is used.\n\n---\n#### Approach #2 Using Binary Search [Accepted]\n\n**Algorithm**\n\nTo understand the idea behind this method, let's look at the following points.\n\nFirstly, we know that the value of the average could lie between the range $$(min, max)$$. Here, $$min$$ and $$max$$ refer to the minimum and the maximum values out of the given $$nums$$ array. This is because, the average can't be lesser than the minimum value and can't be larger than the maximum value.\n\nBut, in this case, we need to find the maximum average of a subarray with atleast $$k$$ elements. The idea in this method is to try to approximate(guess) the solution and to try to find if this solution really exists.\n\n\nIf it exists, we can continue trying to approximate the solution even to a further precise value, but choosing a larger number as the next approximation. But, if the initial guess is wrong, and the initial maximum average value(guessed) isn't possible, we need to try with a smaller number as the next approximate.\n\nNow, instead of doing the guesses randomly, we can make use of Binary Search. With $$min$$ and $$max$$ as the initial numbers to begin with, we can find out the $$mid$$ of these two numbers given by $$(min+max)/2$$. Now, we need to find if a subarray with length greater than or equal to $$k$$ is possible with an average sum greater than this $$mid$$ value.\n\nTo determine if this is possible in a single scan, let's look at an observation. Suppose, there exist $$j$$ elements, $$a_1, a_2, a_3..., a_j$$ in a subarray within $$nums$$ such that their average is greater than $$mid$$. In this case, we can say that\n\n$$(a_1+a_2+ a_3...+a_j)/j &geq; mid$$ or\n\n$$(a_1+a_2+ a_3...+a_j) &geq; j*mid$$ or\n\n$$(a_1-mid) +(a_2-mid)+ (a_3-mid) ...+(a_j-mid) &geq; 0$$\n\nThus, we can see that if after subtracting the $$mid$$ number from the elements of a subarray with more than $$k-1$$ elements, within $$nums$$, if the sum of elements of this reduced subarray is greater than 0, we can achieve an average value greater than $$mid$$. Thus, in this case, we need to set the $$mid$$ as the new minimum element and continue the process.\n\nOtherwise, if this reduced sum is lesser than 0 for all subarrays with greater than or equal to $$k$$ elements, we can't achieve $$mid$$ as the average. Thus, we need to set $$mid$$ as the new maximum element and continue the process.\n\nIn order to determine if such a subarray exists in a linear manner, we keep on adding $$nums[i]-mid$$ to the $$sum$$ obtained till the $$i^{th}$$ element while traversing over the $$nums$$ array. If on traversing the first $$k$$ elements, the $$sum$$ becomes greater than or equal to 0, we can directly determine that we can increase the average beyond $$mid$$. Otherwise, we continue making additions to $$sum$$ for elements beyond the $$k^{th}$$ element, making use of the following idea.\n\nIf we know the cumulative sum upto indices $$i$$ and $$j$$, say $$sum_i$$ and $$sum_j$$ respectively, we can determine the sum of the subarray between these indices(including $$j$$) as $$sum_j - sum_i$$. In our case, we want this difference between the cumulative sums to be greater than or equal to 0 as discusssed above.\n\nFurther, for $$sum_i$$ as the cumulative sum upto the current($$i^{th}$$) index, all we need is $$sum_j - sum_i &geq; 0$$ such that $$j - i &geq; k$$.\n\nTo achive this, instead of checking with all possible values of $$sum_i$$, we can just consider the minimum cumulative sum upto the index $$j - k$$. This is because if the required condition can't be sastisfied with the minimum $$sum_i$$, it can never be satisfied with a larger value.\n\nTo fulfil this, we make use of a $$prev$$ variable which again stores the cumulative sums but, its current index(for cumulative sum) lies behind the current index for $$sum$$ at an offset of $$k$$ units. Thus, by finding the minimum out of $$prev$$ and the last minimum value, we can easily find out the required minimum sum value.\n\nEvery time after checking the possiblility with a new $$mid$$ value, at the end, we need to settle at some value as the average. But, we can observe that eventually, we'll reach a point, where we'll keep moving near some same value with very small changes. In order to keep our precision in control, we limit this process to $$10^-5$$ precision, by making use of $$error$$ and continuing the process till $$error$$ becomes lesser than 0.00001 .\n\n\n\n<iframe src=\"https://leetcode.com/playground/9co4Jxkv/shared\" frameBorder=\"0\" name=\"9co4Jxkv\" width=\"100%\" height=\"515\"></iframe>\n\n**Complexity Analysis**\n\nLet `N` be the number of element in the array, and `range` be the difference between the maximal and minimal values in the array, _i.e._ `range = max_val - min_val`, and finally the `error` be the precision required in the problem.\n\n* Time complexity : $$O\\big(N \\cdot \\log_2{\\frac{(\\text{max\\_val} - \\text{min\\_val})}{0.00001}} \\big)$$.\n\n    - The algorithm consists of a binary search loop in the function of `findMaxAverage()`.\n\n    - At each iteration of the loop, the `check()` function dominates the time complexity, which is of $$O(N)$$ for each invocation.\n\n    - It now boils down to how many iterations the loop would run eventually. To calculate the number of iterations, let us break it down in the following steps.\n\n    - After the first iteration, the $$\\text{error}$$ would be $$\\frac{\\text{range}}{2}$$, as one can see. Further on, at each iteration, the $$\\text{error}$$ would be reduced into half. For example, after the second iteration, we would have the $$\\text{error}$$ as $$\\frac{\\text{range}}{2}\\cdot \\frac{1}{2}$$.\n\n    - As a result, after $$K$$ iterations, the error would become $$\\text{error} = \\text{range}\\cdot 2^{-K}$$. Given the condition of the loop, _i.e._ $$\\text{error} < 0.00001 $$, we can deduct that $$K > \\log_2{\\frac{\\text{range}}{0.00001}} = \\log_2{\\frac{(\\text{max\\_val} - \\text{min\\_val})}{0.00001}} $$\n\n    - To sum up, the time complexity of the algorithm would be $$O\\big( N \\cdot K \\big) = O\\big(N \\cdot \\log_2{\\frac{(\\text{max\\_val} - \\text{min\\_val})}{0.00001}} \\big)$$.\n\n* Space complexity : $$O(1)$$. Constant Space is used.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": true,
        "paidOnlyVideo": true,
        "rating": {
            "id": "217",
            "count": 65,
            "average": "4.077",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "maximum-average-subarray-ii",
    "playgroundData": {
        "uX3gpV7T": {
            "playground": {
                "testcaseInput": "",
                "name": "644_maximum_aerage_iimd2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "9co4Jxkv": {
            "playground": {
                "testcaseInput": "",
                "name": "644_maximum_aerage_iimd1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}