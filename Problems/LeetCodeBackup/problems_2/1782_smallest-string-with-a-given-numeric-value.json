{
    "id": "1782",
    "question": {
        "questionId": "1782",
        "questionFrontendId": "1663",
        "boundTopicId": null,
        "title": "Smallest String With A Given Numeric Value",
        "titleSlug": "smallest-string-with-a-given-numeric-value",
        "content": "<p>The <strong>numeric value</strong> of a <strong>lowercase character</strong> is defined as its position <code>(1-indexed)</code> in the alphabet, so the numeric value of <code>a</code> is <code>1</code>, the numeric value of <code>b</code> is <code>2</code>, the numeric value of <code>c</code> is <code>3</code>, and so on.</p>\n\n<p>The <strong>numeric value</strong> of a <strong>string</strong> consisting of lowercase characters is defined as the sum of its characters&#39; numeric values. For example, the numeric value of the string <code>&quot;abe&quot;</code> is equal to <code>1 + 2 + 5 = 8</code>.</p>\n\n<p>You are given two integers <code>n</code> and <code>k</code>. Return <em>the <strong>lexicographically smallest string</strong> with <strong>length</strong> equal to <code>n</code> and <strong>numeric value</strong> equal to <code>k</code>.</em></p>\n\n<p>Note that a string <code>x</code> is lexicographically smaller than string <code>y</code> if <code>x</code> comes before <code>y</code> in dictionary order, that is, either <code>x</code> is a prefix of <code>y</code>, or if <code>i</code> is the first position such that <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, k = 27\n<strong>Output:</strong> &quot;aay&quot;\n<strong>Explanation:</strong> The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, k = 73\n<strong>Output:</strong> &quot;aaszz&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>n &lt;= k &lt;= 26 * n</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1571,
        "dislikes": 50,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "3\n27\n5\n73",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "String",
                "slug": "string",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Greedy",
                "slug": "greedy",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Lendingkart\", \"slug\": \"lendingkart\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Yahoo\", \"slug\": \"yahoo\", \"timesEncountered\": 2}], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    string getSmallestString(int n, int k) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public String getSmallestString(int n, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def getSmallestString(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nchar * getSmallestString(int n, int k){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public string GetSmallestString(int n, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getSmallestString = function(n, k) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef get_smallest_string(n, k)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func getSmallestString(_ n: Int, _ k: Int) -> String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func getSmallestString(n int, k int) string {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def getSmallestString(n: Int, k: Int): String = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun getSmallestString(n: Int, k: Int): String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn get_smallest_string(n: i32, k: i32) -> String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function getSmallestString($n, $k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function getSmallestString(n: number, k: number): string {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (get-smallest-string n k)\n  (-> exact-integer? exact-integer? string?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec get_smallest_string(N :: integer(), K :: integer()) -> unicode:unicode_binary().\nget_smallest_string(N, K) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec get_smallest_string(n :: integer, k :: integer) :: String.t\n  def get_smallest_string(n, k) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"81.8K\", \"totalSubmission\": \"122K\", \"totalAcceptedRaw\": 81784, \"totalSubmissionRaw\": 121950, \"acRate\": \"67.1%\"}",
        "hints": [
            "Think greedily.",
            "If you build the string from the end to the beginning, it will always be optimal to put the highest possible character at the current index."
        ],
        "solution": {
            "id": "1055",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "3\n27",
        "metaData": "{\n  \"name\": \"getSmallestString\",\n  \"params\": [\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"k\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "850",
            "date": "2022-03-22",
            "incompleteChallengeCount": 31,
            "streakCount": 0,
            "type": "DAILY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1055",
        "content": "[TOC]\n\n## Solution\n---\n#### Overview ####\n\nWe have to build a string of length $$n$$ that consists of English lowercase characters `a-z` by ensuring that following conditions are satisfied,\n- The numeric value of a string must be equal to a given value $$k$$. The numeric value of a string is equal to the sum of numeric values of all its characters.\nThe numeric value of alphabet characters ranges from $$1$$ to $$26$$, where value of $$a = 1$$, $$b=2$$ and so on.\n- The string must be _lexicographically smallest string_. In other words, we must build a string that would be the smallest in its dictionary order for a given numeric value.\n\nThe value of $$k$$ would be at least $$n$$.\nIf $$k = n$$, the numeric value of every position would be $$1$$ (`a`).\n\nExample: if `n = 3` and `k = 3`, result would be  `aaa`.\n\nThe value of $$k$$ would be at most $$(n * 26)$$.\nIf $$k = (n*26)$$, the numeric value of every position would be $$26$$ (`z`).\n\nExample: if `n = 3` and `k = 78 (3 * 26)` , result would be  `zzz`.\n\n\n\nBased on these insights, let's implement the solution using different approaches.\n\n---\n#### Approach 1: Build number from left to right\n\n**Intuition**\n\nTypically, we have to build a string by filling each position with a character that satisfies some conditions. To implement the solution for this problem we must answer the following question: _How to choose a character to be put for a given position in the string_.\n\nTo answer this question we must have information on 2 parameters,\n1) The remaining value of $$k$$ at any given point.\n2) The number of positions that are yet to be filled.\n\nLet's assume, we are given $$n = 4$$ and we have the first $$2$$ positions in the result filled with `a`. Now we have to decide which character to put at $$3^{rd}$$ position. Let's understand scenarios with different $$k$$ values.\n\n_Scenario 1_: If the given $$k$$ value is $$32$$. After filling first 2 positions with `a` ( numeric value = $$1$$), the remaining $$k$$ value would be $$30$$. Now we have to split $$30$$ into remaining $$2$$ positions in such a way that resultant string is _lexicographically smallest_.\n\n> Lexicographically smallest string is always alphabetically sorted. But an alphabetically sorted string may not be always lexicographically sorted. Example, numeric value of $$dz$$ (`4 + 26 = 30`) is same as the numeric value of $$ey$$ (`5 + 25 = 30`). Both the strings are alphabetically sorted. But, the former is also lexicographically sorted while the latter is not.\n\nThus, we have to choose the character at $$3^{rd}$$ position in such a way that the character at $$4^{th}$$ position would be as large as possible. We know that the largest possible character is `z` with a numeric value of $$26$$. As the remaining $$k$$ value is $$30$$, we can reserve $$26$$ for $$4^{th}$$ position and use the remaining for current position $$3$$.\n\nHence, the numeric value chosen for $$3^{rd}$$ position would be $$4 $$ `(30 - 26)` and the character with the numeric value $$4$$ is $$d$$. The resultant string would be `aadz`.\n\nThe following figure illustrates the idea.\n\n![img](../Documents/5506/smallestStringExample1.svg)\n\n_Scenario 2_: If the given $$k$$ value is $$24$$. After filling first 2 positions with `a` (numeric value = 1), the remaining $$k$$ value would be $$22$$.\nNow, since the remaining $$k$$ value is less than $$26$$, we must assign $$3^{rd}$$ position with smallest character i.e `a` having numeric value $$1$$ and leave the rest for $$4^{th}$$ position. The resultant string would be `aaau`.\n\nThe following figure illustrates the idea.\n\n![img](../Documents/5506/smallestStringExample2.svg)\n\nBased on the above examples, we could develop the following intuition to choose a character for a position.\n\nGiven a value $$k$$ and number of positions left to be filled as $$\\text{positionsLeft}$$,\n- If $$k$$ is greater than $$\\text{positionsLeft} * 26$$, we can reserve the maximum numeric value $$26$$ `(character = z)` for all the positions left. After that we could assign numeric value $$ k - (\\text{positionsLeft} * 26)$$ for the current position.\n\n- Otherwise, we must assign the smallest character i.e `a` at the current position.\n\n**Algorithm**\n- Build a string or character array `result` to store the characters chosen for each position.\n- Iterate from position $$1$$ to $$n$$ and fill the character at each position.\nFind the positions left to be filled excluding the current position given by  `positionsLeft` as  `n - position - 1`.\n\n     * If value of $$k$$ is greater than `positionsLeft * 26`, we could reserve numeric value $$26$$ `(character = z)` for all the remaining positions `positionsLeft`.\n\n        The numeric value for current `position` given by variable `add` would be `k - (positionsLeft * 26)`. Subtract the calculated value `add` from `k` to find the remaining `k` value after filling the current position.\n   * Otherwise, we must fill the the current position with the smallest character `a` having numeric value $$1$$. Subtract $$1$$ from `k` to find the remaining `k` value after filling the current position.\n\n- The process would continue until all the positions are filled.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/kogWCNJq/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"kogWCNJq\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(n)$$, as we iterate over $$n$$ positions to build the resultant string.\n\n- Space Complexity: $$\\mathcal{O}(1)$$, as we use constant extra space to store `add` and `position` variables.\n---\n\n#### Approach 2: Build number from right\n\n**Intuition**\n\nThere is another way of looking at the problem. We know that we must fill all the $$n$$ positions and the smallest character could be `a` with numeric value $$1$$. If we have any $$k$$ left, we try to reserve as much as possible for the last positions.\n\nHence, we could first fill all the positions with `a`. Then iterate from backward: the last position to the first position. As we iterate from $$n^{th}$$ position, we must try to allocate the maximum possible value to each position.\n\n**Algorithm**\n\n- Build a string or character array `result` to store the characters chosen for each position.\n\n- Fill all the `n` positions in `result` with character `a`. Since character `a` has numeric value $$1$$, subtract `n` from `k`. (since we have filled `n` positions with numeric value $$1$$).\n\n- Now, start iterating from the last position `n-1` and allocate the maximum possible numeric value to each position based on the remaining `k`.\nAs we have already allocated `a` at each position with a value $$1$$, the maximum additional value that we can add at each position would be $$25$$ (`26 - 1`).\n\n-  Calculate the additional value to be added given by `add` as a minimum of `25` and `k`. Add the calculated value `add` at the current position and also subtract it from `k`.\n\n- The process would continue until either all the positions are filled or there are no `k` values left `(k = 0)`.\n\n\n\n**Implementation**\n<iframe src=\"https://leetcode.com/playground/eKJQR7WS/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"eKJQR7WS\"></iframe>\n\n**Complexity Analysis**\n\n-  Time Complexity: $$\\mathcal{O}(n)$$, as we iterate over $$n$$ positions to build the resultant string. First, to initialize all the positions with character `a` and then to add the additional value.\n\n- Space Complexity: $$\\mathcal{O}(1)$$, as we use constant extra space to store `add` and `position` variables.\n---\n\n#### Approach 3: Build number from right - Optimised solution\n\n**Intuition**\n\nIn _Approach 2_, we first filled all the positions with the smallest character `a`, subtracted $$1$$ numeric value for each position from $$k$$, and later calculated the additional value. Instead of that, we could simply leave some value from $$k$$ for the remaining positions while iterating over each position from backward.\n\nWhile allocating a numeric value at any position, we must just make sure that there would be sufficient `k` values left such that all the remaining positions would get at least the smallest numeric value i.e `1`.\n\n**Algorithm**\n\n- Build a string or character array `result` to store the character chosen for each position.\n\n - Start iterating from last position `n-1` and allocate maximum possible numeric value to each position based on remaining `k`.\n- We know that the largest character at any position could be `z` with numeric value $$26$$. Also, we must leave some value from `k`, that is, `1` numeric value for each remaining position (`k - position`). Thus the maximum numeric value for the current position given by `add` can be calculated as,  minimum of `k - position` and `26`.\n\n- Subtract the value calculated for the current position `add` from `k`.\n\n- The process would continue until all the positions are filled.\n\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/LoXp8sut/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"LoXp8sut\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(n)$$, as we iterate over $$n$$ positions to build the resultant string.\n\n- Space Complexity: $$\\mathcal{O}(1)$$, as we use constant extra space to store `add` and `position` variables.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1010",
            "count": 20,
            "average": "4.000",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "smallest-string-with-a-given-numeric-value",
    "playgroundData": {
        "kogWCNJq": {
            "playground": {
                "testcaseInput": "",
                "name": "smallest-string-with-a-given-numeric-value-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "eKJQR7WS": {
            "playground": {
                "testcaseInput": "",
                "name": "smallest-string-with-a-given-numeric-value-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "LoXp8sut": {
            "playground": {
                "testcaseInput": "",
                "name": "smallest-string-with-a-given-numeric-value-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}