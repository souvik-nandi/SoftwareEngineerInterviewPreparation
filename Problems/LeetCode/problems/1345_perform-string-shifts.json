{
    "id": "1345",
    "question": {
        "questionId": "1345",
        "questionFrontendId": "1427",
        "boundTopicId": null,
        "title": "Perform String Shifts",
        "titleSlug": "perform-string-shifts",
        "content": "<p>You are given a string <code>s</code> containing lowercase English letters, and a matrix <code>shift</code>, where <code>shift[i] = [direction<sub>i</sub>, amount<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>direction<sub>i</sub></code> can be <code>0</code> (for left shift) or <code>1</code> (for right shift).</li>\n\t<li><code>amount<sub>i</sub></code> is the amount by which string <code>s</code> is to be shifted.</li>\n\t<li>A left shift by 1 means remove the first character of <code>s</code> and append it to the end.</li>\n\t<li>Similarly, a right shift by 1 means remove the last character of <code>s</code> and add it to the beginning.</li>\n</ul>\n\n<p>Return the final string after all operations.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;, shift = [[0,1],[1,2]]\n<strong>Output:</strong> &quot;cab&quot;\n<strong>Explanation:</strong>&nbsp;\n[0,1] means shift to left by 1. &quot;abc&quot; -&gt; &quot;bca&quot;\n[1,2] means shift to right by 2. &quot;bca&quot; -&gt; &quot;cab&quot;</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcdefg&quot;, shift = [[1,1],[1,1],[0,2],[1,3]]\n<strong>Output:</strong> &quot;efgabcd&quot;\n<strong>Explanation:</strong>&nbsp; \n[1,1] means shift to right by 1. &quot;abcdefg&quot; -&gt; &quot;gabcdef&quot;\n[1,1] means shift to right by 1. &quot;gabcdef&quot; -&gt; &quot;fgabcde&quot;\n[0,2] means shift to left by 2. &quot;fgabcde&quot; -&gt; &quot;abcdefg&quot;\n[1,3] means shift to right by 3. &quot;abcdefg&quot; -&gt; &quot;efgabcd&quot;</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> only contains lower case English letters.</li>\n\t<li><code>1 &lt;= shift.length &lt;= 100</code></li>\n\t<li><code>shift[i].length == 2</code></li>\n\t<li><code>direction<sub>i</sub></code><sub> </sub>is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>0 &lt;= amount<sub>i</sub> &lt;= 100</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 160,
        "dislikes": 3,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "\"abc\"\n[[0,1],[1,2]]\n\"abcdefg\"\n[[1,1],[1,1],[0,2],[1,3]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Math",
                "slug": "math",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "String",
                "slug": "string",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Goldman Sachs\", \"slug\": \"goldman-sachs\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    string stringShift(string s, vector<vector<int>>& shift) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public String stringShift(String s, int[][] shift) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def stringShift(self, s, shift):\n        \"\"\"\n        :type s: str\n        :type shift: List[List[int]]\n        :rtype: str\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def stringShift(self, s: str, shift: List[List[int]]) -> str:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nchar * stringShift(char * s, int** shift, int shiftSize, int* shiftColSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public string StringShift(string s, int[][] shift) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {string} s\n * @param {number[][]} shift\n * @return {string}\n */\nvar stringShift = function(s, shift) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {String} s\n# @param {Integer[][]} shift\n# @return {String}\ndef string_shift(s, shift)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func stringShift(_ s: String, _ shift: [[Int]]) -> String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func stringShift(s string, shift [][]int) string {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def stringShift(s: String, shift: Array[Array[Int]]): String = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun stringShift(s: String, shift: Array<IntArray>): String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn string_shift(s: String, shift: Vec<Vec<i32>>) -> String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[][] $shift\n     * @return String\n     */\n    function stringShift($s, $shift) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function stringShift(s: string, shift: number[][]): string {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (string-shift s shift)\n  (-> string? (listof (listof exact-integer?)) string?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec string_shift(S :: unicode:unicode_binary(), Shift :: [[integer()]]) -> unicode:unicode_binary().\nstring_shift(S, Shift) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec string_shift(s :: String.t, shift :: [[integer]]) :: String.t\n  def string_shift(s, shift) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"70.9K\", \"totalSubmission\": \"131.1K\", \"totalAcceptedRaw\": 70944, \"totalSubmissionRaw\": 131133, \"acRate\": \"54.1%\"}",
        "hints": [
            "Intuitively performing all shift operations is acceptable due to the constraints.",
            "You may notice that left shift cancels the right shift, so count the total left shift times (may be negative if the final result is right shift), and perform it once."
        ],
        "solution": {
            "id": "934",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "\"abc\"\n[[0,1],[1,2]]",
        "metaData": "{\n  \"name\": \"stringShift\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"string\"\n    },\n    {\n      \"type\": \"integer[][]\",\n      \"name\": \"shift\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "934",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Simulation\n\n**Intuition**\n\nWhen given a shift operation, for example `[1, 4]`, we'll refer to the first part as the *shift-direction*, and the second part as the *shift-amount*.\n\nThe most obvious way of solving this problem is to simulate the shifts, one by one.\n\nFor example, suppose we have the string `\"leetcodeiscool\"`.\n\nIf we need to perform shift operation `[0, 5]`, then we'll shift the string *left* by 5, i.e.:\n\n!?!../Documents/10004_left_shift_5.json:960,200!?!\n\nAnd if we need to perform shift operation `[1, 5]`, then we'll shift the string *right* by 5, i.e.:\n\n!?!../Documents/10004_right_shift_5.json:960,200!?!\n\nWe could write an algorithm that simulates the process in the animation for each shift operation. However, strings are immutable in many programming languages, including Java and Python. This means that once a string object has been created, it *cannot be modified*. Instead, a *new string* must be created if we want to change it. This makes \"string modification\" a very expensive operation, at $$O(L)$$, where $$L$$ is the length of the string. Therefore, we don't want to make lots of little modifications: we want to combine them into one single modification that can be applied with a single new string creation.\n\nSo, how can we do that here? Well, observe that a *left shift* is equivalent to taking *shift-amount* letters off the front, and putting them onto the end. Similarly, a *right shift* is equivalent to taking *shift-amount* letters off the end, and putting them onto the front.\n\n![A left shift operation as a single concatenation.](../Figures/10004/concatentation_left_shift.png)\n\n![A right shift operation as a single concatenation.](../Figures/10004/concatentation_right_shift.png)\n\nThis will work as long as *shift-amount* is *less than the length of the string*.\n\nHowever, *shift-amounts* are allowed to be *longer* than the length of the string. For example, consider the word `\"cabbage\"` (which has seven letters). We need to apply the *right-shift* operation `[1, 9]` to it. If the word was more than nine letters long, we would have just taken nine letters off the end, and put them on the front. But there aren't nine letters to move! To find a solution, let's start by going back to the inefficient algorithm; moving the string by one position at a time.\n\n!?!../Documents/10004_cabbage_shift_9.json:500,200!?!\n\nNotice that after seven shifts we're back to `\"cabbage\"` again. Only the last two shifts mattered. The number seven is significant because it is the length of the input string. We can extend this a bit further by reasoning that if we had a *shift-amount* of 25, then we'd effectively have `7 + 7 + 7 + 4`. The `7`'s will do nothing, and it is only the final `4` that the string will be shifted by.\n\nRecognize that the \"remainder\" after subtracting the length as many times as we can is simply taking the modulus of a number. i.e. `9 % 7 = 2` and `25 % 7 = 4`.\n\nTherefore, if the *shift-amount* is greater than the length of the string, then we should start by reducing the *shift-amount* to modulo the length of the string. In fact, we don't even need the \"if\". For example, `6 % 7 = 6`. The modulo does nothing if the first number is smaller than the second.\n\nTo put this into a complete algorithm that solves the problem, we need to loop through the list of shift operations, doing a single concatenation for each one. Here is an animation of this process.\n\n!?!../Documents/10004_repeated_concatenation_animation.json:960,360!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/fr8QTH2k/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"fr8QTH2k\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$L$$ be the length of the string and $$N$$ be the length of the `shift` array.\n\n- Time complexity : $$O(N \\cdot L)$$.\n\n    Making a single modification to the input string has a cost of $$O(L)$$, as we need to create a new string with the modifications. We are making one modification for each shift operation. As there are $$N$$ shift operations, this gives us a total time complexity of $$O(N \\cdot L)$$.\n\n- Space complexity : $$O(L)$$.\n\n    While performing a string modification, we'll have both the original string and the new string in memory. Therefore, the space complexity is $$O(L)$$.\n\n    Note that if you're using a language with mutable strings (such as C or C++), then it is possible to get the space complexity down to $$O(1)$$ by doing the shift operations in-place with a suitable algorithm. Approach 3 or 4 of the [Rotate Strings Solution Article](https://leetcode.com/problems/rotate-array/solution/) would be a great way of going about this.\n\nBefore we came up with this approach, we briefly discussed a simpler approach where instead of doing each shift operation as a single string modification, we'd do it as *shift-amount* operations. What would the time complexity for this approach be? To simplify, we'll assume that *shift-amount* must be less than or equal to $$L$$ (we can use the modulo operator to ensure this). Under this assumption, the worst case is where all the *shift-amounts* are exactly $$L - 1$$. This means that applying a shift operation will do a $$O(L)$$ string modification, $$L-1$$ times. $$(S - 1) \\cdot O(L) = O(L^2)$$. Then with $$N$$ shift operations to perform, we get a total of $$O(N \\cdot L ^ 2)$$. This is a lot worse!\n\n<br/>\n\n---\n\n#### Approach 2: Compute Net Shift\n\n**Intuition**\n\nIn Approach 1, we calculated each shift at a cost of $$O(L)$$ each time (where $$L$$ is the length of the input string). However, you might've noticed that we can combine *all* the shifts, and then perform a *single* string modification for *all of them*.\n\nFor example, if we have two left shifts, `[0, 3]` and `[0, 6]`, then we can combine them into a single left shift `[0, 3 + 6] = [0, 9]`. Then, instead of performing two separate $$O(L)$$ modifications, we can perform just one.\n\n![Combining two left shifts into a single left shift.](../Figures/10004/combine_shifts.png)\n\nThe same idea applies to the right shifts.\n\nWe could, therefore, add all the lefts together and apply them, and then add all the rights together, and apply them. This would mean we only needed to perform two $$O(L)$$ string modifications.\n\n\n!?!../Documents/10004_left_right_additions.json:960,360!?!\n\nWe can do even better than this though, as *left shifts and right shifts cancel each other out*. For example, a *left shift* by `3`, followed by a *right shift* by `3`, brings us back to the original string. It is, therefore, wasted computation to do these shift operations at all!\n\n![Left and right shifts by the same amount canceling each other out.](../Figures/10004/left_right_cancellation.png)\n\nWhat about a *right shift* by `5`, followed by a *left shift* by `3`? \n\n![Left and right shifts by the same amount canceling each other out.](../Figures/10004/partial_left_right_cancellation.png)\n\nIn effect, we are left with a *right shift* by `2`.\n\nSo for this approach, we'll write an algorithm that pre-processes the `shift` list, and then applies a single string modification.\n\n**Algorithm**\n\nAs described above, we should go through the `shift` list adding up all the *right shift-amounts* and *left shift-amounts* into two separate sums.\n\nAnd then once we have these two amounts, we need to work out which is bigger, and partially cancel it out with the other. We then need to do the relevant shift with what's remaining. If both are the same, then the string won't be changed at all.\n\nHere is the code for this algorithm. After this code, we'll look at a slight optimization/ simplification, that uses a little more math.\n\n<iframe src=\"https://leetcode.com/playground/TVdEcrcJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"TVdEcrcJ\"></iframe>\n\n\nTo simplify the code further, remember that *right shifts* and *left shifts* cancel each other out. We'll just keep track of how many *left shifts* there are, by treating *right shifts* as negative *left shifts*.\n\nIf after doing this, the final value of `left_shifts` is positive, then we need to do a *left shift operation*. If it is negative, then we need to do a *right shift operation*, i.e. if it is `-5`, then we need to *right shift* by `5`.\n\nWe can simplify it further still by recognizing that the number of *right shifts* can be converted into a number of *left shifts*. Notice that all \"valid\" shifts of a string can be represented in a clock-like circle. For example, here is the \"clock\" diagram we could make for the word `\"leetcode\"`.\n\n![A clock of all shifts of the word \"leetcode\".](../Figures/10004/clock_combinations.png)\n\nWhen we *left shift* the string, we are moving clockwise. When we *right shift* the string, we are moving anti-clockwise.\n\nNow to get the overall left shift, we can simply take the total *left shifts* (regardless of whether it is positive or negative) modulo the length of the string:\n\n`left_shifts = left_shifts % length of string`\n\nIn most programming languages, the modulo operator will add length to the shift amount until the result is positive. This is what we want. Note that the `%` operator doesn't work this way in *all* languages. In some languages, such as Java, *it does not make negative numbers positive*. Java's `Math.floorMod` function will do what we want though.\n\n<iframe src=\"https://leetcode.com/playground/7cySqPMb/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"7cySqPMb\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$L$$ be the length of the string and $$N$$ be the length of the `shift` array. Both sub-approaches here have the same complexity analysis.\n\n- Time complexity : $$O(N + L)$$.\n    \n    The algorithms presented in Approach 2 both break the task into two sub-steps: calculating an overall shift and applying the shift. We'll analyze these one at a time and then combine the results.\n\n    The first step loops through each of the $$N$$ entries in the `shift` array, adding up the total number of left shifts and the total number of right shifts. Handling each entry is an $$O(1)$$ operation, so this first step has a total cost of $$O(N)$$.\n\n    The second step applies a single string-shift operation. As discussed in the previous approach, a string-shift operation has a cost of $$O(L)$$.\n\n    Because we are doing these steps one-after-the-other, and we don't know whether $$N$$ or $$L$$ is bigger, we add them to get a final time complexity of $$O(N + L)$$.\n\n- Space complexity : $$O(L)$$.\n\n    The first step uses constant extra space to keep track of the counts. This leaves us with the space complexity of modifying a string, which, as discussed before, requires auxiliary space of $$O(L)$$.\n\n    As stated in the previous approach, it is possible to get the space complexity down to $$O(1)$$ by using a language with mutable strings.\n\n<br/>",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "879",
            "count": 12,
            "average": "5.000",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "perform-string-shifts",
    "playgroundData": {
        "fr8QTH2k": {
            "playground": {
                "testcaseInput": "",
                "name": "performing-string-shifts-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "TVdEcrcJ": {
            "playground": {
                "testcaseInput": "",
                "name": "performing-string-shifts-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "7cySqPMb": {
            "playground": {
                "testcaseInput": "",
                "name": "performing-string-shifts-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}