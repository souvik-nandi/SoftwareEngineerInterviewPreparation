{
    "id": "2123",
    "question": {
        "questionId": "2123",
        "questionFrontendId": "1996",
        "boundTopicId": null,
        "title": "The Number of Weak Characters in the Game",
        "titleSlug": "the-number-of-weak-characters-in-the-game",
        "content": "<p>You are playing a game that contains multiple characters, and each of the characters has <strong>two</strong> main properties: <strong>attack</strong> and <strong>defense</strong>. You are given a 2D integer array <code>properties</code> where <code>properties[i] = [attack<sub>i</sub>, defense<sub>i</sub>]</code> represents the properties of the <code>i<sup>th</sup></code> character in the game.</p>\n\n<p>A character is said to be <strong>weak</strong> if any other character has <strong>both</strong> attack and defense levels <strong>strictly greater</strong> than this character&#39;s attack and defense levels. More formally, a character <code>i</code> is said to be <strong>weak</strong> if there exists another character <code>j</code> where <code>attack<sub>j</sub> &gt; attack<sub>i</sub></code> and <code>defense<sub>j</sub> &gt; defense<sub>i</sub></code>.</p>\n\n<p>Return <em>the number of <strong>weak</strong> characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> properties = [[5,5],[6,3],[3,6]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No character has strictly greater attack and defense than the other.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> properties = [[2,2],[3,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The first character is weak because the second character has a strictly greater attack and defense.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> properties = [[1,5],[10,4],[4,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The third character is weak because the second character has a strictly greater attack and defense.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= properties.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>properties[i].length == 2</code></li>\n\t<li><code>1 &lt;= attack<sub>i</sub>, defense<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 749,
        "dislikes": 23,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Russian Doll Envelopes\", \"titleSlug\": \"russian-doll-envelopes\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Maximum Height by Stacking Cuboids \", \"titleSlug\": \"maximum-height-by-stacking-cuboids\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "exampleTestcases": "[[5,5],[6,3],[3,6]]\n[[2,2],[3,3]]\n[[1,5],[10,4],[4,3]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Stack",
                "slug": "stack",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Greedy",
                "slug": "greedy",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Sorting",
                "slug": "sorting",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 10}, {\"taggedByAdmin\": false, \"name\": \"tiktok\", \"slug\": \"tiktok\", \"timesEncountered\": 3}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"ByteDance\", \"slug\": \"bytedance\", \"timesEncountered\": 4}], \"3\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int numberOfWeakCharacters(vector<vector<int>>& properties) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int numberOfWeakCharacters(int[][] properties) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def numberOfWeakCharacters(self, properties):\n        \"\"\"\n        :type properties: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint numberOfWeakCharacters(int** properties, int propertiesSize, int* propertiesColSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int NumberOfWeakCharacters(int[][] properties) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[][]} properties\n * @return {number}\n */\nvar numberOfWeakCharacters = function(properties) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[][]} properties\n# @return {Integer}\ndef number_of_weak_characters(properties)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func numberOfWeakCharacters(_ properties: [[Int]]) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func numberOfWeakCharacters(properties [][]int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def numberOfWeakCharacters(properties: Array[Array[Int]]): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun numberOfWeakCharacters(properties: Array<IntArray>): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn number_of_weak_characters(properties: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $properties\n     * @return Integer\n     */\n    function numberOfWeakCharacters($properties) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function numberOfWeakCharacters(properties: number[][]): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (number-of-weak-characters properties)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec number_of_weak_characters(Properties :: [[integer()]]) -> integer().\nnumber_of_weak_characters(Properties) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec number_of_weak_characters(properties :: [[integer]]) :: integer\n  def number_of_weak_characters(properties) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"22.3K\", \"totalSubmission\": \"61.6K\", \"totalAcceptedRaw\": 22309, \"totalSubmissionRaw\": 61600, \"acRate\": \"36.2%\"}",
        "hints": [
            "Sort the array on the basis of the attack values and group characters with the same attack together. How can you use these groups?",
            "Characters in one group will always have a lesser attack value than the characters of the next group. Hence, we will only need to check if there is a higher defense value present in the next groups."
        ],
        "solution": {
            "id": "1461",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[[5,5],[6,3],[3,6]]",
        "metaData": "{\n  \"name\": \"numberOfWeakCharacters\",\n  \"params\": [\n    {\n      \"name\": \"properties\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1461",
        "content": "[TOC]\n\n## Solution\n--- \n\n#### Overview\n\n\nWe have a list of $$N$$ pairs denoting `(attack, defense)` of the $$N$$ characters. A character is weak if there exists any other character with the attack and defense value strictly more than it. We need to calculate the number of weak characters.\n\nThe brute force approach would be to check for every character if it's weak or not and, to check this we can iterate over every other character and see if there is any pair with both values (attack and defense) greater than it. This approach, however, is not efficient as we would be iterating over all the $$N$$ pairs for every character, and hence the time complexity would be $$O(N^2)$$. We will discuss two possible efficient approaches below.\n</br>\n\n---\n\n#### Approach 1: Sorting\n\n**Intuition**\n\nConsider a simpler problem, where we only have one parameter say the attack value. In this case, all the characters except the one with the highest attack value will be weak. Hence, the number of weak characters will be the total characters minus the count of characters with the highest attack value. An alternative approach will be: we could sort the array in ascending order and then we can iterate over the array from the right end keeping the maximum attack value we have achieved so far. If this value is more than the current value then the character is weak.\n\nWe need to do something similar here, the only difference is we have two parameters. Let's sort these pairs in ascending order of their first value (`attack`). This way we will only need to take care of the second value (`defense`) because the character at a smaller index will not be stronger (i.e., will have a weaker attack value) than the character at a greater index.\n\nNow once we have the array sorted in ascending order of their attack value, we can iterate over the pairs from right to left keeping the maximum defense value achieved so far. If this maximum defense value is more than the defense value at the current index then it's a weak character.\n\nThe above-mentioned theory has a catch. Consider the list of pairs `[(1, 2), (3, 4), (3, 6), (3, 7)]`, the pairs are sorted in ascending order of their attack value and in ascending order of defense value in case of a tie in the attack values. When we iterate from the right end the maximum defense value will be equal to `7` when we reach the pair `(3, 6)`, and we will consider this pair to be weak. Although, it's not as the attack value is equal and not strictly greater. The point to note here is, that we need to ignore the defense value of the pairs with the same attack value.\n\nWe can achieve it by sorting the pairs by ascending order of their attack value and then in descending order of their defense value in case of a tie. This way, the above list would be `[(1, 2), (3, 7), (3, 6), (3, 4)]` and hence when we iterate over it from the right end, the maximum defense value will be equal to `4` when we reach the pair `(3, 6)`. We can take another example `[(1, 1), (2, 1), (2, 2), (1, 2)]`, after sorting the pairs in ascending order of attack and in ascending order of defense in case of a tie will be  `[(1, 1), (1, 2), (2, 1), (2, 2)]`, now when we will iterate it from right to left the maximum defense value will be `2` when we reach the pair `(2, 1)`, this will lead us to conclude that the pair `(2, 1)` is weak but it's not. On the other hand, sorting the pairs with the same attack value will produce `[(1, 2), (1, 1), (2, 2), (2, 1)]` and hence we will not face the previously mentioned issue here.\n\n\n**Algorithm**\n\n1. Sort the list of pairs `properties` in ascending order of their attack and then in descending order of the defense value. We can achieve it using the custom comparator.\n2. Initialize the maximum defense value achieved `maxDefense` to `0`.\n3. Iterate over the pairs from right to left and for each pair:\n\n    a. If the `maxDefense` is greater than the defense value of the current character, increment the value `weakCharacters`.\n\n    b. Update the value of `maxDefense` if it's smaller than the current defense value.\n4. Return `weakCharacters`.\n\n\n**Implementation**\n\n\n<iframe src=\"https://leetcode.com/playground/6tCZg6oU/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"6tCZg6oU\"></iframe>\n\n\n**Complexity Analysis**\n\nHere, $$N$$ is the number of pairs in the given list `properties`.\n\n* Time complexity: $$O(N \\log N)$$\n\n   Sorting a list of $$N$$ elements takes $$O(N \\log N)$$ time. The iteration over the sorted list to count the weak character takes $$O(N)$$ time. Hence the time complexity equals $$O(N \\log N)$$.\n\n* Space complexity: $$O(\\log N)$$\n    \n   We only need two variables `maxDefense` and `weakCharacters` to solve the problem. Some space will be used for sorting the list. The space complexity of the sorting algorithm depends on the implementation of each programming language. For instance, in Java, the `Arrays.sort()` for primitives is implemented as a variant of the quicksort algorithm whose space complexity is $$O(\\log N)$$. In C++ `std::sort()` function provided by STL is a hybrid of Quick Sort, Heap Sort, and Insertion Sort and has a worst-case space complexity of $$O(\\log N)$$. Thus, the use of the inbuilt sort() function might add up to $$O(\\log N)$$ to space complexity.\n<br/>\n\n---\n\n#### Approach 2: Greedy\n\n**Intuition**\n\nIn the previous approach, we sorted the pairs by their attack value first, this helped us to ignore the attack value and decide the type of character based on the defense value. We know that the character will be weak only if there is any character with both attack and defense values greater than it. For a pair `(a, b)` we can say it to be weak if the maximum defense value among all the pairs with `attack-value > a` is greater than `b`. So we will keep the maximum defense value among all the pairs with an attack value greater than `x`, for every value of `x`. Then the pair `(a, b)` will be weak if the maximum defense value stored for value `a + 1` is greater than `b`.\n\nTo find the maximum defense value as mentioned above. We first find the maximum defense value for the particular value of the attack, to find this we can iterate over the properties from left to right and for each attack value in the pairs, we find the maximum defense value and store it in the `maxDefense`. Then we can iterate over all the possible values of attack and keep the maximum defense value achieved so far in the array, iterating over the attack values from highest to lowest.\n\n**Algorithm**\n\n1. Iterate over `properties`, and store the maximum defense value for attack values in the array `maxDefense`.\n2. Iterate over all the possible values of attack from the maximum possible attack value (`100000`) to `0`. Keep the maximum value seen so far, `maxDefense[i]` will represent the maximum value in the suffix `[i, maxAttack]`.\n3. Iterate over the `properties` for every pair `(attack, defense)`, increment the counter `weakCharacters` if the value at `maxDefense[attack + 1]` is greater than `defense`.\n4. Return `weakCharacters`.\n\nThe following slideshow demonstrates the algorithm:\n\n!?!../Documents/1996_The_Number_of_Weak_Characters_in_the_Game.json:960,720!?! <br>\n\n**Implementation**\n\n\n<iframe src=\"https://leetcode.com/playground/4qxxZZz9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"4qxxZZz9\"></iframe>\n\n\n**Complexity Analysis**\n\nHere, $$N$$ is the number of pairs in the given list `properties`, and $$K$$ is the maximum attack value possible.\n\n* Time complexity: $$O(N + K)$$\n\n  The iteration over the pairs to find the maximum defense value for a particular attack value takes $$O(N)$$ time. The iteration over the possible value of the attack property takes $$O(K)$$ time. The iteration over the properties to count the weak characters takes $$O(N)$$ time. Therefore, the total time complexity equals to $$O(N + K)$$.\n\n* Space complexity: $$O(K)$$\n   \n  The array `maxDefense` will be of size $$K$$ to store the defense value corresponding to all the attack values.\n<br/>\n\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1466",
            "count": 1,
            "average": "5.000",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "the-number-of-weak-characters-in-the-game",
    "playgroundData": {
        "6tCZg6oU": {
            "playground": {
                "testcaseInput": "",
                "name": "the-number-of-weak-characters-in-the-game-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "4qxxZZz9": {
            "playground": {
                "testcaseInput": "",
                "name": "the-number-of-weak-characters-in-the-game-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}