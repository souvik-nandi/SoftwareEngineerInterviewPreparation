{
    "id": "574",
    "question": {
        "questionId": "574",
        "questionFrontendId": "574",
        "boundTopicId": null,
        "title": "Winning Candidate",
        "titleSlug": "winning-candidate",
        "content": "<p>Table: <code>Candidate</code></p>\n\n<pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| name        | varchar  |\n+-------------+----------+\nid is the primary key column for this table.\nEach row of this table contains information about the id and the name of a candidate.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Vote</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| candidateId | int  |\n+-------------+------+\nid is an auto-increment primary key.\ncandidateId is a foreign key to id from the Candidate table.\nEach row of this table determines the candidate who got the i<sup>th</sup> vote in the elections.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to report the name of the winning candidate (i.e., the candidate who got the largest number of votes).</p>\n\n<p>The test cases are generated so that <strong>exactly one candidate wins</strong> the elections.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nCandidate table:\n+----+------+\n| id | name |\n+----+------+\n| 1  | A    |\n| 2  | B    |\n| 3  | C    |\n| 4  | D    |\n| 5  | E    |\n+----+------+\nVote table:\n+----+-------------+\n| id | candidateId |\n+----+-------------+\n| 1  | 2           |\n| 2  | 4           |\n| 3  | 3           |\n| 4  | 2           |\n| 5  | 5           |\n+----+-------------+\n<strong>Output:</strong> \n+------+\n| name |\n+------+\n| B    |\n+------+\n<strong>Explanation:</strong> \nCandidate B has 2 votes. Candidates C, D, and E have 1 vote each.\nThe winner is candidate B.\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 137,
        "dislikes": 388,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "{\"headers\":{\"Candidate\":[\"id\",\"name\"],\"Vote\":[\"id\",\"candidateId\"]},\"rows\":{\"Candidate\":[[1,\"A\"],[2,\"B\"],[3,\"C\"],[4,\"D\"],[5,\"E\"]],\"Vote\":[[1,2],[2,4],[3,3],[4,2],[5,5]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"48.8K\", \"totalSubmission\": \"82.7K\", \"totalAcceptedRaw\": 48767, \"totalSubmissionRaw\": 82708, \"acRate\": \"59.0%\"}",
        "hints": [],
        "solution": {
            "id": "208",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "{\"headers\":{\"Candidate\":[\"id\",\"name\"],\"Vote\":[\"id\",\"candidateId\"]},\"rows\":{\"Candidate\":[[1,\"A\"],[2,\"B\"],[3,\"C\"],[4,\"D\"],[5,\"E\"]],\"Vote\":[[1,2],[2,4],[3,3],[4,2],[5,5]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Candidate (id int, name varchar(255))\",\n    \"Create table If Not Exists Vote (id int, candidateId int)\"\n  ],\n  \"mssql\": [\n    \"Create table Candidate (id int, name varchar(255))\",\n    \"Create table Vote (id int, candidateId int)\"\n  ],\n  \"oraclesql\": [\n    \"Create table Candidate (id int, name varchar(255))\",\n    \"Create table Vote (id int, candidateId int)\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists Candidate (id int, name varchar(255))",
            "Create table If Not Exists Vote (id int, candidateId int)",
            "Truncate table Candidate",
            "insert into Candidate (id, name) values ('1', 'A')",
            "insert into Candidate (id, name) values ('2', 'B')",
            "insert into Candidate (id, name) values ('3', 'C')",
            "insert into Candidate (id, name) values ('4', 'D')",
            "insert into Candidate (id, name) values ('5', 'E')",
            "Truncate table Vote",
            "insert into Vote (id, candidateId) values ('1', '2')",
            "insert into Vote (id, candidateId) values ('2', '4')",
            "insert into Vote (id, candidateId) values ('3', '3')",
            "insert into Vote (id, candidateId) values ('4', '2')",
            "insert into Vote (id, candidateId) values ('5', '5')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "208",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using `JOIN` and a temporary table [Accepted]\n\n**Algorithm**\n\nQuery in the **Vote** table to get the winner's id and then join it with the **Candidate** table to get the name.\n\n**MySQL**\n\n```sql\nSELECT\n    name AS 'Name'\nFROM\n    Candidate\n        JOIN\n    (SELECT\n        Candidateid\n    FROM\n        Vote\n    GROUP BY Candidateid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1) AS winner\nWHERE\n    Candidate.id = winner.Candidateid\n;\n```",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "203",
            "count": 15,
            "average": "3.267",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "winning-candidate",
    "playgroundData": {}
}