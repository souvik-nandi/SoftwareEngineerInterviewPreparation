{
    "id": "1650",
    "question": {
        "questionId": "1650",
        "questionFrontendId": "1506",
        "boundTopicId": null,
        "title": "Find Root of N-Ary Tree",
        "titleSlug": "find-root-of-n-ary-tree",
        "content": "<p>You are given all the nodes of an <strong><a href=\"https://leetcode.com/articles/introduction-to-n-ary-trees/\">N-ary tree</a></strong> as an array of <code>Node</code> objects, where each node has a <strong>unique value</strong>.</p>\n\n<p>Return <em>the <strong>root</strong> of the N-ary tree</em>.</p>\n\n<p><strong>Custom testing:</strong></p>\n\n<p>An N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the <code>null</code> value (see examples).</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<p>For example, the above tree is serialized as <code>[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</code>.</p>\n\n<p>The testing will be done in the following way:</p>\n\n<ol>\n\t<li>The <strong>input data</strong> should be provided as a serialization of the tree.</li>\n\t<li>The driver code will construct the tree from the serialized input data and put each <code>Node</code> object into an array <strong>in an arbitrary order</strong>.</li>\n\t<li>The driver code will pass the array to <code>findRoot</code>, and your function should find and return the root <code>Node</code> object in the array.</li>\n\t<li>The driver code will take the returned <code>Node</code> object and serialize it. If the serialized value and the input data are the <strong>same</strong>, the test <strong>passes</strong>.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> tree = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [1,null,3,2,4,null,5,6]\n<strong>Explanation:</strong> The tree from the input data is shown above.\nThe driver code creates the tree and gives findRoot the Node objects in an arbitrary order.\nFor example, the passed array could be [Node(5),Node(4),Node(3),Node(6),Node(2),Node(1)] or [Node(2),Node(6),Node(1),Node(3),Node(5),Node(4)].\nThe findRoot function should return the root Node(1), and the driver code will serialize it and compare with the input data.\nThe input data and serialized Node(1) are the same, so the test passes.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> tree = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The total number of nodes is between <code>[1, 5 * 10<sup>4</sup>]</code>.</li>\n\t<li>Each node has a <strong>unique</strong> value.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you solve this problem in constant space complexity with a linear time algorithm?</li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 349,
        "dislikes": 125,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Move Sub-Tree of N-Ary Tree\", \"titleSlug\": \"move-sub-tree-of-n-ary-tree\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]",
        "exampleTestcases": "[1,null,3,2,4,null,5,6]\n[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Tree",
                "slug": "tree",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"2\": [], \"3\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* findRoot(vector<Node*> tree) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    \n    public Node() {\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val) {\n        val = _val;\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val,ArrayList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public Node findRoot(List<Node> tree) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\"\"\"\n\nclass Solution(object):\n    def findRoot(self, tree):\n        \"\"\"\n        :type tree: List['Node']\n        :rtype: 'Node'\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\"\"\"\n\nclass Solution:\n    def findRoot(self, tree: List['Node']) -> 'Node':\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n    \n    public Node() {\n        val = 0;\n        children = new List<Node>();\n    }\n\n    public Node(int _val) {\n        val = _val;\n        children = new List<Node>();\n    }\n    \n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public Node FindRoot(List<Node> tree) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * // Definition for a Node.\n * function Node(val, children) {\n *    this.val = val === undefined ? 0 : val;\n *    this.children = children === undefined ? [] : children;\n * };\n */\n\n/**\n * @param {Node[]} tree\n * @return {Node}\n */\nvar findRoot = function(tree) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val=0, children=[])\n#         @val = val\n#         @children = children\n#     end\n# end\n\n# @param {Node[]} tree\n# @return {Node}\ndef find_root(tree)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func findRoot(_ tree: [Node]) -> Node? {\n\n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc findRoot(tree []*Node) *Node {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def findRoot(tree: List[Node]): Node = {\n        \n    }\n}\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun findRoot(tree: List<Node>): Node? {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node[] $tree\n     * @return Node\n     */\n    function findRoot($tree) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "/**\n * Definition for Node.\n * class Node {\n *     val: number\n *     children: Node[]\n *     constructor(val?: number, children?: Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.children = (children===undefined ? [] : children)\n *     }\n * }\n */\n\nfunction findRoot(tree: Node[]): Node | null {\n    \n};",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"22.8K\", \"totalSubmission\": \"29.3K\", \"totalAcceptedRaw\": 22781, \"totalSubmissionRaw\": 29289, \"acRate\": \"77.8%\"}",
        "hints": [
            "Node with indegree 0 is the root"
        ],
        "solution": {
            "id": "1057",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[1,null,3,2,4,null,5,6]",
        "metaData": "{\n  \"name\": \"findRoot\",\n  \"params\": [\n    {\n      \"name\": \"tree\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"javascript\",\n    \"python3\",\n    \"csharp\",\n    \"typescript\",\n    \"ruby\",\n    \"swift\",\n    \"golang\",\n    \"scala\",\n    \"kotlin\",\n    \"php\"\n  ],\n  \"manual\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1057",
        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: D\u00e9j\u00e0-Vu (_O(N)_ Space)\n\n**Intuition**\n\nWe are given a list of shuffled nodes from a N-ary tree.\nAnd we are asked to find the root node, which would be located anywhere in the list.\n\nGiven a node, we can obtain references to the child nodes.\nHowever, we do not have the reference to its parent node.\n\n>One **characteristic** that distinguishes a root node from rest of the nodes, \nis that the root node does not have any parent node, _i.e._ the in-degree of the root node is zero, if we view the tree as a graph.\n\nBased on the above insight, we could rephrase the problem as follows:\n>Given a list of nodes, we are asked to find the node with **_in-degree_** of zero.\n\n![graph](../Figures/1506/1506_graph_indegree.png)\n\nTo accomplish the above task, one of the most intuitive approaches would be that we _traverse_ each element in the list and for each element we visit each of its child nodes.\n\nAny node that is __seen__ as a child node would have an in-degree of one, hence it cannot be the root node.\n\n>In other words, if we visit all the nodes and all the _child nodes_, then the root node would be the only node that we would not be seen as a child node.\n\n**Algorithm**\n\nGiven the above intuition, there are several ways to implement the idea.\n\nHere we give one approach which has a space complexity of $$\\mathcal{O}(N)$$ (where $$N$$ is the length of the input list).\n\nWe can use a Hashset (named as `seen`) to keep track of all the **child** nodes that we visit, then at the end the root would not be in this set.\nWe could find out the root node with __two iterations__ as follows:\n\n- As the first iteration, we traverse the elements in the input list.\nFor each element, we put its child nodes into the hashset `seen`.\nSince the value of each node is unique, we could either put the node itself or simply its value into the hashset.\n\n- Then, we visit the list once again. \nThis time, we have all the child nodes in the hashset.\nOnce we come across any node that is **NOT** in the hashset, then this is the root node that we are looking for.\n\n\n<iframe src=\"https://leetcode.com/playground/3BMQ8fKr/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"3BMQ8fKr\"></iframe>\n\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input list, which is also the number of nodes in the N-ary tree.\n\n- Time Complexity: $$\\mathcal{O}(N)$$\n\n    - In the first iteration, we visit each node as well as its child nodes.\n    For the non-root node, it would be visited twice exactly.\n    While for the root node, it would be visited exactly once.\n    Therefore, the time complexity for this part is $$\\mathcal{O}(N + N - 1) = \\mathcal{O}(N)$$.\n\n    - As to the second iteration, in the worst case, we would run through the entire list to find the root node.\n    Hence the time complexity for this part is $$\\mathcal{O}(N)$$.\n\n    - To sum up, the overall time complexity of the algorithm is $$\\mathcal{O}(N) + \\mathcal{O}(N) = \\mathcal{O}(N)$$.\n\n\n- Space Complexity: $$\\mathcal{O}(N)$$\n\n    - We used a hashset to keep track of all the child nodes.\n    Therefore, the number of elements contained in the set would be $$(N-1)$$ exactly.\n\n    - As a result, the space complexity of the algorithm is $$\\mathcal{O}(N)$$.\n\n\n---\n#### Approach 2: YOLO (You Only Look Once)\n\n**Intuition**\n\nAs a follow-up question, we are asked to solve the problem in **constant** space complexity and linear time complexity.\n\nWe have achieved the linear time complexity in the above approach but with a linear space complexity.\n\nSo now the question is how we can reduce the *space complexity* from linear to constant.\n\nActually, we could build upon the insight from the above approach, as follows:\n>If we visit all the nodes and all the _child nodes_, then the root node would be the only node that we visit **once and once only**.\nThe rest of the nodes would be visited **twice**.\n\nBased on the above insight, we could transform the problem into an equivalent problem as follows:\n>Given a list of numbers where some of the numbers appear twice, we are asked to find the number that appear only once.\n\n![list with duplicates](../Figures/1506/1506_list_with_duplicates.png)\n\nEach number corresponds to the value of a node.\nEach appearance of the number corresponds to a visit of the node.\nThe value of root value appears once while the values of other nodes appear twice.\n\n**Algorithm**\n\nAgain, there are several approaches to implement the above idea.\nHere we present a solution with the operations of addition and deduction.\nOne could replace the addition and deduction operations with the `XOR` operation, as one will see later.\n\n>The idea is that we use an integer (`value_sum`) to keep track of the sum of node values.\nMore specifically, we add the value of each node to `value_sum` and we deduct the value of each _child node_ from the `value_sum`.\nAt the end, the `value_sum` would be the value of the root node.\n\nThe rational is that the values of non-root nodes are __cancelled out__ during the above addition and deduction operations, _i.e._ the value of a non-root node is added once as a parent node but deducted as a child node.\n\nFor this idea to work, an important **_condition_** is that the values of all nodes are unique, as specified in the problem.\n\nStill, we could find the root node with two iterations:\n\n- In the first iteration, we traverse each node in the list, we add the value of the node to the `value_sum`.\nMoreover, we deduct the value of its child nodes from the `value_sum`.\n\n- At the end of the first iteration, the `value_sum` would become the value of the root node, as we discussed before.\n\n- Once we know the value of the root node, _i.e._ `value_sum`, we can run a second iteration on the list to find out the root node.\n\nHere are some sample implementations which are inspired from the post of [Anonymouso](https://leetcode.com/problems/find-root-of-n-ary-tree/discuss/726453/Java-O(n)-time-with-O(n)-space-and-O(1)-space-follow-up) in the discussion forum.\n\n<iframe src=\"https://leetcode.com/playground/Ktt86mwe/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"Ktt86mwe\"></iframe>\n\nHere are two characteristics about the `XOR` operator:\n- `A XOR A = 0`\n- `0 XOR A = A`\n\nAs one can see, these characteristics can serve as the same _cancelling-out_ effect as the addition and deduction operations.\n\nGiven a list of `[ABA]` where the root node is `B`, we can perform an accumulated XOR operation on each element to obtain the value of root node, _i.e._ `A XOR B XOR A = B`.\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input list, which is also the number of nodes in the N-ary tree.\n\n- Time Complexity: $$\\mathcal{O}(N)$$\n\n    - In the first iteration, we visit each node as well as its child nodes.\n    Therefore, the time complexity for this part is $$\\mathcal{O}(2 * N) = \\mathcal{O}(N)$$.\n\n    - As to the second iteration, in the worst case, we would run through the entire list to find the root node.\n    Hence the time complexity for this part is $$\\mathcal{O}(N)$$.\n\n    - To sum up, the overall time complexity of the algorithm is $$\\mathcal{O}(N) + \\mathcal{O}(N) = \\mathcal{O}(N)$$.\n\n\n- Space Complexity: $$\\mathcal{O}(1)$$\n\n    - We used a variable (`value_sum`) which is of constant-space, regardless of the input.\n\n\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1012",
            "count": 42,
            "average": "4.976",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "find-root-of-n-ary-tree",
    "playgroundData": {
        "3BMQ8fKr": {
            "playground": {
                "testcaseInput": "",
                "name": "find-root-of-n-ary-tree-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "Ktt86mwe": {
            "playground": {
                "testcaseInput": "",
                "name": "find-root-of-n-ary-tree-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}