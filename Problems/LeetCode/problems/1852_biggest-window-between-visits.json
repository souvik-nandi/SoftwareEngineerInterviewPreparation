{
    "id": "1852",
    "question": {
        "questionId": "1852",
        "questionFrontendId": "1709",
        "boundTopicId": null,
        "title": "Biggest Window Between Visits",
        "titleSlug": "biggest-window-between-visits",
        "content": "<p>Table: <code>UserVisits</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user_id     | int  |\n| visit_date  | date |\n+-------------+------+\nThis table does not have a primary key.\nThis table contains logs of the dates that users visited a certain retailer.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Assume today&#39;s date is <code>&#39;2021-1-1&#39;</code>.</p>\n\n<p>Write an SQL query that will, for each <code>user_id</code>, find out the largest <code>window</code> of days between each visit and the one right after it (or today if you are considering the last visit).</p>\n\n<p>Return the result table ordered by <code>user_id</code>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nUserVisits table:\n+---------+------------+\n| user_id | visit_date |\n+---------+------------+\n| 1       | 2020-11-28 |\n| 1       | 2020-10-20 |\n| 1       | 2020-12-3  |\n| 2       | 2020-10-5  |\n| 2       | 2020-12-9  |\n| 3       | 2020-11-11 |\n+---------+------------+\n<strong>Output:</strong> \n+---------+---------------+\n| user_id | biggest_window|\n+---------+---------------+\n| 1       | 39            |\n| 2       | 65            |\n| 3       | 51            |\n+---------+---------------+\n<strong>Explanation:</strong> \nFor the first user, the windows in question are between dates:\n    - 2020-10-20 and 2020-11-28 with a total of 39 days. \n    - 2020-11-28 and 2020-12-3 with a total of 5 days. \n    - 2020-12-3 and 2021-1-1 with a total of 29 days.\nMaking the biggest window the one with 39 days.\nFor the second user, the windows in question are between dates:\n    - 2020-10-5 and 2020-12-9 with a total of 65 days.\n    - 2020-12-9 and 2021-1-1 with a total of 23 days.\nMaking the biggest window the one with 65 days.\nFor the third user, the only window in question is between dates 2020-11-11 and 2021-1-1 with a total of 51 days.\n</pre>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 121,
        "dislikes": 7,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Users With Two Purchases Within Seven Days\", \"titleSlug\": \"users-with-two-purchases-within-seven-days\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "{\"headers\":{\"UserVisits\":[\"user_id\",\"visit_date\"]},\"rows\":{\"UserVisits\":[[\"1\",\"2020-11-28\"],[\"1\",\"2020-10-20\"],[\"1\",\"2020-12-3\"],[\"2\",\"2020-10-5\"],[\"2\",\"2020-12-9\"],[\"3\",\"2020-11-11\"]]}}",
        "categoryTitle": "Database",
        "contributors": [],
        "topicTags": [
            {
                "name": "Database",
                "slug": "database",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"1\": [], \"2\": [], \"3\": []}",
        "codeSnippets": [
            {
                "lang": "MySQL",
                "langSlug": "mysql",
                "code": "# Write your MySQL query statement below\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "MS SQL Server",
                "langSlug": "mssql",
                "code": "/* Write your T-SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Oracle",
                "langSlug": "oraclesql",
                "code": "/* Write your PL/SQL query statement below */\n",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"11.9K\", \"totalSubmission\": \"15.4K\", \"totalAcceptedRaw\": 11937, \"totalSubmissionRaw\": 15408, \"acRate\": \"77.5%\"}",
        "hints": [],
        "solution": null,
        "status": null,
        "sampleTestCase": "{\"headers\":{\"UserVisits\":[\"user_id\",\"visit_date\"]},\"rows\":{\"UserVisits\":[[\"1\",\"2020-11-28\"],[\"1\",\"2020-10-20\"],[\"1\",\"2020-12-3\"],[\"2\",\"2020-10-5\"],[\"2\",\"2020-12-9\"],[\"3\",\"2020-11-11\"]]}}",
        "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists UserVisits(user_id int, visit_date date)\"\n  ],\n  \"mssql\": [\n    \"Create table UserVisits(user_id int, visit_date date)\"\n  ],\n  \"oraclesql\": [\n    \"Create table UserVisits(user_id int, visit_date date)\",\n    \"ALTER SESSION SET nls_date_format='YYYY-MM-DD'\"\n  ],\n  \"database\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [
            "Create table If Not Exists UserVisits(user_id int, visit_date date)",
            "Truncate table UserVisits",
            "insert into UserVisits (user_id, visit_date) values ('1', '2020-11-28')",
            "insert into UserVisits (user_id, visit_date) values ('1', '2020-10-20')",
            "insert into UserVisits (user_id, visit_date) values ('1', '2020-12-3')",
            "insert into UserVisits (user_id, visit_date) values ('2', '2020-10-5')",
            "insert into UserVisits (user_id, visit_date) values ('2', '2020-12-9')",
            "insert into UserVisits (user_id, visit_date) values ('3', '2020-11-11')"
        ],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": false,
        "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": null,
    "questionCode": "biggest-window-between-visits",
    "playgroundData": null
}