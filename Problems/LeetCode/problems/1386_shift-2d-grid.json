{
    "id": "1386",
    "question": {
        "questionId": "1386",
        "questionFrontendId": "1260",
        "boundTopicId": null,
        "title": "Shift 2D Grid",
        "titleSlug": "shift-2d-grid",
        "content": "<p>Given a 2D <code>grid</code> of size <code>m x n</code>&nbsp;and an integer <code>k</code>. You need to shift the <code>grid</code>&nbsp;<code>k</code> times.</p>\n\n<p>In one shift operation:</p>\n\n<ul>\n\t<li>Element at <code>grid[i][j]</code> moves to <code>grid[i][j + 1]</code>.</li>\n\t<li>Element at <code>grid[i][n - 1]</code> moves to <code>grid[i + 1][0]</code>.</li>\n\t<li>Element at <code>grid[m&nbsp;- 1][n - 1]</code> moves to <code>grid[0][0]</code>.</li>\n</ul>\n\n<p>Return the <em>2D grid</em> after applying shift operation <code>k</code> times.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/05/e1.png\" style=\"width: 400px; height: 178px;\" />\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 1\n<strong>Output:</strong> [[9,1,2],[3,4,5],[6,7,8]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/05/e2.png\" style=\"width: 400px; height: 166px;\" />\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\n<strong>Output:</strong> [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> <code>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 9\n<strong>Output:</strong> [[1,2,3],[4,5,6],[7,8,9]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m ==&nbsp;grid.length</code></li>\n\t<li><code>n ==&nbsp;grid[i].length</code></li>\n\t<li><code>1 &lt;= m &lt;= 50</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>-1000 &lt;= grid[i][j] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= k &lt;= 100</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 1434,
        "dislikes": 301,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n1\n[[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]]\n4\n[[1,2,3],[4,5,6],[7,8,9]]\n9",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Matrix",
                "slug": "matrix",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Simulation",
                "slug": "simulation",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public List<List<Integer>> shiftGrid(int[][] grid, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def shiftGrid(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** shiftGrid(int** grid, int gridSize, int* gridColSize, int k, int* returnSize, int** returnColumnSizes){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public IList<IList<int>> ShiftGrid(int[][] grid, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[][]}\n */\nvar shiftGrid = function(grid, k) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[][]} grid\n# @param {Integer} k\n# @return {Integer[][]}\ndef shift_grid(grid, k)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func shiftGrid(_ grid: [[Int]], _ k: Int) -> [[Int]] {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func shiftGrid(grid [][]int, k int) [][]int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def shiftGrid(grid: Array[Array[Int]], k: Int): List[List[Int]] = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun shiftGrid(grid: Array<IntArray>, k: Int): List<List<Int>> {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn shift_grid(grid: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function shiftGrid($grid, $k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function shiftGrid(grid: number[][], k: number): number[][] {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (shift-grid grid k)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof (listof exact-integer?)))\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec shift_grid(Grid :: [[integer()]], K :: integer()) -> [[integer()]].\nshift_grid(Grid, K) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec shift_grid(grid :: [[integer]], k :: integer) :: [[integer]]\n  def shift_grid(grid, k) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"86.3K\", \"totalSubmission\": \"126.9K\", \"totalAcceptedRaw\": 86343, \"totalSubmissionRaw\": 126865, \"acRate\": \"68.1%\"}",
        "hints": [
            "Simulate step by step. move grid[i][j] to grid[i][j+1]. handle last column of the grid.",
            "Put the matrix row by row to a vector. take k % vector.length and move last k of the vector to the beginning. put the vector to the matrix back the same way."
        ],
        "solution": {
            "id": "848",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[[1,2,3],[4,5,6],[7,8,9]]\n1",
        "metaData": "{\n  \"name\": \"shiftGrid\",\n  \"params\": [\n    {\n      \"name\": \"grid\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"k\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<list<integer>>\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "875",
            "date": "2022-04-11",
            "incompleteChallengeCount": 30,
            "streakCount": 0,
            "type": "DAILY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "848",
        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Simulation\r\n\r\n**Intuition**\r\n\r\nWe are given instructions on how to apply the transformation. Therefore, we could just repeat applying the transformation $$k$$ times.\r\n\r\n**Algorithm**\r\n\r\nReading explanations with lots of notation and array indexes can be confusing, and there is a lot of room for misunderstanding. A good first step might be to draw a picture (a rough sketch on a whiteboard would be fine) of each of the 3 cases to be certain that you understand them.\r\n\r\n*Element at grid[i][j] moves to grid[i][j + 1].*\r\n\r\n![Diagram showing case #1.](../Figures/1260/case1.png)\r\n\r\n*Element at grid[i][n - 1] moves to grid[i + 1][0].*\r\n\r\n![Diagram showing case #2.](../Figures/1260/case2.png)\r\n\r\n*Element at grid[m - 1][n - 1] moves to grid[0][0].*\r\n\r\n![Diagram showing case #3.](../Figures/1260/case3.png)\r\n\r\nThen, $$k$$ times, we need to create a new 2D array and follow the given rules to move the values. If we're using Java, we'll also need to then convert the output from a 2D Array to a 2D list.\r\n\r\n<iframe src=\"https://leetcode.com/playground/RxxVT4de/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RxxVT4de\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(n \\cdot m \\cdot k)$$, where the grid size is $$n \\cdot m$$ and we need to apply the transform $$k$$ times.\r\n\r\n* Space Complexity: $$O(n \\cdot m)$$. We are creating a new array in each iteration of the loop. We only keep track of at most 2 arrays at a time, though. The rest are garbage collected/ free'd.\r\n\r\n<br />\r\n\r\n---\r\n\r\n#### Approach 2: Simulation, Recycling Same Array\r\n\r\n**Intuition**\r\n\r\nThe previous approach created `k` new arrays. We can simplify it to do the movements in-place. To do this, let's look at how an individual value moves around the grid. Looking at the movement of a single value is a good strategy for getting started on 2D grid translation problems. The value we're looking at is the yellow square. The numbers show the order in which it moved into each cell.\r\n\r\n!?!../Documents/1260.json:960,540!?!\r\n\r\nThe movement is a straightforward pattern. The value moves in \"reading\" order, and then when it gets to the bottom right, it wraps around to the top left.\r\n\r\n![Arrow diagram showing the movement of the cell.](../Figures/1260/movement_pattern.png)\r\n\r\nWe can simulate this wrapping in-place by repeatedly moving each value \"forward\" by one place.\r\n\r\n**Algorithm**\r\n\r\nFor each step, we'll need to keep track of the current value we're moving forward. For Java, we'll need to finish by copying the input into a 2D list. If you were writing this algorithm in your own Java code and wanted it to be in-place, you would choose the same input and output type.\r\n\r\n<iframe src=\"https://leetcode.com/playground/vdpHcmgq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"vdpHcmgq\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(n \\cdot m \\cdot k)$$, where the grid size is $$n \\cdot m$$ and we need to apply the transform $$k$$ times.\r\n\r\n* Space Complexity: Depends on whether or not the input/ output types are the same. Here on Leetcode, this depends on the language you're using.\r\n\r\n    * *If the input and output are the same type* (Python and C++): $$O(1)$$. We aren't creating any new data structures.\r\n\r\n    * *If the input and output are different types* (Java): $$O(n \\cdot m)$$. We're creating a single `n x m` 2D list.\r\n\r\nIf you were using this algorithm as part of your own code, you'd choose input and output types based on your requirements.\r\n\r\n<br />\r\n\r\n---\r\n\r\n#### Approach 3: Using Modulo Arithmetic\r\n\r\n**Intuition**\r\n\r\n*Note that a solution that uses modulo arithmetic would probably be considered as \"medium\" level.*\r\n\r\nIf you're not familiar with the modulo operator, then think back to when you learned division in school. Before you learned about decimals and fractions, you probably had to determine the *quotient* and the *remainder*. For example, $$127 / 19$$ would be $$6$$, remainder $$13$$ because $$6 * 19 + 13 = 127$$. The modulo operator gives you the *remainder* if you were to do division in this way.\r\n\r\nFor the problem constraints given here, $$k$$ is never more than $$100$$. For such a low $$k$$, the simulation approach is acceptable. However, an interviewer will probably expect you to further optimize your solution so that it runs in $$O(n * m)$$ time instead of $$O(k * n * m)$$ time.\r\n\r\nIn addition to the pattern we observed in the previous approach, another good strategy for 2D grid problems that we'll use is calculating the new locations as 2 separate steps.\r\n\r\n1. What is the new column?\r\n2. What is the new row?\r\n\r\nLet's figure out how to do each of these steps with an example. We'll use a grid with 3 rows and 5 columns, and we'll look at the value located at $$i = 1$$ and $$j = 3$$. We'll also use $$k = 88$$.\r\n\r\n![Picture of the example we'll be working through.](../Figures/1260/example.png)\r\n\r\n*Step 1: Calculating the new column for the value*\r\n\r\nThe value's column changes exactly $$k$$ times. Every step, it moves forward by 1 column.\r\n\r\nWhich *column* will the value be in when it is moved forward $$88$$ times? Well, it starts in column $$3$$, and if the grid had an infinite number of columns, it would be in column $$3 + 88 = 91$$ at the end. However, the grid isn't infinite. We need to take into account the \"wrap around\".\r\n\r\n**The key observation is that** every 5 steps will move the value back to the same column it started in. Therefore, we want to repeatedly subtract $$5$$ from $$91$$ until we have a value less than $$5$$ left. This is exactly what the *modulo operator* does for us. It gives us what is left after these repeated subtractions (it goes about it in a very efficient way though!). $$91 % 5 = 1$$. Therefore, we know that this value's new position is *in column 0*.\r\n\r\n*Step 2: Calculating the new row for the value*\r\n\r\nNow we need to determine the new *row* that the value is in. The *row* the value is in doesn't change as often as the *column* does. For example, here the column changes but the row stays the same.\r\n\r\n![Diagram showing a case where the row does not change.](../Figures/1260/case1.png)\r\n\r\nAnd here, both the row and the column change.\r\n\r\n![Diagram showing a case where the row changes.](../Figures/1260/case2.png)\r\n\r\nThe value only moves down a row when it is moving from the last column to the first column. Therefore, determining the new row will require us to calculate how many times the value moves from the last to first column.\r\n\r\nWhen we calculated the new *column* for our example, we only looked at the ***remainder*** of $$91 / 5$$, which was $$1$$. This time however, we want to look at the ***quotient***, because the ***quotient*** tells us *how many times* we removed $$5$$ from $$91$$.\r\n\r\nDoing this calculation, we get $$91 / 5 = 18$$ (This is just division with truncation, like how it's done in programming languages).\r\n\r\nIf the number of rows was infinite, the final row would be $$1 + 18 = 19$$, as we would simply add the number of row increments to the starting row.\r\n\r\nBut of course the number of rows is not infinite, so we need to do the same thing we did to the column. Because there are 3 rows, we do $$19 % 3 = 1$$. The value will therefore end in row 1.\r\n\r\nWe have calculated that for the example above, after 88 increments, the value that started at $$(1, 3)$$ will now be at $$(1, 0)$$. We can do the same calculations for the other $$14 values in the grid$$.\r\n\r\n*Coming up with general formulae*\r\n\r\nWe now need to pull all of this together into some formulae that we can use regardless of the starting position, $$k$$ value, and size of the grid.\r\n\r\nFor the column, we calculated what column it'd end up in if the grid was infinite, and then we took it modulo the total number of columns. As a general formula, this is:\r\n\r\n```\r\nnew_col = (j + k) % num_cols\r\n```\r\n\r\nWhere $$j$$ is the column the value starts in and $$num_cols$$ is the total number of columns in the grid.\r\n\r\nThe row was a little more complicated; we needed to tackle it in several parts. Firstly, we calculated how many times it would move down by 1 row. Secondly, we calculated what the infinite row would be and then took that modulo the number of rows. This gives us the following formula:\r\n\r\n```\r\nnumber_of_increments = (j + k) / num_cols\r\nnew_row = (i + number_of_increments) % num_rows\r\n```\r\n\r\n\r\n**Algorithm**\r\n\r\n<iframe src=\"https://leetcode.com/playground/dWjnLT7R/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"dWjnLT7R\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(n \\cdot m)$$, where the grid size is $$n \\cdot m$$. This time, we're calculating where each value moves to in $$O(1)$$ time instead of $$O(k)$$ time. We can't do better than this in the average case, because each of the $$n \\cdot m$$ values needs to be moved to its new location.\r\n\r\n* Space Complexity: $$O(n \\cdot m)$$. We are creating a new 2D list to write the output into.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "806",
            "count": 31,
            "average": "4.516",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "shift-2d-grid",
    "playgroundData": {
        "RxxVT4de": {
            "playground": {
                "testcaseInput": "",
                "name": "shift-2d-grid-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "vdpHcmgq": {
            "playground": {
                "testcaseInput": "",
                "name": "shift-2d-grid-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "dWjnLT7R": {
            "playground": {
                "testcaseInput": "",
                "name": "shift-2d-grid-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}