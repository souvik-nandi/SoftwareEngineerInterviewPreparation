{
    "id": "1634",
    "question": {
        "questionId": "1634",
        "questionFrontendId": "1490",
        "boundTopicId": null,
        "title": "Clone N-ary Tree",
        "titleSlug": "clone-n-ary-tree",
        "content": "<p>Given a <code>root</code> of an N-ary tree, return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> (clone) of the tree.</p>\n\n<p>Each node in the n-ary tree contains a val (<code>int</code>) and a list (<code>List[Node]</code>) of its children.</p>\n\n<pre>\nclass Node {\n    public int val;\n    public List&lt;Node&gt; children;\n}\n</pre>\n\n<p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> [1,null,3,2,4,null,5,6]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li>\n\t<li>The total number of nodes is between <code>[0, 10<sup>4</sup>]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up: </strong>Can your solution work for the <a href=\"https://leetcode.com/problems/clone-graph/\" target=\"_blank\">graph problem</a>?",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 320,
        "dislikes": 14,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Clone Graph\", \"titleSlug\": \"clone-graph\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Copy List with Random Pointer\", \"titleSlug\": \"copy-list-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Clone Binary Tree With Random Pointer\", \"titleSlug\": \"clone-binary-tree-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[1,null,3,2,4,null,5,6]\n[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Tree",
                "slug": "tree",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"1\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneTree(Node* root) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    \n    public Node() {\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val) {\n        val = _val;\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val,ArrayList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public Node cloneTree(Node root) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\"\"\"\n\nclass Solution(object):\n    def cloneTree(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: Node\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children if children is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneTree(self, root: 'Node') -> 'Node':",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n    \n    public Node() {\n        val = 0;\n        children = new List<Node>();\n    }\n\n    public Node(int _val) {\n        val = _val;\n        children = new List<Node>();\n    }\n    \n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\n\npublic class Solution {\n    public Node CloneTree(Node root) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * // Definition for a Node.\n * function Node(val, children) {\n *    this.val = val === undefined ? 0 : val;\n *    this.children = children === undefined ? [] : children;\n * };\n */\n\n/**\n * @param {Node|null} node\n * @return {Node|null}\n */\nvar cloneTree = function(root) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val=0, children=[])\n#         @val = val\n#         @children = children\n#     end\n# end\n\n# @param {Node} root\n# @return {Node}\ndef clone_tree(root)\n\t\nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func cloneTree(_ root: Node?) -> Node? {\n    \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc cloneTree(root *Node) *Node {\n\t\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def cloneTree(root: Node): Node = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun cloneTree(root: Node?): Node? {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return Node\n     */\n    function cloneTree($root) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "/**\n * Definition for Node.\n * class Node {\n *     val: number\n *     children: Node[]\n *     constructor(val?: number, children?: Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.children = (children===undefined ? [] : children)\n *     }\n * }\n */\n\nfunction cloneTree(root: Node | null): Node | null {\n    \n};",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"22.1K\", \"totalSubmission\": \"26.4K\", \"totalAcceptedRaw\": 22146, \"totalSubmissionRaw\": 26441, \"acRate\": \"83.8%\"}",
        "hints": [
            "Traverse the tree, keep a hashtable with you and create a clone node for each node in the tree.",
            "Start traversing the original tree again and connect each child pointer in the cloned tree the same way as the original tree with the help of the hashtable."
        ],
        "solution": {
            "id": "1304",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[1,null,3,2,4,null,5,6]",
        "metaData": "{\n  \"name\": \"cloneTree\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": true,\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"python3\",\n    \"javascript\",\n    \"csharp\",\n    \"typescript\",\n    \"ruby\",\n    \"swift\",\n    \"golang\",\n    \"scala\",\n    \"kotlin\",\n    \"php\"\n  ]\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "860",
            "date": "2022-03-01",
            "incompleteChallengeCount": 31,
            "streakCount": 0,
            "type": "WEEKLY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1304",
        "content": "[TOC]\n\n## Solution\n\n---\n#### Overview\n\nThe problem asks us to make a clone of a tree.\nThe task is not as intuitive as making a copy of an object.\nBy default, when we create a new object by copying another object, we simply copy the **primitive** values within the object.\nThis is called **_shallow copy_**.\nThe problem with the shallow copy is that if the object contains references or pointers to other objects, the newly-copied object will point to the same objects rather than making another copies of these referred objects.\nIn constrast to the _shallow copy_, the **_deep copy_** refers to the scenario that we make substantial copies of these referred objects.\nFor the tree data structure, the referred objects are the child nodes inside a node.\nIn order to make a deep copy of a node, not only we need to make a copy of the node value itself, but also we need to make substantial copies of its child nodes.\n\n>To solve the problem, the overall idea is that we traverse the nodes one by one and for each node we make a **_deep copy_** of it.\n\nWhen it comes to the traversal of tree, one cannot overlook the technique of **DFS** (Depth-First Search) and **_BFS_** (Breadth-First Search).\nIndeed, in this article, we will cover three approaches namely **_recursion_**, **_DFS_** and **_BFS_**.\n\nAs one will see later, there is a fine line between the approach using _recursion_ and the approach using _DFS_. Some of you might consider the _recursion_ approach the same as the _DFS_.\nIndeed, one can consider our _recursion_ approach as _DFS_ that is implemented in the form of recursion, as opposed to the _DFS_ in the form of iteration.\n\nDespite the stark contrast between the ideas of _DFS_ and _BFS_ approaches, their implementations can be quite similar.\nIn fact, as we will discover later, they are almost _identical_.\n\n\n---\n#### Approach 1: Recursion\n\n**Intuition**\n\nWhen it comes to problems that require us to traverse a tree, *recursion* is a concept that we cannot overlook.\nFirst of all, tree data structures can be defined using recursion, _i.e._ a tree consists of a set of sub-trees, and each of those sub-trees consists of another set of sub-trees, and so on.\nTherefore, it is only natural that often we can use _recursion_ to solve tree-related problems.\nThis is also the case for our problem here.\n\nTo better understand how we can apply recursion here, let's rephrase our problem in a _recursive_ manner as follows:\n>To clone a tree, we can first clone the root node, then we can clone each _subtree_ **_recursively_** under the root node.\n\nIn addition to the _recursive_ relationship that we defined above, we need to define the **base cases** where no further recursion is invoked.\nThere are two base cases in our problem here:\n\n- **Case 1:** When the node is a leaf node (it does not have any child nodes), we only need to clone the node itself. The node does not have any subtrees, so no additional recursive calls are needed.\n\n- **Case 2:** When the node is empty, no clone is needed. Given case 1, this will only happen when the tree's root node is null.\n\nSince recursion is a fundamental topic that is required for many algorithms, we have two Explore Cards that cover concepts and applications related to recursion, namely [Recursion I](https://leetcode.com/explore/learn/card/recursion-i) and [Recursion II](https://leetcode.com/explore/learn/card/recursion-ii).\n\n\n**Note**, some may refer to this approach as **DFS** (Depth-First Search).\nHowever, here we have entitled the approach *recursion* because we conceptualize the approach from the perspective of recursion (as in the mathematical term) rather than from the perspective of the DFS algorithm.\nFurthermore, when talking about DFS, we typically emphasize the order of traversal.\nHowever, in this approach, the order of traversal does not play an essential role in solving the problem. As long as we traverse all nodes, we will produce a valid deep copy of the tree.\n\n\n**Algorithm**\n\nGiven the intuition above, we can **_literally_** translate it into implementation.\nDue to the mathematical nature of recursion, sometimes we can simply *express* the solution in only a few lines of _formula-like_ code.\nHere are a few steps to implement the recursive approach:\n\n- First, we check the base case when the given node in the input is null. In this case, we simply return null.\n\n- If the node is not null, we then make a copy of the node itself, by creating a new node and initializing it with the same value as the node.\n\n- Furthermore, if the node contains any child node, we then **_recursively_** clone each child node by invoking our target function here.\n\n- Finally, we return the cloned copy of the node as the returned value of our target function.\n\n\nHere are a few sample implementations, which should speak _louder_ and _clearer_ than the explanation in words.\n\n<iframe src=\"https://leetcode.com/playground/QncYfXd7/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"QncYfXd7\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of nodes in the input tree.\n\n- Time Complexity: $$O(M)$$\n\n    - We traverse each node in the tree once and only once.\n\n- Space Complexity: $$O(M)$$\n\n    - First of all, our function returns a deep copy of the original tree as the result. As a common convention, the space that is allocated for the result is usually excluded from the space complexity analysis.\n\n    - Within the recursive function, we do not allocate any extra space other than what is needed for the result.\n\n    - However, we should pay attention to the extra space cost in the function call stack incurred by the recursive calls. In some cases, the space cost can cause _stack overflow_ when the piled recursive calls exceed the memory limit.\n\n    - In the worst case for our recursion approach, the number of active recursive calls could equal the number of nodes in the tree (when the tree forms a line).\n    As a result, the space complexity incurred by the call stack is $$O(M)$$.\n\n\n---\n#### Approach 2: DFS with Iteration\n\n**Intuition**\n\nWe can consider the above recursive solution as a DFS approach where we traverse the nodes in a tree in a manner that prioritizes the depth.\n\nAs an alternative to implement the DFS approach, we can also implement it in an **_iterative_** manner.\n>The key idea is to simulate the function call stack with an actual **_stack_** data structure.\n\nThe stack data structure mainly serves two purposes:\n- Maintaining the order of DFS visits.\n- Keeping the context information for each visit.\n\nFor more details concerning the algorithm of DFS, one can refer to our Explore Card named [Queue & Stack](https://leetcode.com/explore/learn/card/queue-stack/232/practical-application-stack/).\n\n**Algorithm**\n\nTo implement the DFS approach with iteration, here are a few steps:\n\n- First, we create an empty stack, _e.g._ in Python we can simply use the `List` data structure.\n\n- Each element in the stack will be a pair of nodes `(old, new)`, _i.e._ one is the original node to copy and the other one is the newly-created clone.\n\n- We then build a loop around the stack. At each iteration, we pop one element `(old, new)` out of the stack. Then for each child node from the original node, we make a clone and append the child node along with the clone into the stack.\n\n- The loop will terminate when there are no more elements in the stack, which means that we have traversed all the nodes in the tree.\n\n\n<iframe src=\"https://leetcode.com/playground/WoKkjUYW/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"WoKkjUYW\"></iframe>\n\nFor illustration, here we show a tree example and highlight the order of visiting for each node when we apply the DFS algorithm, as follows:\n\n![DFS](../Figures/1490/1490_dfs.png)\n\nAs the name _\"depth-first\"_ sugguests, we prioritize the visits of nodes following the depth of a branch.\nBefore following the lead of another branch, we will fully explore all nodes in one branch.\nFor example, before visiting the node `4`, we first visit the branch of its sibling node `2`.\nAs a result, the order of nodes that we visit before the node `4` is `[1, 2, 3]`, starting from the root node `1`.\n\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of nodes in the input tree and $$N$$ be the maximum number of children that a node can have.\n\n- Time Complexity: $$O(M)$$\n\n    - Same as the recursion approach, we traverse each node in the tree once and only once.\n\n- Space Complexity: $$O(\\log_{n}{M})$$\n\n    - We use a stack data structure to keep track of the nodes we visit during the DFS traversal. Due to the nature of DFS, the maximal size of stack is _proportional_ to the **_depth_** of the tree. For a full N-nary tree, the total number of nodes can be represented with the depth of the tree as $$M = \\frac{(n^d - 1)}{n-1}$$, where $$d$$ is the depth of the tree. As a result, the space complexity of the stack is $$d ~= O(\\log_{n}{M})$$.\n\n    - Note that, the worst case scenario in our recursion approach where the tree forms a line is **not** the worst case for our DFS approach in terms of space complexity.\n    On the contrary, when the tree forms a line, the space complexity for our DFS approach becomes constant.\n\n\n---\n#### Approach 3: BFS\n\n**Intuition**\n\nMore often than not, problems that can be solved using the DFS algorithm can also be solved using the BFS (Breadth-First Search) algorithm.\nThis is indeed the case for this problem.\n\nLet us go over the problem again. We are asked to clone the entire tree.\nTo clone the tree, we need to traverse each node one by one and make a deep copy.\n>However, the order of traversal does not play an essential role in solving this problem.\nIndeed, we can either clone the tree following the **lineage** order (_i.e._ DFS) or level by level (_i.e._ BFS).\n\nAs a comparison, with the same example tree in the DFS approach, we highlight the order in which each node is visited when we apply the BFS algorithm, as follows:\n\n![BFS](../Figures/1490/1490_bfs.png)\n\n**Algorithm**\n\nSimilar to the DFS algorithm, there are several ways to implement the BFS algorithm.\nWe provide some templates of BFS implementation in our [Queue & Stack Explore Card](https://leetcode.com/explore/learn/card/queue-stack/231/practical-application-queue/).\n\nAs a matter of fact, one of the implementations of BFS is rather similar to the above **DFS Iteration** approach.\n>We can simply replace the **_stack_** data structure in the DFS approach with the **_queue_** data structure, which will turn the approach into **BFS**.\n\nDue to the **FIFO** (First-In First-Out) characteristic of the queue data structure, as opposed to the **LIFO** (Last-In First-Out) characteristic of the stack data structure, when maintaining the order with queue, we will end up traversing the tree _level by level_.\n\n\n<iframe src=\"https://leetcode.com/playground/XMgLAsUp/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"XMgLAsUp\"></iframe>\n\n\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of nodes in the input tree.\n\n- Time Complexity: $$O(M)$$\n\n    - Same as the above approaches, we traverse each node in the tree once and only once.\n\n- Space Complexity: $$O(M)$$\n\n    - Instead of the stack data structure, we apply the `queue` data structure to keep track of the nodes we visit during the BFS traversal.\n    At any moment, the queue contains no more than two levels of nodes in the tree.\n    Therefore, the space complexity of the queue is $$O(M)$$.\n\n\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1309",
            "count": 10,
            "average": "5.000",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "clone-n-ary-tree",
    "playgroundData": {
        "QncYfXd7": {
            "playground": {
                "testcaseInput": "",
                "name": "clone-n-ary-tree-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "WoKkjUYW": {
            "playground": {
                "testcaseInput": "",
                "name": "clone-n-ary-tree-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "XMgLAsUp": {
            "playground": {
                "testcaseInput": "",
                "name": "clone-n-ary-tree-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}