{
    "id": "1703",
    "question": {
        "questionId": "1703",
        "questionFrontendId": "1564",
        "boundTopicId": null,
        "title": "Put Boxes Into the Warehouse I",
        "titleSlug": "put-boxes-into-the-warehouse-i",
        "content": "<p>You are given two arrays of positive integers, <code>boxes</code> and <code>warehouse</code>, representing the heights of some boxes of unit width and the heights of <code>n</code> rooms in a warehouse respectively. The warehouse&#39;s rooms are labelled from <code>0</code> to <code>n - 1</code> from left to right where <code>warehouse[i]</code> (0-indexed) is the height of the <code>i<sup>th</sup></code> room.</p>\n\n<p>Boxes are put into the warehouse by the following rules:</p>\n\n<ul>\n\t<li>Boxes cannot be stacked.</li>\n\t<li>You can rearrange the insertion order of the boxes.</li>\n\t<li>Boxes can only be pushed into the warehouse from left to right only.</li>\n\t<li>If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.</li>\n</ul>\n\n<p>Return <em>the maximum number of boxes you can put into the warehouse.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/26/11.png\" style=\"width: 400px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> boxes = [4,3,4,1], warehouse = [5,3,3,4,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/26/12.png\" style=\"width: 280px; height: 242px;\" />\nWe can first put the box of height 1 in room 4. Then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. Lastly, we can put one box of height 4 in room 0.\nThere is no way we can fit all 4 boxes in the warehouse.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/26/21.png\" style=\"width: 400px; height: 202px;\" />\n<pre>\n<strong>Input:</strong> boxes = [1,2,2,3,4], warehouse = [3,4,1,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/26/22.png\" style=\"width: 280px; height: 202px;\" />\nNotice that it&#39;s not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3.\nAlso, for the last two rooms, 2 and 3, only boxes of height 1 can fit.\nWe can fit 3 boxes maximum as shown above. The yellow box can also be put in room 2 instead.\nSwapping the orange and green boxes is also valid, or swapping one of them with the red box.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> boxes = [1,2,3], warehouse = [1,2,3,4]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Since the first room in the warehouse is of height 1, we can only put boxes of height 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == warehouse.length</code></li>\n\t<li><code>1 &lt;= boxes.length, warehouse.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= boxes[i], warehouse[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 283,
        "dislikes": 20,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Put Boxes Into the Warehouse II\", \"titleSlug\": \"put-boxes-into-the-warehouse-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[4,3,4,1]\n[5,3,3,4,1]\n[1,2,2,3,4]\n[3,4,1,2]\n[1,2,3]\n[1,2,3,4]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Greedy",
                "slug": "greedy",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Sorting",
                "slug": "sorting",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int maxBoxesInWarehouse(vector<int>& boxes, vector<int>& warehouse) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int maxBoxesInWarehouse(int[] boxes, int[] warehouse) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def maxBoxesInWarehouse(self, boxes, warehouse):\n        \"\"\"\n        :type boxes: List[int]\n        :type warehouse: List[int]\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint maxBoxesInWarehouse(int* boxes, int boxesSize, int* warehouse, int warehouseSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int MaxBoxesInWarehouse(int[] boxes, int[] warehouse) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} boxes\n * @param {number[]} warehouse\n * @return {number}\n */\nvar maxBoxesInWarehouse = function(boxes, warehouse) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} boxes\n# @param {Integer[]} warehouse\n# @return {Integer}\ndef max_boxes_in_warehouse(boxes, warehouse)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func maxBoxesInWarehouse(_ boxes: [Int], _ warehouse: [Int]) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func maxBoxesInWarehouse(boxes []int, warehouse []int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def maxBoxesInWarehouse(boxes: Array[Int], warehouse: Array[Int]): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun maxBoxesInWarehouse(boxes: IntArray, warehouse: IntArray): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn max_boxes_in_warehouse(boxes: Vec<i32>, warehouse: Vec<i32>) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $boxes\n     * @param Integer[] $warehouse\n     * @return Integer\n     */\n    function maxBoxesInWarehouse($boxes, $warehouse) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function maxBoxesInWarehouse(boxes: number[], warehouse: number[]): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (max-boxes-in-warehouse boxes warehouse)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec max_boxes_in_warehouse(Boxes :: [integer()], Warehouse :: [integer()]) -> integer().\nmax_boxes_in_warehouse(Boxes, Warehouse) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec max_boxes_in_warehouse(boxes :: [integer], warehouse :: [integer]) :: integer\n  def max_boxes_in_warehouse(boxes, warehouse) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"13.2K\", \"totalSubmission\": \"19.7K\", \"totalAcceptedRaw\": 13203, \"totalSubmissionRaw\": 19712, \"acRate\": \"67.0%\"}",
        "hints": [
            "Sort the boxes in ascending order, try to process the box with the smallest height first."
        ],
        "solution": {
            "id": "1131",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[4,3,4,1]\n[5,3,3,4,1]",
        "metaData": "{\n  \"name\": \"maxBoxesInWarehouse\",\n  \"params\": [\n    {\n      \"name\": \"boxes\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"type\": \"integer[]\",\n      \"name\": \"warehouse\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "970",
            "date": "2022-06-29",
            "incompleteChallengeCount": 30,
            "streakCount": 0,
            "type": "WEEKLY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1131",
        "content": "[TOC]\n\n## Overview\n\nLet's think through an analogy first, that might be more relatable. Imagine that you are standing in front of a cave. The cave goes down into the earth, becoming narrower and then wider in various places. Additionally, you have several stones in hand -  of varying diameters. Your goal is to throw as many of the stones inside the cave as possible. Let's think about the strategy you would use.\n\nFirstly, if there is a bottleneck (a very narrow section) in the cave, then even if the cave becomes wider afterwards, the stone will get stuck right before the bottleneck. So for each position in the cave, the largest stone that we can insert is limited by the narrowest part of the cave before it. In other words, that position's _usable diameter_ is limited by the minimum diameter before it.\n\nSecondly, throwing a small stone earlier is always better than throwing it later, because if a small stone gets stuck, a larger stone will certainly get stuck, but the reverse is not true.\n\nTherefore, our strategy would be to throw in the smallest stone first.\n\nNow we can think of the stones as boxes, and the warehouse as the cave, where the height of each warehouse room corresponds to the diameter of the cave. The problem, and its solution, are now equivalent to the above analogy.\n\n</br>\n\n---\n\n#### Approach 1: Add Smallest Boxes to the Rightmost Warehouse Rooms\n\n**Intuition**\n\nWe will take a greedy approach to solve the problem. The intuition is that if each step follows the optimal strategy, then the overall arrangement of boxes will be optimal.\n\nImagine we have a box of height `h`, and we want to push it into the warehouse. We start pushing from the left, and we want to push it as far right as we can. The limiting factor on how far we can push it will be the *first* position in the warehouse we encounter that has a height *less than* `h`. We won't be able to push the box into this position, or into any position after it.\n\nTo make the algorithm more efficient, we will first preprocess the heights of the warehouse. Keeping in mind that the limiting factor for each position is the minimum height that comes before it, we update the height for each position so that it is no higher than this minimum. This essentially changes the warehouse array to a *weakly decreasing* array.\n\nWe then sort the boxes from shortest to tallest. Then, we take the shortest box remaining and push it as far right as possible through the warehouse (we have to stop when the next position is shorter than this box).\n\nBelow are the slides showing the greedy process.\n\n!?!../Documents/1564/1564_Approach1.json:960,560!?!\n\n**Algorithm**\n\nBecause lower heights for rooms on the left will block the entry of boxes into rooms on the right, we need to preprocess the array of warehouse heights such that it becomes a non-increasing sequence.\nThen, we start from the smallest box and the rightmost position of the warehouse.\nIf the current box can fit in the warehouse room, we increment the count by 1 and move on to the next box.  Otherwise, we move on to the next warehouse room and check if the box will fit there.\n\n\n<iframe src=\"https://leetcode.com/playground/VKFhMbLs/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"VKFhMbLs\"></iframe>\n\nLet $$n$$ be the number of boxes and $$m$$ be the number of rooms in the warehouse.\n\n* Time complexity: $$O(n  \\log(n) + m)$$ because we need to sort the boxes ($$O(n  \\log n)$$) and iterate over the warehouse rooms and boxes ($$O(n + m))$$).\n\n* Space complexity: $$O(1)$$ because we use two pointers to iterate over the boxes and warehouse rooms. If we are not allowed to modify the `warehouse` array, we will need $$O(m)$$ extra space.\n\n</br>\n\n---\n\n#### Approach 2: Add Largest Possible Boxes from Left to Right\n\n**Intuition**\n\nWhat if the interviewer requires us to use $$O(1)$$ space and does not allow us to modify the original warehouse array? This follow-up request excludes the possibility of preprocessing the input array as we did before.\n\nWe can take a slightly different greedy approach to tackle the problem.\nWe iterate over the warehouse rooms from left to right and use another pointer to iterate over boxes from the largest to the smallest.\nFor each position, we discard boxes that are too tall to fit in the current warehouse room, because they won't fit in any rooms further to the right.\nWe put the tallest possible box that can fit in this room, and save the remaining boxes for warehouse rooms further to the right.\n\n**Algorithm**\n\nFor this approach, we do not need to calculate the maximum height allowed for each warehouse room.  This is because boxes are sorted in decreasing order, so a room with a low height will automatically omit all boxes that are taller than it.\n\nWe start from the largest box and the leftmost position of the warehouse.\nWhen the box can fit in the warehouse room, we increment the count by 1. Otherwise, we discard the box and try a smaller one.\n\nBelow are the slides showing this new algorithm.\n\n!?!../Documents/1564/1564_Approach2.json:960,560!?!\n\n<iframe src=\"https://leetcode.com/playground/mxQAnKtV/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"mxQAnKtV\"></iframe>\n\nThe time and space complexity will be similar to Approach 1. Let $$n$$ be the number of boxes and $$m$$ be the number of rooms in the warehouse.\n\n* Time complexity: $$O(n \\log(n) + m)$$ because we need to sort the boxes and iterate over the warehouse rooms and boxes.\n\n* Space complexity: $$O(1)$$ because we use two pointers to iterate over the boxes and warehouse rooms.\n\nA related question is [LeetCode 1580. Put Boxes Into the Warehouse II](https://leetcode.com/problems/put-boxes-into-the-warehouse-ii/). I recommend you have a go at it once you're confident you understand this problem!",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1136",
            "count": 23,
            "average": "4.826",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "put-boxes-into-the-warehouse-i",
    "playgroundData": {
        "VKFhMbLs": {
            "playground": {
                "testcaseInput": "",
                "name": "put-boxes-into-the-warehouse-i-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "mxQAnKtV": {
            "playground": {
                "testcaseInput": "",
                "name": "put-boxes-into-the-warehouse-i-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}