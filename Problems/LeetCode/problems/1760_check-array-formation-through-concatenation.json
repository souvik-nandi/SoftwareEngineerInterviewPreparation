{
    "id": "1760",
    "question": {
        "questionId": "1760",
        "questionFrontendId": "1640",
        "boundTopicId": null,
        "title": "Check Array Formation Through Concatenation",
        "titleSlug": "check-array-formation-through-concatenation",
        "content": "<p>You are given an array of <strong>distinct</strong> integers <code>arr</code> and an array of integer arrays <code>pieces</code>, where the integers in <code>pieces</code> are <strong>distinct</strong>. Your goal is to form <code>arr</code> by concatenating the arrays in <code>pieces</code> <strong>in any order</strong>. However, you are <strong>not</strong> allowed to reorder the integers in each array <code>pieces[i]</code>.</p>\n\n<p>Return <code>true</code> <em>if it is possible </em><em>to form the array </em><code>arr</code><em> from </em><code>pieces</code>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [15,88], pieces = [[88],[15]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Concatenate [15] then [88]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [49,18,16], pieces = [[16,18,49]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Even though the numbers match, we cannot reorder pieces[0].\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [91,4,64,78], pieces = [[78],[4,64],[91]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Concatenate [91] then [4,64] then [78]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pieces.length &lt;= arr.length &lt;= 100</code></li>\n\t<li><code>sum(pieces[i].length) == arr.length</code></li>\n\t<li><code>1 &lt;= pieces[i].length &lt;= arr.length</code></li>\n\t<li><code>1 &lt;= arr[i], pieces[i][j] &lt;= 100</code></li>\n\t<li>The integers in <code>arr</code> are <strong>distinct</strong>.</li>\n\t<li>The integers in <code>pieces</code> are <strong>distinct</strong> (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).</li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 706,
        "dislikes": 118,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "[15,88]\n[[88],[15]]\n[49,18,16]\n[[16,18,49]]\n[91,4,64,78]\n[[78],[4,64],[91]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"CodeSignal\", \"slug\": \"codesignal\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"PhonePe\", \"slug\": \"phonepe\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    bool canFormArray(vector<int>& arr, vector<vector<int>>& pieces) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public boolean canFormArray(int[] arr, int[][] pieces) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def canFormArray(self, arr, pieces):\n        \"\"\"\n        :type arr: List[int]\n        :type pieces: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nbool canFormArray(int* arr, int arrSize, int** pieces, int piecesSize, int* piecesColSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public bool CanFormArray(int[] arr, int[][] pieces) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} arr\n * @param {number[][]} pieces\n * @return {boolean}\n */\nvar canFormArray = function(arr, pieces) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} arr\n# @param {Integer[][]} pieces\n# @return {Boolean}\ndef can_form_array(arr, pieces)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func canFormArray(_ arr: [Int], _ pieces: [[Int]]) -> Bool {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func canFormArray(arr []int, pieces [][]int) bool {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def canFormArray(arr: Array[Int], pieces: Array[Array[Int]]): Boolean = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun canFormArray(arr: IntArray, pieces: Array<IntArray>): Boolean {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn can_form_array(arr: Vec<i32>, pieces: Vec<Vec<i32>>) -> bool {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer[][] $pieces\n     * @return Boolean\n     */\n    function canFormArray($arr, $pieces) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function canFormArray(arr: number[], pieces: number[][]): boolean {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (can-form-array arr pieces)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) boolean?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec can_form_array(Arr :: [integer()], Pieces :: [[integer()]]) -> boolean().\ncan_form_array(Arr, Pieces) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec can_form_array(arr :: [integer], pieces :: [[integer]]) :: boolean\n  def can_form_array(arr, pieces) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"69.1K\", \"totalSubmission\": \"123.5K\", \"totalAcceptedRaw\": 69129, \"totalSubmissionRaw\": 123521, \"acRate\": \"56.0%\"}",
        "hints": [
            "Note that the distinct part means that every position in the array belongs to only one piece",
            "Note that you can get the piece every position belongs to naively"
        ],
        "solution": {
            "id": "1040",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[15,88]\n[[88],[15]]",
        "metaData": "{\n  \"name\": \"canFormArray\",\n  \"params\": [\n    {\n      \"name\": \"arr\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"type\": \"integer[][]\",\n      \"name\": \"pieces\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1040",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nOnce you notice that the integers in `pieces` are distinct, the problem becomes simple. We can use several different methods to match the target array without worrying about duplicates.\n\nBelow, we will discuss three methods: *One by One*, *Binary Search*, and *HashMap*. We recommend the third approach since it's the fastest and easiest to implement.\n\n---\n\n#### Approach 1: One by One\n\n**Intuition**\n\nLet's start with the most natural approach. \n\nFor a given array `arr`, we need to find all corresponding integers from `pieces` for all integers `arr[i]`.\n\nLet's go from left to right. Consider the leftmost element `arr[0]`. \n\nWe need to find a piece containing `arr[0]`. Of course, `arr[0]` should be at the start of the target piece.\n\nNow, we have an essential characteristic of our target piece: it should start with `arr[0]`.\n\nOK. With this characteristic, we can iterate over `pieces` to find our target piece. Since there is no duplicate integer in `pieces`, we will have at most one eligible piece.\n\n![Figure 1](../Figures/5554/5554_1.png)\n\nIf we can not find any, return `false`. If we found one, then the piece found should be the same as the beginning of `arr`.\n\nWe should check whether each integer in the piece matches the beginning of `arr`.\n\n![Figure 2](../Figures/5554/5554_2.png)\n\nIf none matched, we should return `false`. If all matched, then we found the first piece!\n\nNow, we move the `i` to the next unmatched index and repeat the operation above until we reach the end of `arr`.\n\n>Also, because we have constraint `sum(pieces[i].length) == arr.length` and no repeated number in `arr` or in `pieces`, if we ensure each integer in `arr` is matched, then each piece in `pieces` is matched.\n\nIn this case, we successfully found whether or not we can concatenate `pieces` in any order to form `arr`.\n\n**Algorithm**\n\n*Step 1:* Initialize an index `i` to record the current matching index in `arr`.\n\n*Step 2:* Iterate over `pieces` to find the piece starting with `arr[i]`. Return `false` if no match.\n\n*Step 3:* Use the matched piece to match `arr`'s sublist starting from `i` with the same length. Return `false` if any integer is different. \n\n*Step 4:* Increment the index `i`.\n\n*Step 5:* Repeat until `i` reaches the end of `arr`. Return `true`.\n\n> Challenge: Can you implement the code yourself without seeing our implementations?\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/moZXiRy2/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"moZXiRy2\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of `arr`. In the worst case, the size of `pieces` is $$\\mathcal{O}(N)$$.\n\n* Time Complexity: $$\\mathcal{O}(N^2)$$. The time to find the next piece is $$\\mathcal{O}(N)$$, and we need to find $$\\mathcal{O}(N)$$ pieces at most.\n\n* Space Complexity: $$\\mathcal{O}(1)$$, since no additional data structure is allocated.\n\n---\n\n#### Approach 2: Binary Search\n\n**Intuition**\n\nThe one by one search in _Approach 1_ is expensive. Can we make it faster?\n\nYes. We can sort the pieces according to their first element and use [Binary Search](https://en.wikipedia.org/wiki/Binary_search_algorithm) to find out the next target piece.\n\n![Figure 3](../Figures/5554/5554_3.png)\n\n**Algorithm**\n\n*Step 1:* Initialize an index `i` to record the current matching index in `arr`.\n\n*Step 2:* Use binary search to find the piece starting with `arr[i]`. Return `false` if no match.\n\n*Step 3:* Use the matched piece to match `arr`'s sublist starting from `i` with the same length. Return `false` if any integer is different. \n\n*Step 4:* Increment the index `i`.\n\n*Step 5:* Repeat until `i` reach the end of `arr`. Return `true`.\n\n> **Challenge**: Can you implement the code yourself without seeing our implementations?\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/8UYWcW23/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"8UYWcW23\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of `arr`. In the worst case, the size of `pieces` is $$\\mathcal{O}(N)$$.\n\n* Time Complexity: $$\\mathcal{O}(N\\log(N))$$. The time to find the next piece using Binary Search is $$\\mathcal{O}(\\log(N))$$, and we need to find $$\\mathcal{O}(N)$$ pieces at most.\n\n* Space complexity : $$\\mathcal{O}(N)$$, but can vary. Any extra space usage is dependent on the sorting algorithm's implementation. Most programming languages have a built-in sorting algorithm that uses $$\\mathcal{O}(N)$$ space, but others use $$\\mathcal{O}(\\log N)$$ space. \n\n---\n\n#### Approach 3: HashMap\n\n**Intuition**\n\nWe are still not satisfied with the binary search in _Approach 2_. Can we make it faster?\n\nYes. We can store the pieces according to their first element in a **hashmap**.\n\nIn this case, we can get our target piece in $$\\mathcal{O}(1)$$.\n\n![Figure 4](../Figures/5554/5554_4.png)\n\n**Algorithm**\n\n*Step 1:* Initialize a hashmap `mapping` to record piece's first integer and the whole piece mapping.\n\n*Step 2:* Initialize an index `i` to record the current matching index in `arr`.\n\n*Step 3:* Find the piece starting with `arr[i]` in `mapping`. Return `false` if no match.\n\n*Step 4:* Use the matched piece to match `arr`'s sublist starting from `i` with the same length. Return `false` if any integer is different. \n\n*Step 5:* Increment the index `i`.\n\n*Step 6:* Repeat until `i` reaches the end of `arr`. Return `true`.\n\n> Challenge: Can you implement the code yourself without seeing our implementations?\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/cJgAZLFu/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"cJgAZLFu\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of `arr`. In the worst case, the size of `pieces` is $$\\mathcal{O}(N)$$.\n\n* Time Complexity: $$\\mathcal{O}(N)$$. The time to find next piece is $$\\mathcal{O}(1)$$, and we need to find $$\\mathcal{O}(N)$$ pieces at most.\n\n* Space Complexity: $$\\mathcal{O}(N)$$, since we store a hashmap with $$\\mathcal{O}(N)$$ elements at most.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "995",
            "count": 16,
            "average": "5.000",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "check-array-formation-through-concatenation",
    "playgroundData": {
        "moZXiRy2": {
            "playground": {
                "testcaseInput": "",
                "name": "check-array-formation-through-concatenation-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "8UYWcW23": {
            "playground": {
                "testcaseInput": "",
                "name": "check-array-formation-through-concatenation-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "cJgAZLFu": {
            "playground": {
                "testcaseInput": "",
                "name": "check-array-formation-through-concatenation-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}