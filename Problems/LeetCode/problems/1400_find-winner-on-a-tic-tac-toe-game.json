{
    "id": "1400",
    "question": {
        "questionId": "1400",
        "questionFrontendId": "1275",
        "boundTopicId": null,
        "title": "Find Winner on a Tic Tac Toe Game",
        "titleSlug": "find-winner-on-a-tic-tac-toe-game",
        "content": "<p><strong>Tic-tac-toe</strong> is played by two players <code>A</code> and <code>B</code> on a <code>3 x 3</code> grid. The rules of Tic-Tac-Toe are:</p>\n\n<ul>\n\t<li>Players take turns placing characters into empty squares <code>&#39; &#39;</code>.</li>\n\t<li>The first player <code>A</code> always places <code>&#39;X&#39;</code> characters, while the second player <code>B</code> always places <code>&#39;O&#39;</code> characters.</li>\n\t<li><code>&#39;X&#39;</code> and <code>&#39;O&#39;</code> characters are always placed into empty squares, never on filled ones.</li>\n\t<li>The game ends when there are <strong>three</strong> of the same (non-empty) character filling any row, column, or diagonal.</li>\n\t<li>The game also ends if all squares are non-empty.</li>\n\t<li>No more moves can be played if the game is over.</li>\n</ul>\n\n<p>Given a 2D integer array <code>moves</code> where <code>moves[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> move will be played on <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code>. return <em>the winner of the game if it exists</em> (<code>A</code> or <code>B</code>). In case the game ends in a draw return <code>&quot;Draw&quot;</code>. If there are still movements to play return <code>&quot;Pending&quot;</code>.</p>\n\n<p>You can assume that <code>moves</code> is valid (i.e., it follows the rules of <strong>Tic-Tac-Toe</strong>), the grid is initially empty, and <code>A</code> will play first.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/22/xo1-grid.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\n<strong>Output:</strong> &quot;A&quot;\n<strong>Explanation:</strong> A wins, they always play first.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/22/xo2-grid.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\n<strong>Output:</strong> &quot;B&quot;\n<strong>Explanation:</strong> B wins.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/22/xo3-grid.jpg\" style=\"width: 244px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\n<strong>Output:</strong> &quot;Draw&quot;\n<strong>Explanation:</strong> The game ends in a draw since there are no moves to make.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= moves.length &lt;= 9</code></li>\n\t<li><code>moves[i].length == 2</code></li>\n\t<li><code>0 &lt;= row<sub>i</sub>, col<sub>i</sub> &lt;= 2</code></li>\n\t<li>There are no repeated elements on <code>moves</code>.</li>\n\t<li><code>moves</code> follow the rules of tic tac toe.</li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Easy",
        "likes": 946,
        "dislikes": 254,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "[[0,0],[2,0],[1,1],[2,1],[2,2]]\n[[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\n[[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Matrix",
                "slug": "matrix",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Simulation",
                "slug": "simulation",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Coinbase\", \"slug\": \"coinbase\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Zoho\", \"slug\": \"zoho\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 11}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 9}, {\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 8}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Tesla\", \"slug\": \"tesla\", \"timesEncountered\": 2}], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    string tictactoe(vector<vector<int>>& moves) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public String tictactoe(int[][] moves) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def tictactoe(self, moves):\n        \"\"\"\n        :type moves: List[List[int]]\n        :rtype: str\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def tictactoe(self, moves: List[List[int]]) -> str:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nchar * tictactoe(int** moves, int movesSize, int* movesColSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public string Tictactoe(int[][] moves) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[][]} moves\n * @return {string}\n */\nvar tictactoe = function(moves) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[][]} moves\n# @return {String}\ndef tictactoe(moves)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func tictactoe(_ moves: [[Int]]) -> String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func tictactoe(moves [][]int) string {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def tictactoe(moves: Array[Array[Int]]): String = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun tictactoe(moves: Array<IntArray>): String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn tictactoe(moves: Vec<Vec<i32>>) -> String {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $moves\n     * @return String\n     */\n    function tictactoe($moves) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function tictactoe(moves: number[][]): string {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec tictactoe(Moves :: [[integer()]]) -> unicode:unicode_binary().\ntictactoe(Moves) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec tictactoe(moves :: [[integer]]) :: String.t\n  def tictactoe(moves) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"84.5K\", \"totalSubmission\": \"155.2K\", \"totalAcceptedRaw\": 84514, \"totalSubmissionRaw\": 155154, \"acRate\": \"54.5%\"}",
        "hints": [
            "It's straightforward to check if A or B won or not, check for each row/column/diag if all the three are the same.",
            "Then if no one wins, the game is a draw iff the board is full, i.e. moves.length = 9 otherwise is pending."
        ],
        "solution": {
            "id": "1168",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": "ac",
        "sampleTestCase": "[[0,0],[2,0],[1,1],[2,1],[2,2]]",
        "metaData": "{\n  \"name\": \"tictactoe\",\n  \"params\": [\n    {\n      \"name\": \"moves\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1168",
        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n#### Overview\r\n\r\nTic Tac Toe is one of the classic games with pretty simple rules. Two players take turns placing characters on an `n` by `n` board. The first player that connects `n` consecutive characters horizontally, vertically, or diagonally wins the game. Traditionally (and in this problem), the board width is fixed at 3. However, to help demonstrate the efficiency of each approach, we will refer to the board width as `n` throughout this article.\r\n\r\nIn this problem, we are looking to determine the winner of the game (if one exists). If neither player has won, then we must determine if the game is ongoing or if it has ended in a draw.\r\n\r\n\r\nThe most intuitive approach is to check, after each move, if the current player has won, which can be implemented by different methods. Here we introduce two approaches to solve this problem, the first one is the most intuitive one, while the second one has some optimization.\r\n\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 1: Brute Force\r\n\r\n\r\n**Intuition**\r\n\r\nSince we have to find if the current player has won, let's take a look at what the winning conditions are. The figure below illustrates the 4 winning conditions according to the rules.\r\n\r\n![limits](../Figures/1275/1275_1.png)\r\n\r\nThe above diagram shows that a player can win by connecting `n` consecutive characters in a row, column, diagonal, or anti-diagonal.\r\n\r\n\r\n\r\nThen, how do we check if any player has won so far? \r\n\r\n![limits](../Figures/1275/1275_2.png)\r\n\r\nWe can start by creating an `n` by `n` grid that represents the original board. \r\n\r\nNext, let's take a closer look at the previous winning conditions. Notice that a character located at `[row, col]` will be on the diagonal when its column index equals its row index, that is `row = col`.  Likewise, a character will be on the anti-diagonal when then the sum of its row index and column index is equal to `n - 1`, that is `row + col = n - 1`.\r\n\r\nSuppose the current player marks the location `[row, col]`, where `row` and `col` stand for the row index and column index on board, respectively. If row `row` or column `col` has `n` characters from the same player after this move, then the current player wins. \r\n\r\nNow, after each move, we can determine if a player has won by checking each row, column, and diagonal. The next question is, how will we determine the result after all moves have been made? We need to find a way to handle cases where neither player wins.\r\n\r\n![limits](../Figures/1275/1275_5.png)\r\n\r\nIf neither player has won after all of the moves have been played, we need to check the length of `moves`. There are two possibilities: \"Draw\" if the board is full, meaning the length of `moves` is `n * n`, or \"Pending\" otherwise. \r\n\r\nNow, we are ready to implement a brute force solution.\r\n\r\n\r\n**Algorithm**\r\n\r\n1) Initialize a 2-dimensional array `board` of size `n` by `n` representing an empty board.\r\n\r\n2) For each new move `[row, col]`, mark the relative position `board[row][col]` on `board` with the player's id. Suppose player one's id is 1, and player two's id is -1.\r\n\r\n3) Then, check if this move meets any of the winning conditions:\r\n\r\n\r\n    - Check if all cells in the current row are filled with characters from the current player. We traverse the row from column `0` to column `n - 1` while keeping the row index constant.\r\n    - Check if all cells in the current column are filled with characters from the current player. We traverse the column from row `0` to row `n - 1` while keeping the column index constant.\r\n    - Check if this move is on the diagonal; that is, check if `row` equals `col`. If so, traverse the entire diagonal and check if all positions on the diagonal contain characters from this player.\r\n    - Check if this move is on the anti-diagonal; that is, check if `row + col` equals `n - 1`. If so, traverse the entire anti-diagonal and check if all positions on the anti-diagonal contain characters from this player.\r\n\r\n\r\n4) If there is no winner after all of the moves have been played, we will check if the entire board is filled. If so, return \"Draw\", otherwise return \"Pending\", meaning the game is still on. That is, check if the length of `moves` equals the number of cells on the `n` by `n` board.    \r\n\r\n**Implementation**\r\n\r\n\r\n<iframe src=\"https://leetcode.com/playground/RS5tkTbJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RS5tkTbJ\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\nLet `n` be the length of the board and `m` be the length of input `moves`.\r\n\r\n* Time complexity: $$O(m \\cdot n)$$\r\n\r\n    For every move, we need to traverse the same row, column, diagonal, and anti-diagonal, which takes $$O(n)$$ time. \r\n    \r\n\r\n* Space complexity: $$O(n^2)$$\r\n\r\n    We use an `n` by `n` array to record every move.\r\n\r\n<br/>\r\n\r\n---\r\n#### Approach 2: Record Each Move\r\n\r\n**Intuition**\r\n\r\nInstead of recording each move in a `n` by `n` grid, as we did in the first approach, could we find a more effective way to record the previous moves?\r\nThe answer is Yes.\r\n\r\n\r\n>Let's take a look at the 4 winning conditions again.\r\n\r\n![limits](../Figures/1275/1275_1.png)\r\n\r\n\r\nIn the first approach, since we created the board and recorded each move, we had to traverse the entire line to check if all marks were of the same type.\r\n\r\n>However, this method stores way more information than we actually need, it also results in an increased time and space complexity.\r\n\r\nWe do not need to know where these marks are located in order to solve the problem. What we do need to know is: after move `[row, col]`, does any row, column, or diagonal meet the winning condition?\r\n\r\n>Therefore, we could just record the result of each row and column instead of the position of each move precisely.\r\n\r\n\r\nNow the question becomes: How should we record the result? Let's take a look at the figure below to find out. \r\n\r\n![limits](../Figures/1275/1275_3.png)\r\n\r\n>Notice that there are many unique ways to fill a single row. However, only two cases are considered as a win. Recall that in the first approach, we set the value of players A and B to 1 and -1, respectively. Here we can take advantage of these distinct values again.\r\n\r\nSuppose we let the value of player A equal `1` and the value of player B equal `-1`. There are other ways to assign value, but `1` and `-1` are the most convenient. \r\n\r\nTherefore, a player will win if the value of any line equals `n` or `-n`. Thus after a move `[row, col]`, we could calculate the value of row `row` and column `col` and check if the absolute value equals `n`. If this move is placed on the diagonal or the anti-diagonal, then we will check if the absolute value of the relative value equals `n` as well. \r\n\r\nThus, we just need to build two arrays to represent the values for each row and column. For instance, `rows = [0, 0, 0]`, represents the initial value of `row_1`, `row_2`, and `row_3`, and the two values `diag` and `anti_diag` for value on diagonal and anti-diagonal. \r\n\r\n\r\n\r\nTo see how this will work, consider the two example moves shown below.\r\n\r\n![limits](../Figures/1275/1275_4.png)\r\n\r\nAfter player A plays at `[2, 0]`, we update the value of `rows[2]` and `col[0]`, since `row = 2` and `col = 2`. Also, because `row + col = 2`, we will update the value of the anti-diagonal. Since none of these values equals 3 after the update, this means that the game is still on.\r\n\r\nAfter player B's move, we update the value of `row[1]` and `col[1]`. Since this character is on both diagonal and anti-diagonal, we update `diag` and `anti_diag` as well. We will see that `col[1] = -3`, which means the current player (player B) has won the game! Thus return `B`.\r\n\r\n**Algorithm**\r\n\r\n1) We use two lists, `rows` and `cols` of size `n`, to represent each row and column.  We also use two numbers, `diag` and `anti_diag`, to represent the diagonal value and anti-diagonal value, respectively.\r\n\r\n2) Set the value of player A as `1` and the value of player B as `-1`.\r\n\r\n3) For each new move `[row, col]`, add the player's value to `rows[row]` and `cols[col]`. If `[row, col]` is on the diagonal or anti-diagonal, then add the player's value to `diag` or `anti_diag` as well.\r\n\r\n\r\n4) Then, check if this move meets any winning condition:\r\n\r\n    - Check if all cells in the current row contain characters from this player. To do so, we just need to check if the absolute value of `rows[row]` equals `n`.\r\n    - Check if all cells in the current column contain characters from this player. To do so, we just need to check if the absolute value of `cols[col]` equals `n`.\r\n    - Check if this move is on the diagonal; that is if `row` equals `col`. If so, check if the absolute value of `diag` equals `n`.\r\n    - Check if this move is on the anti-diagonal; that is if `row + col` equals `n - 1`. If so, check if the absolute value of `anti_diag` equals `n`.\r\n\r\n5) If there is no winner after all of the moves have been played, we will check if the entire board is filled. If so, return \"Draw\", otherwise return \"Pending\", meaning the game is still on. To determine if the entire board is filled, check if the length of `moves` equals the number of cells on the `n` by `n` board.    \r\n\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/3qHyLcFY/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"3qHyLcFY\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\nLet `n` be the length of the board and `m` be the length of input `moves`.\r\n\r\n* Time complexity: $$O(m)$$\r\n\r\n    For every move, we update the value for a row, column, diagonal, and anti-diagonal.  Each update takes constant time. We also check if any of these lines satisfies the winning condition which also takes constant time.\r\n\r\n* Space complexity: $$O(n)$$\r\n\r\n    We use two arrays of size `n` to record the value for each row and column, and two integers of constant space to record to value for diagonal and anti-diagonal.\r\n\r\n<br/>",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1173",
            "count": 33,
            "average": "4.758",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "find-winner-on-a-tic-tac-toe-game",
    "playgroundData": {
        "RS5tkTbJ": {
            "playground": {
                "testcaseInput": "",
                "name": "find-winner-on-a-tic-tac-toe-game-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "3qHyLcFY": {
            "playground": {
                "testcaseInput": "",
                "name": "find-winner-on-a-tic-tac-toe-game-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}