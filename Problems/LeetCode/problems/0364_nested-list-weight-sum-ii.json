{
    "id": "364",
    "question": {
        "questionId": "364",
        "questionFrontendId": "364",
        "boundTopicId": null,
        "title": "Nested List Weight Sum II",
        "titleSlug": "nested-list-weight-sum-ii",
        "content": "<p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists.</p>\n\n<p>The <strong>depth</strong> of an integer is the number of lists that it is inside of. For example, the nested list <code>[1,[2,2],[[3],2],1]</code> has each integer&#39;s value set to its <strong>depth</strong>. Let <code>maxDepth</code> be the <strong>maximum depth</strong> of any integer.</p>\n\n<p>The <strong>weight</strong> of an integer is <code>maxDepth - (the depth of the integer) + 1</code>.</p>\n\n<p>Return <em>the sum of each integer in </em><code>nestedList</code><em> multiplied by its <strong>weight</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/nestedlistweightsumiiex1.png\" style=\"width: 426px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> nestedList = [[1,1],2,[1,1]]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Four 1&#39;s with a weight of 1, one 2 with a weight of 2.\n1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/nestedlistweightsumiiex2.png\" style=\"width: 349px; height: 192px;\" />\n<pre>\n<strong>Input:</strong> nestedList = [1,[4,[6]]]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1.\n1*3 + 4*2 + 6*1 = 17\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nestedList.length &lt;= 50</code></li>\n\t<li>The values of the integers in the nested list is in the range <code>[-100, 100]</code>.</li>\n\t<li>The maximum <strong>depth</strong> of any integer is less than or equal to <code>50</code>.</li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 1021,
        "dislikes": 313,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Nested List Weight Sum\", \"titleSlug\": \"nested-list-weight-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array Nesting\", \"titleSlug\": \"array-nesting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[[1,1],2,[1,1]]\n[1,[4,[6]]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Stack",
                "slug": "stack",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Depth-First Search",
                "slug": "depth-first-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Breadth-First Search",
                "slug": "breadth-first-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"1\": [{\"taggedByAdmin\": true, \"name\": \"LinkedIn\", \"slug\": \"linkedin\", \"timesEncountered\": 54}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 3}], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     void add(const NestedInteger &ni);\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\nclass Solution {\npublic:\n    int depthSumInverse(vector<NestedInteger>& nestedList) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return empty list if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\nclass Solution {\n    public int depthSumInverse(List<NestedInteger> nestedList) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger(object):\n#    def __init__(self, value=None):\n#        \"\"\"\n#        If value is not specified, initializes an empty list.\n#        Otherwise initializes a single integer equal to value.\n#        \"\"\"\n#\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def add(self, elem):\n#        \"\"\"\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n#        :rtype void\n#        \"\"\"\n#\n#    def setInteger(self, value):\n#        \"\"\"\n#        Set this NestedInteger to hold a single integer equal to value.\n#        :rtype void\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\n\nclass Solution(object):\n    def depthSumInverse(self, nestedList):\n        \"\"\"\n        :type nestedList: List[NestedInteger]\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def __init__(self, value=None):\n#        \"\"\"\n#        If value is not specified, initializes an empty list.\n#        Otherwise initializes a single integer equal to value.\n#        \"\"\"\n#\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def add(self, elem):\n#        \"\"\"\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n#        :rtype void\n#        \"\"\"\n#\n#    def setInteger(self, value):\n#        \"\"\"\n#        Set this NestedInteger to hold a single integer equal to value.\n#        :rtype void\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\n\nclass Solution:\n    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "/**\n * *********************************************************************\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * // Initializes an empty nested list and return a reference to the nested integer.\n * struct NestedInteger *NestedIntegerInit();\n *\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\n * bool NestedIntegerIsInteger(struct NestedInteger *);\n *\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger holds a nested list\n * int NestedIntegerGetInteger(struct NestedInteger *);\n *\n * // Set this NestedInteger to hold a single integer.\n * void NestedIntegerSetInteger(struct NestedInteger *ni, int value);\n *\n * // Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n * void NestedIntegerAdd(struct NestedInteger *ni, struct NestedInteger *elem);\n *\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\n * // The result is undefined if this NestedInteger holds a single integer\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\n *\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\n * // The result is undefined if this NestedInteger holds a single integer\n * int NestedIntegerGetListSize(struct NestedInteger *);\n * };\n */\n\n\nint depthSumInverse(struct NestedInteger** nestedList, int nestedListSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * interface NestedInteger {\n *\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool IsInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     int GetInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void SetInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void Add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     IList<NestedInteger> GetList();\n * }\n */\npublic class Solution {\n    public int DepthSumInverse(IList<NestedInteger> nestedList) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     @return {void}\n *     this.setInteger = function(value) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     @return {void}\n *     this.add = function(elem) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @param {NestedInteger[]} nestedList\n * @return {number}\n */\nvar depthSumInverse = function(nestedList) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n#\n#class NestedInteger\n#    def is_integer()\n#        \"\"\"\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\n#        @return {Boolean}\n#        \"\"\"\n#\n#    def get_integer()\n#        \"\"\"\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return nil if this NestedInteger holds a nested list\n#        @return {Integer}\n#        \"\"\"\n#\n#    def set_integer(value)\n#        \"\"\"\n#        Set this NestedInteger to hold a single integer equal to value.\n#        @return {Void}\n#        \"\"\"\n#\n#    def add(elem)\n#        \"\"\"\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n#        @return {Void}\n#        \"\"\"\n#\n#    def get_list()\n#        \"\"\"\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return nil if this NestedInteger holds a single integer\n#        @return {NestedInteger[]}\n#        \"\"\"\n\n# @param {NestedInteger[]} nested_list\n# @return {Integer}\ndef depth_sum_inverse(nested_list)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public func isInteger() -> Bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     public func getInteger() -> Int\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public func setInteger(value: Int)\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public func add(elem: NestedInteger)\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     public func getList() -> [NestedInteger]\n * }\n */\nclass Solution {\n    func depthSumInverse(_ nestedList: [NestedInteger]) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * type NestedInteger struct {\n * }\n *\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\n * func (n NestedInteger) IsInteger() bool {}\n *\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\n * // The result is undefined if this NestedInteger holds a nested list\n * // So before calling this method, you should have a check\n * func (n NestedInteger) GetInteger() int {}\n *\n * // Set this NestedInteger to hold a single integer.\n * func (n *NestedInteger) SetInteger(value int) {}\n *\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n * func (n *NestedInteger) Add(elem NestedInteger) {}\n *\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\n * // The list length is zero if this NestedInteger holds a single integer\n * // You can access NestedInteger's List element directly if you want to modify it\n * func (n NestedInteger) GetList() []*NestedInteger {}\n */\nfunc depthSumInverse(nestedList []*NestedInteger) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * trait NestedInteger {\n *\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *   def isInteger: Boolean\n *\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer.\n *   def getInteger: Int\n *\n *   // Set this NestedInteger to hold a single integer.\n *   def setInteger(i: Int): Unit\n *\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list.\n *   def getList: Array[NestedInteger]\n *\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *   def add(ni: NestedInteger): Unit\n * }\n */\nobject Solution {\n    def depthSumInverse(nestedList: List[NestedInteger]): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     constructor()\n *\n *     // Constructor initializes a single integer.\n *     constructor(value: Int)\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     fun isInteger(): Boolean\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     fun getInteger(): Int?\n *\n *     // Set this NestedInteger to hold a single integer.\n *     fun setInteger(value: Int): Unit\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     fun add(ni: NestedInteger): Unit\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     fun getList(): List<NestedInteger>?\n * }\n */\nclass Solution {\n    fun depthSumInverse(nestedList: List<NestedInteger>): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "// #[derive(Debug, PartialEq, Eq)]\n// pub enum NestedInteger {\n//   Int(i32),\n//   List(Vec<NestedInteger>)\n// }\nimpl Solution {\n    pub fn depth_sum_inverse(nested_list: Vec<NestedInteger>) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n\n *     // if value is not specified, initializes an empty list.\n *     // Otherwise initializes a single integer equal to value.\n *     function __construct($value = null)\n\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     function isInteger() : bool\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     function getInteger()\n *\n *     // Set this NestedInteger to hold a single integer.\n *     function setInteger($i) : void\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     function add($ni) : void\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     function getList() : array\n * }\n */\nclass Solution {\n\n    /**\n     * @param NestedInteger[] $nestedList\n     * @return Integer\n     */\n    function depthSumInverse($nestedList) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *     If value is provided, then it holds a single integer\n *     Otherwise it holds an empty nested list\n *     constructor(value?: number) {\n *         ...\n *     };\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     isInteger(): boolean {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     getInteger(): number | null {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     setInteger(value: number) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     add(elem: NestedInteger) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds,\n *     or an empty list if this NestedInteger holds a single integer\n *     getList(): NestedInteger[] {\n *         ...\n *     };\n * };\n */\n\nfunction depthSumInverse(nestedList: NestedInteger[]): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": ";; This is the interface that allows for creating nested lists.\n;; You should not implement it, or speculate about its implementation\n\n#|\n\n(define nested-integer%\n  (class object%\n    ...\n\n    ; Return true if this nested-integer% holds a single integer, rather than a nested list.\n    ; -> boolean?\n    (define/public (is-integer)\n      ...)\n\n    ; Return the single integer that this nested-integer% holds, if it holds a single integer,\n    ; or #f if this nested-integer% holds a nested list.\n    ; -> integer?\n    (define/public (get-integer)\n      ...)\n\n    ; Set this nested-integer% to hold a single integer equal to value.\n    ; -> integer? void?\n    (define/public (set-integer i)\n      ...)\n\n    ; Set this nested-integer% to hold a nested list and adds a nested integer elem to it.\n    ; -> (is-a?/c nested-integer%) void?\n    (define/public (add ni)\n      ...)\n\n    ; Return the nested list that this nested-integer% holds,\n    ; or an empty list if this nested-integer% holds a single integer.\n    ; -> gvector?\n    (define/public (get-list)\n      ...)))\n\n|#\n\n(define/contract (depth-sum-inverse nestedList)\n  (-> (listof (is-a?/c nested-integer%)) exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "%% % This is the interface that allows for creating nested lists.\n%% % You should not implement it, or speculate about its implementation\n%%\n%% % Create an empty nested list.\n%% nested_integer:new() -> nested_integer().\n%%\n%% % Create a single integer.\n%% nested_integer:new(Val :: integer()) -> nested_integer().\n%%\n%% % Return true if argument NestedInteger holds a single integer, rather than a nested list.\n%% nested_integer:is_integer(NestedInteger :: nested_integer()) -> boolean().\n%%\n%% % Return the single integer that NestedInteger holds, if it holds a single integer.\n%% % The result is undefined if it holds a nested list.\n%% nested_integer:get_integer(NestedInteger :: nested_integer()) -> integer().\n%%\n%% % Return a copy of argument NestedInteger with it set to hold a single integer Val.\n%% nested_integer:set_integer(NestedInteger :: nested_integer(), Val :: integer()) -> nested_integer().\n%%\n%% % Return a copy of argument NestedInteger with it set to hold a nested list and adds a nested_integer Elem to it.\n%% nested_integer:add(NestedInteger :: nested_integer(), Elem :: nested_integer()) -> nested_integer().\n%%\n%% % Return the nested list that NestedInteger holds, if it holds a nested list.\n%% % The result is undefined if it holds a single integer.\n%% nested_integer:get_list(NestedInteger :: nested_integer()) -> array:array(nested_integer()).\n\n-spec depth_sum_inverse(NestedList :: [nested_integer:nested_integer()]) -> integer().\ndepth_sum_inverse(NestedList) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "# # This is the interface that allows for creating nested lists.\n# # You should not implement it, or speculate about its implementation\n#\n# # Create an empty nested list.\n# :nested_integer.new() :: :nested_integer.nested_integer\n#\n# # Create a single integer.\n# :nested_integer.new(val :: integer) :: :nested_integer.nested_integer\n#\n# # Return true if argument nested_integer holds a single integer, rather than a nested list.\n# :nested_integer.is_integer(nested_integer :: :nested_integer.nested_integer) :: boolean\n#\n# # Return the single integer that nested_integer holds, if it holds a single integer\n# # The result is undefined if it holds a nested list.\n# :nested_integer.get_integer(nested_integer :: :nested_integer.nested_integer) :: integer\n#\n# # Return a copy of argument nested_integer with it set to hold a single integer val.\n# :nested_integer.set_integer(nested_integer :: :nested_integer.nested_integer, val :: integer) :: :nested_integer.nested_integer\n#\n# # Return a copy of argument nested_integer with it set to hold a nested list and adds a nested_integer elem to it.\n# :nested_integer.add(nested_integer :: :nested_integer.nested_integer, elem :: :nested_integer.nested_integer) :: :nested_integer.nested_integer\n#\n# # Return the nested list that nested_integer holds, if it holds a nested list.\n# # The result is undefined if it holds a single integer.\n# :nested_integer.get_list(nested_integer :: :nested_integer.nested_integer) :: :array.array(:nested_integer.nested_integer)\n\ndefmodule Solution do\n  @spec depth_sum_inverse(nested_list :: [:nested_integer.nested_integer]) :: integer\n  def depth_sum_inverse(nested_list) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"121K\", \"totalSubmission\": \"176K\", \"totalAcceptedRaw\": 120959, \"totalSubmissionRaw\": 175957, \"acRate\": \"68.7%\"}",
        "hints": [],
        "solution": {
            "id": "1209",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[[1,1],2,[1,1]]",
        "metaData": "{\n  \"name\": \"depthSumInverse\",\n  \"params\": [\n    {\n      \"name\": \"nestedList\",\n      \"type\": \"list<NestedInteger>\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": false\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1209",
        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Overview\n\nThis problem is an extension of [Nested List Weight Sum](https://leetcode.com/problems/nested-list-weight-sum), where we need to find the sum of each integer multiplied by its `depth`. The slight change in this problem is that instead of multiplying each integer by its  `depth`, we will multiply each integer by its `weight` which is equal to `maxDepth - depth + 1`. Here `maxDepth` is the maximum depth of any **integer** in the list.\n\nThe input here is a list of user-defined type `nestedList`. Each of these `nestedList` elements in the list can either be an integer or a list of `nestedList` elements. To clarify further, the following nested list is an example of a valid list of `nestedList` elements.  \n\nIn the nested list `[1, 2, 3, 4, [6, 7, [8]]]`, the first four elements are integers and the last one is a list of `nestedList` whose first two elements are integers and the last element is a `nestedList` with a single integer as its element. \n\nSimilarly, we can keep on increasing the nesting level by adding `nestedList` inside a `nestedList`.\n\nTwo things worth noting before we move on:\n1. Input like `[1,[2,[3,[[]]]]]` is not valid because here one of the `nestedList` is empty (it does not contain an integer or a `nestedList`).\n2. We will be working with the `NestedInteger` class for this problem. Accordingly, we must use the predefined functions `getList` and `getInteger` to access the data inside the given `nestedList`.\n\n</br>\n\n--- \n\n#### Approach 1: Double Pass Depth-First Search (DFS)\n\n\n**Intuition**\n\nTo calculate the weight (`maxDepth - depth + 1`) of any integer, we must first find the maximum depth of the given nested list. How can we do that? Whenever we need to work with a nested object, we should always consider recursively exploring the nested objects. This recursive exploration can be done in a depth-first or breadth-first manner. In this approach, we will choose to use depth-first search.\n\n> If you are unfamiliar with depth-first search, you can learn about it in this [Explore Card](https://leetcode.com/explore/learn/card/queue-stack/232/practical-application-stack/).\n\nSo to find the maximum depth, we can iterate over the elements in the given nested list, and the maximum depth of the list will be the maximum depth of any element inside the list. If the list only contains integers, then its depth is 1. However, if the list contains other nested lists, then its depth is 1 plus the maximum depth of these nested lists. Thus, we can recursively call our `findMaxDepth` function on any nested list to find the maximum depth.\n\nNow that we know how to find the value of `maxDepth` we can use the insights from [Nested List Weight Sum](https://leetcode.com/problems/nested-list-weight-sum/solution/) by changing `depth` to `weight`. We perform DFS over the list of `nestedList` one by one, keeping track of the current depth `depth`. If the element in the list is an integer, `x`,  we add its product with the weight as  `x * (maxDepth - depth + 1)` to `answer`. If the nested integer is a list, we recursively follow the same process on the `nestedList` but with depth equal to `depth + 1`.\n\n**Algorithm**\n\n1. Find the value of `maxDepth`. The recursive function `findMaxDepth` traverses over the `NestedInteger` and recursively explores each nested list. The depth of the current nested list will be one (for the current level) plus the maximum depth among all of the nested lists that it contains. If a nested list only contains integers, then return 1.\n2. Perform another depth-first search on the list. This time, keep track of the current depth, and for every integer, add the product of the integer and its weight (`maxDepth - depth + 1`) to the `answer`.\n\n**Implementation**\n\n\n<iframe src=\"https://leetcode.com/playground/g6peMusF/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"g6peMusF\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of nested elements in the input list. \n\nFor example, the list `[[[[[1]]]], 2]` contains $$4$$ nested lists and $$2$$ nested integers ($$1$$ and $$2$$), so $$N$$ is $$6$$, for list `[[[[1, [2]]]], [3, [4]]]` there are $$6$$ nested list and $$4$$ integers, hence $$N$$ is $$10$$.\n\n* Time complexity: $$O(N)$$\n   \n   We perform two depth-first searches: one to find the maximum depth and one to get the weighted sum of the nested list. In each DFS, we will visit every element exactly once. Hence the time complexity is $$O(N)$$.\n\n* Space complexity: $$O(N)$$\n\n   Space complexity is equal to the maximum number of active stack calls during the depth-first search.  In the worst case, such as `[[[[[[1]]]]]]`, the call stack will use $$O(N)$$ space. Hence the space complexity is $$O(N)$$.\n    \n\n<br/>\n\n---\n\n#### Approach 2: Single Pass Depth-First Search (DFS)\n\n**Intuition**\n\nIn the previous approach, we perform DFS twice. Can we do this in a single traversal? The reason for doing DFS two times is that we need `maxdepth` to find the integer's weight, hence we have to find the `maxdepth` in advance to calculate the `weight`. If we can somehow pull out the `maxDepth` from `weight` definition to an independent term, we can solve the problem in a single traversal.\n\nWe need to find the value of $$\\sum_{i=1}^{N} a_{i} * weight$$. Where $$a_i$$'s are all the integers present in the list, `maxDepth` is the maximum depth of an integer in list and $$depth_i$$ is the depth of $$a_i$$. \n\n    $$\\sum_{i=1}^{N} a_{i} * weight_{i}$$ \n\n    = $$\\sum_{i=1}^{N} a_{i} * (maxDepth - depth_{i} + 1)$$ \n\n    = $$\\sum_{i=1}^{N} (a_{i} * maxDepth - a_i * depth_{i}+ a_i)$$\n\n    = $$\\sum_{i=1}^{N} a_{i} * maxDepth$$ - $$\\sum_{i=1}^{N} a_i * depth_{i}$$ + $$\\sum_{i=1}^{N} a_{i} $$ \n\n    = $$maxDepth * \\sum_{i=1}^{N} a_{i} $$ - $$\\sum_{i=1}^{N} a_i * depth_{i}$$ + $$1 * \\sum_{i=1}^{N} a_{i} $$\n\n    = $$(maxDepth + 1) * \\sum_{i=1}^{N} a_{i} $$ - $$\\sum_{i=1}^{N} a_i * depth_{i}$$\n\n    = $$(maxDepth + 1) * sumOfElements$$ - $$sumOfProducts$$\n\nNotice that `maxDepth` is now outside of the summation. Thus, we do not need to use `maxDepth` until the last step in our calculation. Therefore we can find the `maxDepth` at the same time that we perform a depth-first traversal to find the sum of all $$a_{i}$$ values (`sumOfElements`) and the sum of all $$a_{i} * depth_{i}$$ values (`sumOfProducts`).\n\n**Algorithm**\n\n1. Perform DFS over `nestedInteger`. \n2. Add the product of integer and its `depth` into the `sumOfProducts`, this sum will be equal to $$\\sum_{i=1}^{N} a_i * depth_{i}$$.\n3. For every integer, compare the `depth` with `maxDepth` and update it accordingly.\n4. Add the integer to the `sumOfElements`. This sum will be equal to $$\\sum_{i=1}^{N} a_{i} $$.\n5. Return the value of `(maxDepth + 1) * sumOfElements - sumOfProducts`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/bFd3nBsJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"bFd3nBsJ\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of nested elements in the input list. \n\nFor example, the list `[[[[[1]]]], 2]` contains $$4$$ nested lists and $$2$$ nested integers ($$1$$ and $$2$$), so $$N$$ is $$6$$, for list `[[[[1, [2]]]], [3, [4]]]` there are $$6$$ nested list and $$4$$ integers, hence $$N$$ is $$10$$.\n\n* Time complexity: $$O(N)$$\n\n    We perform only one depth-first search. In the DFS, we traverse every element (i.e., nested lists and integers) in the nested list once. Hence the time complexity is $$O(N)$$.\n\n\n* Space complexity: $$O(N)$$\n\n    Space complexity is equal to the maximum number of active stack calls during the depth-first search. In the worst case, such as `[[[[[[1]]]]]]`, the call stack will use $$O(N)$$ space. Hence the space complexity is $$O(N)$$.\n    \n\n<br/>\n\n---\n\n#### Approach 3: Single Pass Breadth-First Search (BFS)\n\n**Intuition**\n\nIn the previous approach, we traversed over all the elements of the `nestedList` in depth-first search manner. We can traverse over the elements in any manner we want as long as we can determine the current depth while traversing elements. Hence, in this approach, we will traverse over `nestedList` in a breadth-first search manner.\n\n>  If you're not familiar with BFS, check out our [Explore Card](https://leetcode.com/explore/learn/card/queue-stack/231/practical-application-queue/)\n\nWe will use the previously defined equation `(maxDepth + 1) * sumOfElements - sumOfProducts` to find the answer iteratively. We will traverse over the lists, level by level as shown in the figure below.\n\n![fig](../Figures/364/364A.png)\n\nSimilar to the previous approach we will find the values of `sumOfElements`, `maxDepth`, and `sumOfProducts` while performing a BFS over the integers.\n\n**Algorithm**\n1. Initialize the first level of the BFS tree by adding all the elements in the input `nestedList` to the queue.\n2. For each level, pop out the front element from the queue.\n3. If it is a list then add its elements into the queue. Otherwise, update the value of `sumOfElements`, `maxDepth` and `sumOfProducts`.\n4. When the queue becomes empty, return the value of `(maxDepth + 1) * sumOfElements - sumOfProducts`.\n\n**Implementation**\n\n\n<iframe src=\"https://leetcode.com/playground/THpfRvBU/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"THpfRvBU\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of nested elements in the input list. \n\nFor example, the list `[[[[[1]]]], 2]` contains $$4$$ nested lists and $$2$$ nested integers ($$1$$ and $$2$$), so $$N$$ is $$6$$, for list `[[[[1, [2]]]], [3, [4]]]` there are $$6$$ nested list and $$4$$ integers, hence $$N$$ is $$10$$.\n\n\n* Time complexity: $$O(N)$$\n\n  Each nested element is put in the queue and removed from the queue exactly once.\n\n* Space complexity: $$O(N)$$\n\n   The worst-case for space complexity in BFS occurs where the majority of elements are at the same depth, as all of the elements at that depth will be in the queue at the same time. Therefore worst-case space complexity is $$O(N)$$.\n    \n\n<br/>\n\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1214",
            "count": 19,
            "average": "4.947",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "nested-list-weight-sum-ii",
    "playgroundData": {
        "g6peMusF": {
            "playground": {
                "testcaseInput": "",
                "name": "nested-list-weight-sum-ii-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "bFd3nBsJ": {
            "playground": {
                "testcaseInput": "",
                "name": "nested-list-weight-sum-ii-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "THpfRvBU": {
            "playground": {
                "testcaseInput": "",
                "name": "nested-list-weight-sum-ii-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}