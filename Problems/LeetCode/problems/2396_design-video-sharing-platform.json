{
    "id": "2396",
    "question": {
        "questionId": "2396",
        "questionFrontendId": "2254",
        "boundTopicId": null,
        "title": "Design Video Sharing Platform",
        "titleSlug": "design-video-sharing-platform",
        "content": "<p>You have a video sharing platform where users can upload and delete videos. Each <code>video</code> is a <strong>string</strong> of digits, where the <code>i<sup>th</sup></code> digit of the string represents the content of the video at minute <code>i</code>. For example, the first digit represents the content at minute <code>0</code> in the video, the second digit represents the content at minute <code>1</code> in the video, and so on. Viewers of videos can also like and dislike videos. Internally, the platform keeps track of the <strong>number of views, likes, and dislikes</strong> on each video.</p>\n\n<p>When a video is uploaded, it is associated with the smallest available integer <code>videoId</code> starting from <code>0</code>. Once a video is deleted, the <code>videoId</code> associated with that video can be reused for another video.</p>\n\n<p>Implement the <code>VideoSharingPlatform</code> class:</p>\n\n<ul>\n\t<li><code>VideoSharingPlatform()</code> Initializes the object.</li>\n\t<li><code>int upload(String video)</code> The user uploads a <code>video</code>. Return the <code>videoId</code> associated with the video.</li>\n\t<li><code>void remove(int videoId)</code> If there is a video associated with <code>videoId</code>, remove the video.</li>\n\t<li><code>String watch(int videoId, int startMinute, int endMinute)</code> If there is a video associated with <code>videoId</code>, increase the number of views on the video by <code>1</code> and return the substring of the video string starting at <code>startMinute</code> and ending at <code>min(endMinute, video.length - 1</code><code>)</code> (<strong>inclusive</strong>). Otherwise, return <code>&quot;-1&quot;</code>.</li>\n\t<li><code>void like(int videoId)</code> Increases the number of likes on the video associated with <code>videoId</code> by <code>1</code> if there is a video associated with <code>videoId</code>.</li>\n\t<li><code>void dislike(int videoId)</code> Increases the number of dislikes on the video associated with <code>videoId</code> by <code>1</code> if there is a video associated with <code>videoId</code>.</li>\n\t<li><code>int[] getLikesAndDislikes(int videoId)</code> Return a <strong>0-indexed</strong> integer array <code>values</code> of length <code>2</code> where <code>values[0]</code> is the number of likes and <code>values[1]</code> is the number of dislikes on the video associated with <code>videoId</code>. If there is no video associated with <code>videoId</code>, return <code>[-1]</code>.</li>\n\t<li><code>int getViews(int videoId)</code> Return the number of views on the video associated with <code>videoId</code>, if there is no video associated with <code>videoId</code>, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;VideoSharingPlatform&quot;, &quot;upload&quot;, &quot;upload&quot;, &quot;remove&quot;, &quot;remove&quot;, &quot;upload&quot;, &quot;watch&quot;, &quot;watch&quot;, &quot;like&quot;, &quot;dislike&quot;, &quot;dislike&quot;, &quot;getLikesAndDislikes&quot;, &quot;getViews&quot;]\n[[], [&quot;123&quot;], [&quot;456&quot;], [4], [0], [&quot;789&quot;], [1, 0, 5], [1, 0, 1], [1], [1], [1], [1], [1]]\n<strong>Output</strong>\n[null, 0, 1, null, null, 0, &quot;456&quot;, &quot;45&quot;, null, null, null, [1, 2], 2]\n\n<strong>Explanation</strong>\nVideoSharingPlatform videoSharingPlatform = new VideoSharingPlatform();\nvideoSharingPlatform.upload(&quot;123&quot;);          // The smallest available videoId is 0, so return 0.\nvideoSharingPlatform.upload(&quot;456&quot;);          // The smallest available <code>videoId</code> is 1, so return 1.\nvideoSharingPlatform.remove(4);              // There is no video associated with videoId 4, so do nothing.\nvideoSharingPlatform.remove(0);              // Remove the video associated with videoId 0.\nvideoSharingPlatform.upload(&quot;789&quot;);          // Since the video associated with videoId 0 was deleted,\n                                             // 0 is the smallest available <code>videoId</code>, so return 0.\nvideoSharingPlatform.watch(1, 0, 5);         // The video associated with videoId 1 is &quot;456&quot;.\n                                             // The video from minute 0 to min(5, 3 - 1) = 2 is &quot;456&quot;, so return &quot;453&quot;.\nvideoSharingPlatform.watch(1, 0, 1);         // The video associated with videoId 1 is &quot;456&quot;.\n                                             // The video from minute 0 to min(1, 3 - 1) = 1 is &quot;45&quot;, so return &quot;45&quot;.\nvideoSharingPlatform.like(1);                // Increase the number of likes on the video associated with videoId 1.\nvideoSharingPlatform.dislike(1);             // Increase the number of dislikes on the video associated with videoId 1.\nvideoSharingPlatform.dislike(1);             // Increase the number of dislikes on the video associated with videoId 1.\nvideoSharingPlatform.getLikesAndDislikes(1); // There is 1 like and 2 dislikes on the video associated with videoId 1, so return [1, 2].\nvideoSharingPlatform.getViews(1);            // The video associated with videoId 1 has 2 views, so return 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;VideoSharingPlatform&quot;, &quot;remove&quot;, &quot;watch&quot;, &quot;like&quot;, &quot;dislike&quot;, &quot;getLikesAndDislikes&quot;, &quot;getViews&quot;]\n[[], [0], [0, 0, 1], [0], [0], [0], [0]]\n<strong>Output</strong>\n[null, null, &quot;-1&quot;, null, null, [-1], -1]\n\n<strong>Explanation</strong>\nVideoSharingPlatform videoSharingPlatform = new VideoSharingPlatform();\nvideoSharingPlatform.remove(0);              // There is no video associated with videoId 0, so do nothing.\nvideoSharingPlatform.watch(0, 0, 1);         // There is no video associated with videoId 0, so return &quot;-1&quot;.\nvideoSharingPlatform.like(0);                // There is no video associated with videoId 0, so do nothing.\nvideoSharingPlatform.dislike(0);             // There is no video associated with videoId 0, so do nothing.\nvideoSharingPlatform.getLikesAndDislikes(0); // There is no video associated with videoId 0, so return [-1].\nvideoSharingPlatform.getViews(0);            // There is no video associated with videoId 0, so return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= video.length &lt;= 10<sup>5</sup></code></li>\n\t<li>The sum of <code>video.length</code> over all calls to <code>upload</code> does not exceed <code>10<sup>5</sup></code></li>\n\t<li><code>video</code> consists of digits.</li>\n\t<li><code>0 &lt;= videoId &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= startMinute &lt; endMinute &lt; 10<sup>5</sup></code></li>\n\t<li><code>startMinute &lt; video.length</code></li>\n\t<li>The sum of <code>endMinute - startMinute</code> over all calls to <code>watch</code> does not exceed <code>10<sup>5</sup></code>.</li>\n\t<li>At most <code>10<sup>5</sup></code> calls <strong>in total</strong> will be made to all functions.</li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Hard",
        "likes": 28,
        "dislikes": 1,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Tweet Counts Per Frequency\", \"titleSlug\": \"tweet-counts-per-frequency\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Browser History\", \"titleSlug\": \"design-browser-history\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[\"VideoSharingPlatform\",\"upload\",\"upload\",\"remove\",\"remove\",\"upload\",\"watch\",\"watch\",\"like\",\"dislike\",\"dislike\",\"getLikesAndDislikes\",\"getViews\"]\n[[],[\"123\"],[\"456\"],[4],[0],[\"789\"],[1,0,5],[1,0,1],[1],[1],[1],[1],[1]]\n[\"VideoSharingPlatform\",\"remove\",\"watch\",\"like\",\"dislike\",\"getLikesAndDislikes\",\"getViews\"]\n[[],[0],[0,0,1],[0],[0],[0],[0]]",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Stack",
                "slug": "stack",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Design",
                "slug": "design",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Ordered Set",
                "slug": "ordered-set",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"1\": [], \"2\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class VideoSharingPlatform {\npublic:\n    VideoSharingPlatform() {\n        \n    }\n    \n    int upload(string video) {\n        \n    }\n    \n    void remove(int videoId) {\n        \n    }\n    \n    string watch(int videoId, int startMinute, int endMinute) {\n        \n    }\n    \n    void like(int videoId) {\n        \n    }\n    \n    void dislike(int videoId) {\n        \n    }\n    \n    vector<int> getLikesAndDislikes(int videoId) {\n        \n    }\n    \n    int getViews(int videoId) {\n        \n    }\n};\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * VideoSharingPlatform* obj = new VideoSharingPlatform();\n * int param_1 = obj->upload(video);\n * obj->remove(videoId);\n * string param_3 = obj->watch(videoId,startMinute,endMinute);\n * obj->like(videoId);\n * obj->dislike(videoId);\n * vector<int> param_6 = obj->getLikesAndDislikes(videoId);\n * int param_7 = obj->getViews(videoId);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class VideoSharingPlatform {\n\n    public VideoSharingPlatform() {\n        \n    }\n    \n    public int upload(String video) {\n        \n    }\n    \n    public void remove(int videoId) {\n        \n    }\n    \n    public String watch(int videoId, int startMinute, int endMinute) {\n        \n    }\n    \n    public void like(int videoId) {\n        \n    }\n    \n    public void dislike(int videoId) {\n        \n    }\n    \n    public int[] getLikesAndDislikes(int videoId) {\n        \n    }\n    \n    public int getViews(int videoId) {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * VideoSharingPlatform obj = new VideoSharingPlatform();\n * int param_1 = obj.upload(video);\n * obj.remove(videoId);\n * String param_3 = obj.watch(videoId,startMinute,endMinute);\n * obj.like(videoId);\n * obj.dislike(videoId);\n * int[] param_6 = obj.getLikesAndDislikes(videoId);\n * int param_7 = obj.getViews(videoId);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class VideoSharingPlatform(object):\n\n    def __init__(self):\n        \n\n    def upload(self, video):\n        \"\"\"\n        :type video: str\n        :rtype: int\n        \"\"\"\n        \n\n    def remove(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def watch(self, videoId, startMinute, endMinute):\n        \"\"\"\n        :type videoId: int\n        :type startMinute: int\n        :type endMinute: int\n        :rtype: str\n        \"\"\"\n        \n\n    def like(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def dislike(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getLikesAndDislikes(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def getViews(self, videoId):\n        \"\"\"\n        :type videoId: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your VideoSharingPlatform object will be instantiated and called as such:\n# obj = VideoSharingPlatform()\n# param_1 = obj.upload(video)\n# obj.remove(videoId)\n# param_3 = obj.watch(videoId,startMinute,endMinute)\n# obj.like(videoId)\n# obj.dislike(videoId)\n# param_6 = obj.getLikesAndDislikes(videoId)\n# param_7 = obj.getViews(videoId)",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class VideoSharingPlatform:\n\n    def __init__(self):\n        \n\n    def upload(self, video: str) -> int:\n        \n\n    def remove(self, videoId: int) -> None:\n        \n\n    def watch(self, videoId: int, startMinute: int, endMinute: int) -> str:\n        \n\n    def like(self, videoId: int) -> None:\n        \n\n    def dislike(self, videoId: int) -> None:\n        \n\n    def getLikesAndDislikes(self, videoId: int) -> List[int]:\n        \n\n    def getViews(self, videoId: int) -> int:\n        \n\n\n# Your VideoSharingPlatform object will be instantiated and called as such:\n# obj = VideoSharingPlatform()\n# param_1 = obj.upload(video)\n# obj.remove(videoId)\n# param_3 = obj.watch(videoId,startMinute,endMinute)\n# obj.like(videoId)\n# obj.dislike(videoId)\n# param_6 = obj.getLikesAndDislikes(videoId)\n# param_7 = obj.getViews(videoId)",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\n\ntypedef struct {\n    \n} VideoSharingPlatform;\n\n\nVideoSharingPlatform* videoSharingPlatformCreate() {\n    \n}\n\nint videoSharingPlatformUpload(VideoSharingPlatform* obj, char * video) {\n  \n}\n\nvoid videoSharingPlatformRemove(VideoSharingPlatform* obj, int videoId) {\n  \n}\n\nchar * videoSharingPlatformWatch(VideoSharingPlatform* obj, int videoId, int startMinute, int endMinute) {\n  \n}\n\nvoid videoSharingPlatformLike(VideoSharingPlatform* obj, int videoId) {\n  \n}\n\nvoid videoSharingPlatformDislike(VideoSharingPlatform* obj, int videoId) {\n  \n}\n\nint* videoSharingPlatformGetLikesAndDislikes(VideoSharingPlatform* obj, int videoId, int* retSize) {\n  \n}\n\nint videoSharingPlatformGetViews(VideoSharingPlatform* obj, int videoId) {\n  \n}\n\nvoid videoSharingPlatformFree(VideoSharingPlatform* obj) {\n    \n}\n\n/**\n * Your VideoSharingPlatform struct will be instantiated and called as such:\n * VideoSharingPlatform* obj = videoSharingPlatformCreate();\n * int param_1 = videoSharingPlatformUpload(obj, video);\n \n * videoSharingPlatformRemove(obj, videoId);\n \n * char * param_3 = videoSharingPlatformWatch(obj, videoId, startMinute, endMinute);\n \n * videoSharingPlatformLike(obj, videoId);\n \n * videoSharingPlatformDislike(obj, videoId);\n \n * int* param_6 = videoSharingPlatformGetLikesAndDislikes(obj, videoId, retSize);\n \n * int param_7 = videoSharingPlatformGetViews(obj, videoId);\n \n * videoSharingPlatformFree(obj);\n*/",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class VideoSharingPlatform {\n\n    public VideoSharingPlatform() {\n        \n    }\n    \n    public int Upload(string video) {\n        \n    }\n    \n    public void Remove(int videoId) {\n        \n    }\n    \n    public string Watch(int videoId, int startMinute, int endMinute) {\n        \n    }\n    \n    public void Like(int videoId) {\n        \n    }\n    \n    public void Dislike(int videoId) {\n        \n    }\n    \n    public int[] GetLikesAndDislikes(int videoId) {\n        \n    }\n    \n    public int GetViews(int videoId) {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * VideoSharingPlatform obj = new VideoSharingPlatform();\n * int param_1 = obj.Upload(video);\n * obj.Remove(videoId);\n * string param_3 = obj.Watch(videoId,startMinute,endMinute);\n * obj.Like(videoId);\n * obj.Dislike(videoId);\n * int[] param_6 = obj.GetLikesAndDislikes(videoId);\n * int param_7 = obj.GetViews(videoId);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "\nvar VideoSharingPlatform = function() {\n    \n};\n\n/** \n * @param {string} video\n * @return {number}\n */\nVideoSharingPlatform.prototype.upload = function(video) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {void}\n */\nVideoSharingPlatform.prototype.remove = function(videoId) {\n    \n};\n\n/** \n * @param {number} videoId \n * @param {number} startMinute \n * @param {number} endMinute\n * @return {string}\n */\nVideoSharingPlatform.prototype.watch = function(videoId, startMinute, endMinute) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {void}\n */\nVideoSharingPlatform.prototype.like = function(videoId) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {void}\n */\nVideoSharingPlatform.prototype.dislike = function(videoId) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {number[]}\n */\nVideoSharingPlatform.prototype.getLikesAndDislikes = function(videoId) {\n    \n};\n\n/** \n * @param {number} videoId\n * @return {number}\n */\nVideoSharingPlatform.prototype.getViews = function(videoId) {\n    \n};\n\n/** \n * Your VideoSharingPlatform object will be instantiated and called as such:\n * var obj = new VideoSharingPlatform()\n * var param_1 = obj.upload(video)\n * obj.remove(videoId)\n * var param_3 = obj.watch(videoId,startMinute,endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * var param_6 = obj.getLikesAndDislikes(videoId)\n * var param_7 = obj.getViews(videoId)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "class VideoSharingPlatform\n    def initialize()\n        \n    end\n\n\n=begin\n    :type video: String\n    :rtype: Integer\n=end\n    def upload(video)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Void\n=end\n    def remove(video_id)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :type start_minute: Integer\n    :type end_minute: Integer\n    :rtype: String\n=end\n    def watch(video_id, start_minute, end_minute)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Void\n=end\n    def like(video_id)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Void\n=end\n    def dislike(video_id)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Integer[]\n=end\n    def get_likes_and_dislikes(video_id)\n        \n    end\n\n\n=begin\n    :type video_id: Integer\n    :rtype: Integer\n=end\n    def get_views(video_id)\n        \n    end\n\n\nend\n\n# Your VideoSharingPlatform object will be instantiated and called as such:\n# obj = VideoSharingPlatform.new()\n# param_1 = obj.upload(video)\n# obj.remove(video_id)\n# param_3 = obj.watch(video_id, start_minute, end_minute)\n# obj.like(video_id)\n# obj.dislike(video_id)\n# param_6 = obj.get_likes_and_dislikes(video_id)\n# param_7 = obj.get_views(video_id)",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "\nclass VideoSharingPlatform {\n\n    init() {\n        \n    }\n    \n    func upload(_ video: String) -> Int {\n        \n    }\n    \n    func remove(_ videoId: Int) {\n        \n    }\n    \n    func watch(_ videoId: Int, _ startMinute: Int, _ endMinute: Int) -> String {\n        \n    }\n    \n    func like(_ videoId: Int) {\n        \n    }\n    \n    func dislike(_ videoId: Int) {\n        \n    }\n    \n    func getLikesAndDislikes(_ videoId: Int) -> [Int] {\n        \n    }\n    \n    func getViews(_ videoId: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * let obj = VideoSharingPlatform()\n * let ret_1: Int = obj.upload(video)\n * obj.remove(videoId)\n * let ret_3: String = obj.watch(videoId, startMinute, endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * let ret_6: [Int] = obj.getLikesAndDislikes(videoId)\n * let ret_7: Int = obj.getViews(videoId)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "type VideoSharingPlatform struct {\n    \n}\n\n\nfunc Constructor() VideoSharingPlatform {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Upload(video string) int {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Remove(videoId int)  {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Watch(videoId int, startMinute int, endMinute int) string {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Like(videoId int)  {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) Dislike(videoId int)  {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) GetLikesAndDislikes(videoId int) []int {\n    \n}\n\n\nfunc (this *VideoSharingPlatform) GetViews(videoId int) int {\n    \n}\n\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Upload(video);\n * obj.Remove(videoId);\n * param_3 := obj.Watch(videoId,startMinute,endMinute);\n * obj.Like(videoId);\n * obj.Dislike(videoId);\n * param_6 := obj.GetLikesAndDislikes(videoId);\n * param_7 := obj.GetViews(videoId);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "class VideoSharingPlatform() {\n\n    def upload(video: String): Int = {\n        \n    }\n\n    def remove(videoId: Int) {\n        \n    }\n\n    def watch(videoId: Int, startMinute: Int, endMinute: Int): String = {\n        \n    }\n\n    def like(videoId: Int) {\n        \n    }\n\n    def dislike(videoId: Int) {\n        \n    }\n\n    def getLikesAndDislikes(videoId: Int): Array[Int] = {\n        \n    }\n\n    def getViews(videoId: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * var obj = new VideoSharingPlatform()\n * var param_1 = obj.upload(video)\n * obj.remove(videoId)\n * var param_3 = obj.watch(videoId,startMinute,endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * var param_6 = obj.getLikesAndDislikes(videoId)\n * var param_7 = obj.getViews(videoId)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class VideoSharingPlatform() {\n\n    fun upload(video: String): Int {\n        \n    }\n\n    fun remove(videoId: Int) {\n        \n    }\n\n    fun watch(videoId: Int, startMinute: Int, endMinute: Int): String {\n        \n    }\n\n    fun like(videoId: Int) {\n        \n    }\n\n    fun dislike(videoId: Int) {\n        \n    }\n\n    fun getLikesAndDislikes(videoId: Int): IntArray {\n        \n    }\n\n    fun getViews(videoId: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * var obj = VideoSharingPlatform()\n * var param_1 = obj.upload(video)\n * obj.remove(videoId)\n * var param_3 = obj.watch(videoId,startMinute,endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * var param_6 = obj.getLikesAndDislikes(videoId)\n * var param_7 = obj.getViews(videoId)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "struct VideoSharingPlatform {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl VideoSharingPlatform {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn upload(&self, video: String) -> i32 {\n        \n    }\n    \n    fn remove(&self, video_id: i32) {\n        \n    }\n    \n    fn watch(&self, video_id: i32, start_minute: i32, end_minute: i32) -> String {\n        \n    }\n    \n    fn like(&self, video_id: i32) {\n        \n    }\n    \n    fn dislike(&self, video_id: i32) {\n        \n    }\n    \n    fn get_likes_and_dislikes(&self, video_id: i32) -> Vec<i32> {\n        \n    }\n    \n    fn get_views(&self, video_id: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * let obj = VideoSharingPlatform::new();\n * let ret_1: i32 = obj.upload(video);\n * obj.remove(videoId);\n * let ret_3: String = obj.watch(videoId, startMinute, endMinute);\n * obj.like(videoId);\n * obj.dislike(videoId);\n * let ret_6: Vec<i32> = obj.get_likes_and_dislikes(videoId);\n * let ret_7: i32 = obj.get_views(videoId);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class VideoSharingPlatform {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $video\n     * @return Integer\n     */\n    function upload($video) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return NULL\n     */\n    function remove($videoId) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @param Integer $startMinute\n     * @param Integer $endMinute\n     * @return String\n     */\n    function watch($videoId, $startMinute, $endMinute) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return NULL\n     */\n    function like($videoId) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return NULL\n     */\n    function dislike($videoId) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return Integer[]\n     */\n    function getLikesAndDislikes($videoId) {\n        \n    }\n  \n    /**\n     * @param Integer $videoId\n     * @return Integer\n     */\n    function getViews($videoId) {\n        \n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * $obj = VideoSharingPlatform();\n * $ret_1 = $obj->upload($video);\n * $obj->remove($videoId);\n * $ret_3 = $obj->watch($videoId, $startMinute, $endMinute);\n * $obj->like($videoId);\n * $obj->dislike($videoId);\n * $ret_6 = $obj->getLikesAndDislikes($videoId);\n * $ret_7 = $obj->getViews($videoId);\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "class VideoSharingPlatform {\n    constructor() {\n\n    }\n\n    upload(video: string): number {\n\n    }\n\n    remove(videoId: number): void {\n\n    }\n\n    watch(videoId: number, startMinute: number, endMinute: number): string {\n\n    }\n\n    like(videoId: number): void {\n\n    }\n\n    dislike(videoId: number): void {\n\n    }\n\n    getLikesAndDislikes(videoId: number): number[] {\n\n    }\n\n    getViews(videoId: number): number {\n\n    }\n}\n\n/**\n * Your VideoSharingPlatform object will be instantiated and called as such:\n * var obj = new VideoSharingPlatform()\n * var param_1 = obj.upload(video)\n * obj.remove(videoId)\n * var param_3 = obj.watch(videoId,startMinute,endMinute)\n * obj.like(videoId)\n * obj.dislike(videoId)\n * var param_6 = obj.getLikesAndDislikes(videoId)\n * var param_7 = obj.getViews(videoId)\n */",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define video-sharing-platform%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; upload : string? -> exact-integer?\n    (define/public (upload video)\n\n      )\n    ; remove : exact-integer? -> void?\n    (define/public (remove video-id)\n\n      )\n    ; watch : exact-integer? exact-integer? exact-integer? -> string?\n    (define/public (watch video-id start-minute end-minute)\n\n      )\n    ; like : exact-integer? -> void?\n    (define/public (like video-id)\n\n      )\n    ; dislike : exact-integer? -> void?\n    (define/public (dislike video-id)\n\n      )\n    ; get-likes-and-dislikes : exact-integer? -> (listof exact-integer?)\n    (define/public (get-likes-and-dislikes video-id)\n\n      )\n    ; get-views : exact-integer? -> exact-integer?\n    (define/public (get-views video-id)\n\n      )))\n\n;; Your video-sharing-platform% object will be instantiated and called as such:\n;; (define obj (new video-sharing-platform%))\n;; (define param_1 (send obj upload video))\n;; (send obj remove video-id)\n;; (define param_3 (send obj watch video-id start-minute end-minute))\n;; (send obj like video-id)\n;; (send obj dislike video-id)\n;; (define param_6 (send obj get-likes-and-dislikes video-id))\n;; (define param_7 (send obj get-views video-id))",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec video_sharing_platform_init_() -> any().\nvideo_sharing_platform_init_() ->\n  .\n\n-spec video_sharing_platform_upload(Video :: unicode:unicode_binary()) -> integer().\nvideo_sharing_platform_upload(Video) ->\n  .\n\n-spec video_sharing_platform_remove(VideoId :: integer()) -> any().\nvideo_sharing_platform_remove(VideoId) ->\n  .\n\n-spec video_sharing_platform_watch(VideoId :: integer(), StartMinute :: integer(), EndMinute :: integer()) -> unicode:unicode_binary().\nvideo_sharing_platform_watch(VideoId, StartMinute, EndMinute) ->\n  .\n\n-spec video_sharing_platform_like(VideoId :: integer()) -> any().\nvideo_sharing_platform_like(VideoId) ->\n  .\n\n-spec video_sharing_platform_dislike(VideoId :: integer()) -> any().\nvideo_sharing_platform_dislike(VideoId) ->\n  .\n\n-spec video_sharing_platform_get_likes_and_dislikes(VideoId :: integer()) -> [integer()].\nvideo_sharing_platform_get_likes_and_dislikes(VideoId) ->\n  .\n\n-spec video_sharing_platform_get_views(VideoId :: integer()) -> integer().\nvideo_sharing_platform_get_views(VideoId) ->\n  .\n\n\n%% Your functions will be called as such:\n%% video_sharing_platform_init_(),\n%% Param_1 = video_sharing_platform_upload(Video),\n%% video_sharing_platform_remove(VideoId),\n%% Param_3 = video_sharing_platform_watch(VideoId, StartMinute, EndMinute),\n%% video_sharing_platform_like(VideoId),\n%% video_sharing_platform_dislike(VideoId),\n%% Param_6 = video_sharing_platform_get_likes_and_dislikes(VideoId),\n%% Param_7 = video_sharing_platform_get_views(VideoId),\n\n%% video_sharing_platform_init_ will be called before every test case, in which you can do some necessary initializations.",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule VideoSharingPlatform do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec upload(video :: String.t) :: integer\n  def upload(video) do\n\n  end\n\n  @spec remove(video_id :: integer) :: any\n  def remove(video_id) do\n\n  end\n\n  @spec watch(video_id :: integer, start_minute :: integer, end_minute :: integer) :: String.t\n  def watch(video_id, start_minute, end_minute) do\n\n  end\n\n  @spec like(video_id :: integer) :: any\n  def like(video_id) do\n\n  end\n\n  @spec dislike(video_id :: integer) :: any\n  def dislike(video_id) do\n\n  end\n\n  @spec get_likes_and_dislikes(video_id :: integer) :: [integer]\n  def get_likes_and_dislikes(video_id) do\n\n  end\n\n  @spec get_views(video_id :: integer) :: integer\n  def get_views(video_id) do\n\n  end\nend\n\n# Your functions will be called as such:\n# VideoSharingPlatform.init_()\n# param_1 = VideoSharingPlatform.upload(video)\n# VideoSharingPlatform.remove(video_id)\n# param_3 = VideoSharingPlatform.watch(video_id, start_minute, end_minute)\n# VideoSharingPlatform.like(video_id)\n# VideoSharingPlatform.dislike(video_id)\n# param_6 = VideoSharingPlatform.get_likes_and_dislikes(video_id)\n# param_7 = VideoSharingPlatform.get_views(video_id)\n\n# VideoSharingPlatform.init_ will be called before every test case, in which you can do some necessary initializations.",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"709\", \"totalSubmission\": \"1.1K\", \"totalAcceptedRaw\": 709, \"totalSubmissionRaw\": 1107, \"acRate\": \"64.0%\"}",
        "hints": [
            "How can we keep track of the videoId\u2019s of removed videos?",
            "When you remove a video, keep track of its videoId in an array called usedId. When a new video is uploaded, first check if usedId contains any elements, if it does, use the smallest value in usedId."
        ],
        "solution": null,
        "status": null,
        "sampleTestCase": "[\"VideoSharingPlatform\",\"upload\",\"upload\",\"remove\",\"remove\",\"upload\",\"watch\",\"watch\",\"like\",\"dislike\",\"dislike\",\"getLikesAndDislikes\",\"getViews\"]\n[[],[\"123\"],[\"456\"],[4],[0],[\"789\"],[1,0,5],[1,0,1],[1],[1],[1],[1],[1]]",
        "metaData": "{\n  \"classname\": \"VideoSharingPlatform\",\n  \"constructor\": {\n    \"params\": []\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"video\"\n        }\n      ],\n      \"name\": \"upload\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"videoId\"\n        }\n      ],\n      \"name\": \"remove\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"videoId\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"startMinute\"\n        },\n        {\n          \"type\": \"integer\",\n          \"name\": \"endMinute\"\n        }\n      ],\n      \"name\": \"watch\",\n      \"return\": {\n        \"type\": \"string\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"videoId\"\n        }\n      ],\n      \"name\": \"like\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"videoId\"\n        }\n      ],\n      \"name\": \"dislike\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"videoId\"\n        }\n      ],\n      \"name\": \"getLikesAndDislikes\",\n      \"return\": {\n        \"type\": \"integer[]\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"integer\",\n          \"name\": \"videoId\"\n        }\n      ],\n      \"name\": \"getViews\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": null,
    "questionCode": "design-video-sharing-platform",
    "playgroundData": null
}