{
    "id": "923",
    "question": {
        "questionId": "923",
        "questionFrontendId": "887",
        "boundTopicId": null,
        "title": "Super Egg Drop",
        "titleSlug": "super-egg-drop",
        "content": "<p>You are given <code>k</code> identical eggs and you have access to a building with <code>n</code> floors labeled from <code>1</code> to <code>n</code>.</p>\n\n<p>You know that there exists a floor <code>f</code> where <code>0 &lt;= f &lt;= n</code> such that any egg dropped at a floor <strong>higher</strong> than <code>f</code> will <strong>break</strong>, and any egg dropped <strong>at or below</strong> floor <code>f</code> will <strong>not break</strong>.</p>\n\n<p>Each move, you may take an unbroken egg and drop it from any floor <code>x</code> (where <code>1 &lt;= x &lt;= n</code>). If the egg breaks, you can no longer use it. However, if the egg does not break, you may <strong>reuse</strong> it in future moves.</p>\n\n<p>Return <em>the <strong>minimum number of moves</strong> that you need to determine <strong>with certainty</strong> what the value of </em><code>f</code> is.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 1, n = 2\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, n = 6\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, n = 14\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Hard",
        "likes": 2611,
        "dislikes": 138,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Egg Drop With 2 Eggs and N Floors\", \"titleSlug\": \"egg-drop-with-2-eggs-and-n-floors\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "1\n2\n2\n6\n3\n14",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Math",
                "slug": "math",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Citadel\", \"slug\": \"citadel\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 0}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int superEggDrop(int k, int n) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int superEggDrop(int k, int n) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def superEggDrop(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def superEggDrop(self, k: int, n: int) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint superEggDrop(int k, int n){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int SuperEggDrop(int k, int n) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number} k\n * @param {number} n\n * @return {number}\n */\nvar superEggDrop = function(k, n) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer} k\n# @param {Integer} n\n# @return {Integer}\ndef super_egg_drop(k, n)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func superEggDrop(_ k: Int, _ n: Int) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func superEggDrop(k int, n int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def superEggDrop(k: Int, n: Int): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun superEggDrop(k: Int, n: Int): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn super_egg_drop(k: i32, n: i32) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $n\n     * @return Integer\n     */\n    function superEggDrop($k, $n) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function superEggDrop(k: number, n: number): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (super-egg-drop k n)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec super_egg_drop(K :: integer(), N :: integer()) -> integer().\nsuper_egg_drop(K, N) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec super_egg_drop(k :: integer, n :: integer) :: integer\n  def super_egg_drop(k, n) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"49.4K\", \"totalSubmission\": \"181.7K\", \"totalAcceptedRaw\": 49442, \"totalSubmissionRaw\": 181699, \"acRate\": \"27.2%\"}",
        "hints": [],
        "solution": {
            "id": "528",
            "canSeeDetail": true,
            "paidOnly": false,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "1\n2",
        "metaData": "{\n  \"name\": \"superEggDrop\",\n  \"params\": [\n    {\n      \"name\": \"k\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "528",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Dynamic Programming with Binary Search\n\n**Intuition**\n\nIt's natural to attempt dynamic programming, as we encounter similar subproblems.  Our state is `(K, N)`: `K` eggs and `N` floors left.  When we drop an egg from floor `X`, it either survives and we have state `(K, N-X)`, or it breaks and we have state `(K-1, X-1)`.\n\nThis approach would lead to a $$O(K N^2)$$ algorithm, but this is not efficient enough for the given constraints.  However, we can try to speed it up.  Let `dp(K, N)` be the maximum number of moves needed to solve the problem in state `(K, N)`.  Then, by our reasoning above, we have:\n\n$$\n\\text{dp}(K, N) = \\min\\limits_{1 \\leq X \\leq N} \\Big( \\max(\\text{dp}(K-1, X-1), \\text{dp}(K, N-X)) \\Big)\n$$\n\nNow for the key insight:  Because $$\\text{dp}(K, N)$$ is a function that is increasing on $$N$$, the first term $$\\mathcal{T_1} = \\text{dp}(K-1, X-1)$$ in our $$\\max$$ expression is an increasing function on $$X$$, and the second term $$\\mathcal{T_2} = \\text{dp}(K, N-X)$$ is a decreasing function on $$X$$.  This means that we do not need to check every $$X$$ to find the minimum -- instead, we can binary search for the best $$X$$.\n\n\n**Algorithm**\n\n<p align=\"center\">\n    <img src=\"../Figures/891/sketch.png\" alt=\"T1, T2 diagram\" style=\"height: 300px;\"/>\n</p>\n\nContinuing our discussion, if $$\\mathcal{T_1} < \\mathcal{T_2}$$, then the $$X$$ value chosen is too small; and if $$\\mathcal{T_1} > \\mathcal{T_2}$$, then $$X$$ is too big.  However, this argument is not quite correct: when there are only two possible values of $$X$$, we need to check both.\n\nUsing the above fact, we can use a binary search to find the correct value of $$X$$ more efficiently than checking all $$N$$ of them.\n\n<iframe src=\"https://leetcode.com/playground/KfdcVYz9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KfdcVYz9\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(K * N \\log N)$$.\n\n* Space Complexity:  $$O(K * N)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: Dynamic Programming with Optimality Criterion\n\n**Intuition**\n\nAs in *Approach 1*, we try to speed up our $$O(K N^2)$$ algorithm.  Again, for a state of $$K$$ eggs and $$N$$ floors, where $$\\text{dp}(K, N)$$ is the answer for that state, we have:\n\n$$\n\\text{dp}(K, N) = \\min\\limits_{1 \\leq X \\leq N} \\Big( \\max(\\text{dp}(K-1, X-1), \\text{dp}(K, N-X)) \\Big)\n$$\n\nNow, suppose $$X_{\\emptyset} = \\text{opt}(K, N)$$ is the smallest $$X$$ for which that minimum is attained: that is, the smallest value for which\n\n$$\n\\text{dp}(K, N) = \\Big( \\max(\\text{dp}(K-1, X_{\\emptyset}-1), \\text{dp}(K, N-X_{\\emptyset})) \\Big)\n$$\n\nThe key insight that we will develop below, is that $$\\text{opt}(K, N)$$ is an increasing function in $$N$$.\n\n<p align=\"center\">\n    <img src=\"../Figures/891/sketch2.png\" alt=\"T1, T2 diagram\" style=\"height: 300px;\"/>\n</p>\n\nThe first term of our $$\\max$$ expression, $$\\mathcal{T_1} = \\text{dp}(K-1, X-1)$$, is increasing with respect to $$X$$, but constant with respect to $$N$$.  The second term, $$\\mathcal{T_2} = \\text{dp}(K, N-X)$$, is decreasing with respect to $$X$$, but increasing with respect to $$N$$.\n\nThis means that as $$N$$ increases, the intersection point $$X_{\\emptyset} = \\text{opt}(K, N)$$ of these two lines is increasing, as we can see in the diagram.\n\n\n**Algorithm**\n\nPerform \"bottom up\" dynamic programming based on the recurrence below, keeping track of $$X_{\\emptyset} = \\text{opt}(K, N)$$.  Again:\n\n$$\n\\text{dp}(K, N) = \\min\\limits_{1 \\leq X \\leq N} \\Big( \\max(\\text{dp}(K-1, X-1), \\text{dp}(K, N-X)) \\Big)\n$$\n\nWhen we want to find $$\\text{dp}(K, N+1)$$, instead of searching for $$X$$ from $$1 \\leq X \\leq N$$, we only have to search through $$X_{\\emptyset} \\leq X \\leq N$$.\n\nActually, (as illustrated by the diagram,) if ever the next $$X+1$$ is worse than the current $$X$$, then we've searched too far, and we know our current $$X$$ is best for this $$N$$.\n\n<iframe src=\"https://leetcode.com/playground/jM5NUax9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"jM5NUax9\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(K * N)$$.\n\n* Space Complexity:  $$O(N)$$.\n<br />\n<br />\n\n\n---\n#### Approach 3: Mathematical\n\n**Intuition**\n\nLet's ask the question in reverse: given $$T$$ moves (and $$K$$ eggs), what is the most number of floors $$f(T, K)$$ that we can still \"solve\" (find $$0 \\leq F \\leq f(T, K)$$ with certainty)?  Then, the problem is to find the least $$T$$ for which $$f(T, K) \\geq N$$.  Because more tries is always at least as good, $$f$$ is increasing on $$T$$, which means we could binary search for the answer.\n\nNow, we find a similar recurrence for $$f$$ as in the other approaches.  If in an optimal strategy we drop the egg from floor $$X_{\\emptyset}$$, then either it breaks and we can solve $$f(T-1, K-1)$$ lower floors (floors $$< X_{\\emptyset}$$); or it doesn't break and we can solve $$f(T-1, K)$$ higher floors (floors $$\\geq X_{\\emptyset}$$).  In total,\n\n$$\nf(T, K) = 1 + f(T-1, K-1) + f(T-1, K)\n$$\n\nAlso, it is easily seen that $$f(t, 1) = t$$ when $$t \\geq 1$$, and $$f(1, k) = 1$$ when $$k \\geq 1$$.\n\n\n<p align=\"center\">\n    <img src=\"../Figures/891/sketch3.png\" alt=\"T1, T2 diagram\" style=\"height: 300px;\"\"/>\n</p>\n\nFrom here, we don't need to solve the recurrence mathematically - we could simply use it to generate all $$O(K * \\max(T))$$ possible values of $$f(T, K)$$.\n\nHowever, there is a mathematical solution to this recurrence.  If $$g(t, k) = f(t, k) - f(t, k-1)$$, [the difference between the $$k-1$$th and $$k$$th term,] then subtracting the two equations:\n\n$$\nf(T, K) = 1 + f(T-1, K-1) + f(T-1, K)\n$$\n\n$$\nf(T, K-1) = 1 + f(T-1, K-2) + f(T-1, K-1)\n$$\n\nwe get:\n\n$$\ng(t, k) = g(t-1, k) + g(t-1, k-1)\n$$\n\nThis is a binomial recurrence with solution $$g(t, k) = \\binom{t}{k+1}$$, so that indeed,\n\n$$\nf(t, k) = \\sum\\limits_{1 \\leq x \\leq K} g(t, x) = \\sum \\binom{t}{x}\n$$\n\n\n**Alternative Mathematical Derivation**\n\nAlternatively, when we have $$t$$ tries and $$K$$ eggs, the result of our $$t$$ throws must be a $$t$$-length sequence of successful and failed throws, with at most K failed throws.  The number of sequences with $$0$$ failed throws is $$\\binom{t}{0}$$, the number of sequences with $$1$$ failed throw is $$\\binom{t}{1}$$ etc., so that the number of such sequences is $$\\sum\\limits_{0 \\leq x \\leq K} \\binom{t}{x}$$.\n\nHence, we can only distinguish at most these many floors in $$t$$ tries (as each sequence can only map to 1 answer per sequence.)  This process includes distinguishing $$F = 0$$, so that the corresponding value of $$N$$ is one less than this sum.\n\nHowever, this is also a lower bound for the number of floors that can be distinguished, as the result of a throw on floor $$X$$ will bound the answer to be either at most $$X$$ or greater than $$X$$.  Hence, in an optimal throwing strategy, each such sequence actually maps to a unique answer.\n\n**Algorithm**\n\nRecapping our algorithm, we have the increasing [wrt $$t$$] function $$f(t, K) = \\sum\\limits_{1 \\leq x \\leq K} \\binom{t}{x}$$, and we want the least $$t$$ so that $$f(t, K) \\geq N$$.  We binary search for the correct $$t$$.\n\nTo evaluate $$f(t, K)$$ quickly, we can transform the previous binomial coefficient to the next (in the summand) by the formula $$\\binom{n}{k} * \\frac{n-k}{k+1} = \\binom{n}{k+1}$$.\n\n\n<iframe src=\"https://leetcode.com/playground/EjAh85br/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"EjAh85br\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(K * \\log N)$$.\n\n* Space Complexity:  $$O(1)$$.\n<br />\n<br />",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": false,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "521",
            "count": 204,
            "average": "4.632",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "super-egg-drop",
    "playgroundData": {
        "KfdcVYz9": {
            "playground": {
                "testcaseInput": "",
                "name": "super-egg-drop-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "jM5NUax9": {
            "playground": {
                "testcaseInput": "",
                "name": "super-egg-drop-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "EjAh85br": {
            "playground": {
                "testcaseInput": "",
                "name": "super-egg-drop-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}