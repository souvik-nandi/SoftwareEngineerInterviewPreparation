{
    "id": "1792",
    "question": {
        "questionId": "1792",
        "questionFrontendId": "1673",
        "boundTopicId": null,
        "title": "Find the Most Competitive Subsequence",
        "titleSlug": "find-the-most-competitive-subsequence",
        "content": "<p>Given an integer array <code>nums</code> and a positive integer <code>k</code>, return <em>the most<strong> competitive</strong> subsequence of </em><code>nums</code> <em>of size </em><code>k</code>.</p>\n\n<p>An array&#39;s subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.</p>\n\n<p>We define that a subsequence <code>a</code> is more <strong>competitive</strong> than a subsequence <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, subsequence <code>a</code> has a number <strong>less</strong> than the corresponding number in <code>b</code>. For example, <code>[1,3,4]</code> is more competitive than <code>[1,3,5]</code> because the first position they differ is at the final number, and <code>4</code> is less than <code>5</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,5,2,6], k = 2\n<strong>Output:</strong> [2,6]\n<strong>Explanation:</strong> Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,3,3,5,4,9,6], k = 4\n<strong>Output:</strong> [2,3,3,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 1388,
        "dislikes": 66,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Remove K Digits\", \"titleSlug\": \"remove-k-digits\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Smallest Subsequence of Distinct Characters\", \"titleSlug\": \"smallest-subsequence-of-distinct-characters\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[3,5,2,6]\n2\n[2,4,3,3,5,4,9,6]\n4",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Stack",
                "slug": "stack",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Greedy",
                "slug": "greedy",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Monotonic Stack",
                "slug": "monotonic-stack",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Dunzo\", \"slug\": \"dunzo\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": []}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    vector<int> mostCompetitive(vector<int>& nums, int k) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int[] mostCompetitive(int[] nums, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def mostCompetitive(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* mostCompetitive(int* nums, int numsSize, int k, int* returnSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int[] MostCompetitive(int[] nums, int k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar mostCompetitive = function(nums, k) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef most_competitive(nums, k)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func mostCompetitive(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func mostCompetitive(nums []int, k int) []int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def mostCompetitive(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun mostCompetitive(nums: IntArray, k: Int): IntArray {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn most_competitive(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function mostCompetitive($nums, $k) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function mostCompetitive(nums: number[], k: number): number[] {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (most-competitive nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec most_competitive(Nums :: [integer()], K :: integer()) -> [integer()].\nmost_competitive(Nums, K) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec most_competitive(nums :: [integer], k :: integer) :: [integer]\n  def most_competitive(nums, k) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"45K\", \"totalSubmission\": \"92K\", \"totalAcceptedRaw\": 44953, \"totalSubmissionRaw\": 92015, \"acRate\": \"48.9%\"}",
        "hints": [
            "In lexicographical order, the elements to the left have higher priority than those that come after. Can you think of a strategy that incrementally builds the answer from left to right?"
        ],
        "solution": {
            "id": "1063",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[3,5,2,6]\n2",
        "metaData": "{\n  \"name\": \"mostCompetitive\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"k\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1063",
        "content": "[TOC]\n\n## Solution\n---\n#### Overview ####\n\nThe problem is to build the most _competitive subsequence_ of size $$k$$ for a given array $$\\text{nums}$$.\n> A subsequence is different from a subarray. Unlike subarray, which contains only contiguous array\nelements, in subsequence of an array, we can skip any number of elements given that the ordering of elements is maintained.\n>\n> For array = `[2,3,5,6,7,8]`,`[5,6,7]` is subarray as well as subsequence. Whereas, `[5,6,8]` is a subsequence but not a subarray.\n\nFor the given array, we have to generate all its subsequences with size $$k$$ and then find the one which satisfies the criteria of being most competitive.\nNow, what are the criteria for being the most competitive subsequence?\n\nThe most competitive subsequence is the one in which the value of the element at every position/index is smallest among values of all the subsequences at that position.\nLet's understand with an example.\n\nLet `nums = [2, 3, 4]` and `k = 2`.\n\nWe could generate three subsequences of size $$3$$ from the given `nums` array,\n`seq1`:`[2, 3]`,  `seq2`:`[2, 4]`, `seq3`:`[3, 4]`.\n- Let's compare all the subsequences at index $$0$$. `seq1` and `seq2` has element $$2$$ at $$0^{th}$$ position. Whereas, `seq3` has an element $$3$$ which is greater than $$2$$. Considering index $$0$$, `seq1` and `seq2` can be the most competitive sequence as the value at $$0^{th}$$ index is smallest among other subsequences.\n\n- Now, let's compare the remaining subsequences at index $$1$$. `seq1` has value $$3$$ at $$1^{st}$$ index which is smaller than value $$4$$ at $$1^{st}$$ index in `seq2`.\n\nThis gives us subsequence `seq1`:`[2, 3]` as the most competitive sequence among all.\n\nBased on these insights, let's implement the solution.\n\n---\n\n#### Approach 1: Using Double-Ended Queue\n\n**Intuition**\n\nWe have to choose elements for our subsequence such that every element is the smallest possible value for that array position.\n\nThe naive solution would be to generate all the possible subsequences of an array and compare the element at every position to find the most competitive subsequence. This approach is too exhaustive. What could be a better way to implement the solution?\n\nInstead of building all the subsequences and then finding the one matching the criteria, we could scan the array and build the required subsequence. We would choose the elements for every position/index for the resultant subsequence that would be the most competitive element for that position.\n\nFor $$1^{st}$$ position in the resultant subsequence, we would try to choose the smallest possible value in the array, the next smaller element for the $$2^{nd}$$ position, and so on. In other words, we could say that we would try to build the subsequence in _Increasing Order_. Any element that does not follow the order would be ignored or dropped. Let's understand all possible cases with an example.\n\nExample, if `nums = [3, 2, 5, 4]` and `k = 3`.\n\nWe have to build the most competitive subsequence of size $$3$$. Let's scan the array from left to right and build the result.\n - index = `0` , element = `3`.\n\n    We start by choosing element $$3$$ for the $$1^{st}$$ position in result, `result = [3, _ , _ ]`.\n\n - index = `1` , element = `2`.\n\n   We find that the next element is $$2$$, which is smaller than last chosen element $$3$$, hence we can drop or remove $$3$$ and replace it by $$2$$ at $$1^{st}$$ position in result, `result = [2, _ , _ ]`.\n\n - index = `2` , element = `5`.\n\n     Now, the current element $$5$$ is greater than than last chosen element $$2$$ in result, thus we could choose $$5$$ for $$2^{nd}$$ position in result, `result = [2, 5, _ ]`.\n\n - index = `3` , element = `4`.\n\n     Again, the current element $$4$$ is smaller than the last chosen element $$5$$, but this time we cannot replace $$5$$ with $$4$$. Because we have to build a result of size $$3$$ and this is the last element we have. If we remove $$5$$ at $$2^{nd}$$ position in result and replace it with $$4$$, we won't be able to find another element for $$3^{rd}$$ position. Hence, we must keep $$5$$ at the $$2^{nd}$$ position and add $$4$$ at the $$3^{rd}$$ position in the result. `result = [2, 5, 4]`.\n\nWith the above example, we can state that to build the most competitive subsequence,\n- We must try to choose the smallest possible element for every position.\n- We have to choose at least $$k$$ elements.\n\nLet's understand how we can implement the intuition in detail.\n\n**Algorithm**\n\nTo implement the solution discussed above, we need 2 things,\n- First, we need a data structure that could hold the chosen elements for the resultant subsequence. We should be able to add or remove any number of elements from the end of the subsequence, as well as read elements at the beginning of the subsequence. The data structure that comes in our mind is [Double-Ended Queue](https://en.wikipedia.org/wiki/Double-ended_queue).\n\n- Second, we need a way to know the number of elements we could drop from the array `nums` to build the resultant subsequence.\n\n    For example, if `nums = [3, 4, 1]` and `k = 3`, we know that we cannot drop any element from the array, and the result would be `[3, 4, 1]`. Hence, there are $$0$$ elements that can be dropped.\n\n    If `nums = [3, 4, 1, 5]` and `k = 3`, we know that we can drop $$1$$ element from the array as we need only $$3$$ elements in the resultant subsequence.\n\n   Let $$\\text{additionalCount}$$ be the number of elements that we can drop from the array `nums` to build the `result`. Initially, $$\\text{additionalCount}$$ would be initialized to `( length of nums array - k )`\n\n   _Steps:_\n\n- Build a double-ended queue, named `queue` that holds the chosen subsequence at any given point.\n- Iterate over array `nums`, choose the most competitive elements and add it to the queue.\n\n - Compare the last element of the queue (last chosen element for the resultant subsequence) with the current element.\n     * Until the last element of the queue is greater than the current element and $$\\text{additionalCount}$$ is greater than $$0$$, we know that we can remove the last chosen element from the queue and replace it with the current element which is smaller and hence a better candidate.\nEvery time an element is removed from queue, decrement the $$\\text{additionalCount}$$ by $$1$$.\n\n    * Otherwise, simply add the current element at the end of the queue.\n\n- In the end, we have the most suitable candidates in the queue. Get the first $$k$$ elements from the queue and build the resultant array.\n\nThe following figure illustrates the idea for `nums = [3, 6, 4, 2, 1]` and `k = 3`.\n\n![img](../Documents/5614/competitive_subsequence.svg)\n\n\n**Implementation**\n<iframe src=\"https://leetcode.com/playground/9ZwcPtjy/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"9ZwcPtjy\"></iframe>\n\n**Complexity Analysis**\n\n-  Time Complexity: $$\\mathcal{O}(n)$$, where $$n$$ is the size of array `nums`. We iterate over the array `nums`. In the worst case, we would iterate over every element at most twice. First, to add it to the queue, and second to remove it from the queue. This gives us time complexity as $$\\mathcal{O}(n)$$.\n\n- Space Complexity: $$\\mathcal{O}(n)$$, where $$n$$ is the size of array `nums`. In the worst case, all the elements of array `nums` may be added to the queue. Hence, the maximum size of the queue can grow up to $$n$$.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1018",
            "count": 24,
            "average": "3.917",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "find-the-most-competitive-subsequence",
    "playgroundData": {
        "9ZwcPtjy": {
            "playground": {
                "testcaseInput": "",
                "name": "find-the-most-competitive-subsequence-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}