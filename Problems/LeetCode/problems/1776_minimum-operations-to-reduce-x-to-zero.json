{
    "id": "1776",
    "question": {
        "questionId": "1776",
        "questionFrontendId": "1658",
        "boundTopicId": null,
        "title": "Minimum Operations to Reduce X to Zero",
        "titleSlug": "minimum-operations-to-reduce-x-to-zero",
        "content": "<p>You are given an integer array <code>nums</code> and an integer <code>x</code>. In one operation, you can either remove the leftmost or the rightmost element from the array <code>nums</code> and subtract its value from <code>x</code>. Note that this <strong>modifies</strong> the array for future operations.</p>\n\n<p>Return <em>the <strong>minimum number</strong> of operations to reduce </em><code>x</code> <em>to <strong>exactly</strong></em> <code>0</code> <em>if it is possible</em><em>, otherwise, return </em><code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,4,2,3], x = 5\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The optimal solution is to remove the last two elements to reduce x to zero.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,6,7,8,9], x = 4\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,20,1,1,3], x = 10\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= x &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 3502,
        "dislikes": 74,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Minimum Size Subarray Sum\", \"titleSlug\": \"minimum-size-subarray-sum\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Subarray Sum Equals K\", \"titleSlug\": \"subarray-sum-equals-k\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Minimum Operations to Convert Number\", \"titleSlug\": \"minimum-operations-to-convert-number\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Removing Minimum Number of Magic Beans\", \"titleSlug\": \"removing-minimum-number-of-magic-beans\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[1,1,4,2,3]\n5\n[5,6,7,8,9]\n4\n[3,2,20,1,1,3]\n10",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Sliding Window",
                "slug": "sliding-window",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Prefix Sum",
                "slug": "prefix-sum",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int x) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public int minOperations(int[] nums, int x) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def minOperations(self, nums, x):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nint minOperations(int* nums, int numsSize, int x){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public int MinOperations(int[] nums, int x) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar minOperations = function(nums, x) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[]} nums\n# @param {Integer} x\n# @return {Integer}\ndef min_operations(nums, x)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func minOperations(_ nums: [Int], _ x: Int) -> Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func minOperations(nums []int, x int) int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def minOperations(nums: Array[Int], x: Int): Int = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun minOperations(nums: IntArray, x: Int): Int {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, x: i32) -> i32 {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @return Integer\n     */\n    function minOperations($nums, $x) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function minOperations(nums: number[], x: number): number {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (min-operations nums x)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec min_operations(Nums :: [integer()], X :: integer()) -> integer().\nmin_operations(Nums, X) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], x :: integer) :: integer\n  def min_operations(nums, x) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"98.7K\", \"totalSubmission\": \"262.2K\", \"totalAcceptedRaw\": 98716, \"totalSubmissionRaw\": 262159, \"acRate\": \"37.7%\"}",
        "hints": [
            "Think in reverse; instead of finding the minimum prefix + suffix, find the maximum subarray.",
            "Finding the maximum subarray is standard and can be done greedily."
        ],
        "solution": {
            "id": "1052",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[1,1,4,2,3]\n5",
        "metaData": "{\n  \"name\": \"minOperations\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"type\": \"integer\",\n      \"name\": \"x\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "946",
            "date": "2022-06-11",
            "incompleteChallengeCount": 30,
            "streakCount": 0,
            "type": "DAILY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1052",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nThis problem is closely related to [Maximum Size Subarray Sum Equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/). The key difference is that the input array for this problem only contains *positive* integers, whereas for [Maximum Size Subarray Sum Equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/), it can contain *both positive and negative* integers.\n\nOne way of solving this problem is to firstly transform it into a [Maximum Size Subarray Sum Equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/) problem. Then, any algorithm that solves [Maximum Size Subarray Sum Equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/) will also solve this problem.\n\n> **Warning**: The converse is not true. Because the input array for [Maximum Size Subarray Sum Equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/) can contain both positive and negative integers, algorithms that only work for positive integers will work for this problem, but not [Maximum Size Subarray Sum Equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/). \n\nThe downside of doing this is that the algorithms for [Maximum Size Subarray Sum Equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/) are more complicated than what is necessary for this problem, so in this article, we're going to focus on approaches that *only work with positive integers*.\n\nBelow, we will discuss two methods: *Two Pointers (Indirectly)* and *Two Pointers (Directly)*. Their implementations are almost the same, but their perspectives on the problem are different.\n\n---\n\n#### Approach 1: Two Pointers (Indirectly)\n\n**Intuition**\n\nThe indirect approach determines which values will *remain* in the array, as opposed to which values should be *removed* from the array.\n\nLet `total` be the sum of elements in `nums`.\n\nAn insight is that:\n\n> To find the **shortest** required operations that sum up to `x` is to find the **longest** subarray that sums up to `total - x`.\n\nFor example:\n\n![Figure 1.1](../Documents/5602/5602_1_1.drawio.svg)\n\nIn this case, `nums = [4, 3, 2, 3, 5, 1, 7]`. To sum to `x = 14`, the shortest operations are taking `[4, 3]` on left and `[7]` on right. This is the same as finding the longest subarray that sums up to `total - x = 11`: what we need is the remaining subarray: `[2, 3, 5, 1]`.\n\nIn this way, we've changed the problem into finding the maximum sized subarray with sum equals `total - x`\".\n\nWhat we can do is to use two pointers to solve it.\n\nWe initialize two pointers `left` and `right`. Iterate `right` pointer from the start to the end of `nums`. In each position of `right` pointer, we move `left` pointer as left as possible until the subarray sum is equal to or less than the required `total - x`.\n\nWith this moving method, we can find the subarray `[left, ..., right]` whose sum is **closest** to `total - x` for each `right` (but not greater than).\n\nTake `nums = [1, 3, 2, 3, 5, 1, 7]` and `x = 14` for example.\n\n![Figure 1.2](../Documents/5602/5602_1_2.drawio.svg)\n\nWhen `left = 1` and `right =3`, currently the subarray sum is `3 + 2 + 3 = 8`. The current sum is closest to `total - x = 8` (In fact, they are the same!).\n\nIf we want to move `right` to one unit right, the sum becomes `3 + 2 + 3 + 5 = 13 > 8`. Then we need to move `left` to let sum as close to `total - x` as possible. \n\nMoving `left` one unit right yields `2 + 3 + 5 = 10 > 8`. One more unit right gives `3 + 5 = 8 = total - x`. Here we stop moving `left` since it is equal to the required `total - x`. In this case, we found the subarray whose sum is **closest** to `8` and ends at `right`.\n\nWith those two pointers, we can find all subarray whose sum is `total - x`. What we need to do is to record the maximum length of those subarrays.\n\nFinally, calculate the remaining number of elements in `nums` and that is the final answer.\n\n**Algorithm**\n\n*Step 1:* Calculate the total sum of `nums`. Mark as `total`.\n\n*Step 2:* Initialize two pointers `left` and `right` to `0`. Initialize an integer `current` to represent the sum from `nums[left]` to `nums[right]`, inclusively. Initialize an integer `maxi` to record the maximum length that sums up to `total - x`.\n\n*Step 3:* Iterate `right` form 0 to the end of `nums`. In each iteration:\n\n- Update `current`.\n- If `current` is greater than `total - x`, move `left` to left.\n- If `current` is equal to `total - x`, update the maximum length.\n\n*Step 4:* Return the result.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/L6sALY6F/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"L6sALY6F\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of `nums`.\n\n* Time Complexity: $$\\mathcal{O}(N)$$, since each element is accessed at most twice, once by `left` and once by `right`.\n\n* Space Complexity: $$\\mathcal{O}(1)$$, since no additional data structure is allocated. \n\n---\n\n#### Approach 2: Two Pointers (Directly)\n\n**Intuition**\n\nIn the previous approach, we transformed the problem into finding the longest subarray with a sum of `total - x`. A natural question that begs to be asked is, \"Can we solve it directly without transformation?\".\n\nYes, we can. Let's have a try.\n\nSimilarly, we would like to continue using two pointers.\n\n![Figure 2.1](../Documents/5602/5602_2_1.drawio.svg)\n\nThis time, we mark `sum` as the sum of the left part from `left` and the right part from `right`, not including `left` and `right`. Of course, you can include them with a few modifications to the code.\n\nStill, we need to iterate `right` from the start to the end of `nums` and move `left` correspondingly. Here, we choose to move `left` to left until `sum` is greater than or equals to `x`.\n\nWe still take `nums = [1, 3, 2, 3, 5, 1, 7]` and `x = 14` for example.\n\n![Figure 2.2](../Documents/5602/5602_2_2.drawio.svg)\n\nWhen `left = 1` and `right = 3`, currently the `sum` is `1 + 5 + 1 + 7 = 14`, which is closest to `x = 14` (In fact, they are the same!). If we want to move `right` pointer by one unit towards right, the sum becomes `1 + 1 + 7 = 9 < 14`. Then we need to move `left` to let sum as close to `x` as possible. \n\nMoving `left` pointer one unit towards right yields `1 + 3 + 1 + 7 = 12 < 14`. One more unit towards right gives `1 + 3 + 2+ 1 + 7 = 14 = x`. Here we stop moving `left` pointer since it is equal to `x`.\n\nWith those two pointers, we can find all operations whose sum is `x`. What we need to do is to record the minimal length and return it.\n\n> However, it is needed to point out that the difference between *Approach 1* and *Approach 2* is not that huge. Their codes are similar but differ in the perspectives of the problem.\n\n**Algorithm**\n\n*Step 1:* Calculate the total sum of `nums`.\n\n*Step 2:* Initialize two pointers `left` and `right` to `0`. Initialize an integer `current` to represent the sum from `nums[0]` to `nums[left-1]` and from `nums[right+1]` to `nums[last]`. Initialize an integer `mini` to record the minimum length that sums up to `x`\n\n*Step 3:* Iterate `right` form 0 to the end of `nums`. In each iteration:\n\n- Update `current`.\n- If `current` is smaller than `x`, move `left` to left.\n- If `current` is equal to `x`, update the maximum length.\n\n*Step 4:* Return the result.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/3WRS424n/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"3WRS424n\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of `nums`.\n\n* Time Complexity: $$\\mathcal{O}(N)$$, since each element is accessed at most twice, once by `left` pointer and once by `right` pointer.\n\n* Space Complexity: $$\\mathcal{O}(1)$$, since no additional data structure is allocated.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1007",
            "count": 42,
            "average": "3.905",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "minimum-operations-to-reduce-x-to-zero",
    "playgroundData": {
        "L6sALY6F": {
            "playground": {
                "testcaseInput": "",
                "name": "minimum-operations-to-reduce-x-to-zero-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "3WRS424n": {
            "playground": {
                "testcaseInput": "",
                "name": "minimum-operations-to-reduce-x-to-zero-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}