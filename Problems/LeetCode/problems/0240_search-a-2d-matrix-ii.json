{
    "id": "240",
    "question": {
        "questionId": "240",
        "questionFrontendId": "240",
        "boundTopicId": null,
        "title": "Search a 2D Matrix II",
        "titleSlug": "search-a-2d-matrix-ii",
        "content": "<p>Write an efficient algorithm that searches for a value <code>target</code> in an <code>m x n</code> integer matrix <code>matrix</code>. This matrix has the following properties:</p>\n\n<ul>\n\t<li>Integers in each row are sorted in ascending from left to right.</li>\n\t<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 300</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the integers in each row are <strong>sorted</strong> in ascending order.</li>\n\t<li>All the integers in each column are <strong>sorted</strong> in ascending order.</li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": false,
        "difficulty": "Medium",
        "likes": 7819,
        "dislikes": 130,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Search a 2D Matrix\", \"titleSlug\": \"search-a-2d-matrix\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]",
        "exampleTestcases": "[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\n5\n[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\n20",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Matrix",
                "slug": "matrix",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"Nvidia\", \"slug\": \"nvidia\", \"timesEncountered\": 3}, {\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Walmart Global Tech\", \"slug\": \"walmart-labs\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"eBay\", \"slug\": \"ebay\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Salesforce\", \"slug\": \"salesforce\", \"timesEncountered\": 2}], \"1\": [{\"taggedByAdmin\": true, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 8}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 7}, {\"taggedByAdmin\": true, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 5}, {\"taggedByAdmin\": false, \"name\": \"ByteDance\", \"slug\": \"bytedance\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"PayTM\", \"slug\": \"paytm\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Goldman Sachs\", \"slug\": \"goldman-sachs\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nbool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[][]} matrix\n# @param {Integer} target\n# @return {Boolean}\ndef search_matrix(matrix, target)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func searchMatrix(matrix [][]int, target int) bool {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $target\n     * @return Boolean\n     */\n    function searchMatrix($matrix, $target) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function searchMatrix(matrix: number[][], target: number): boolean {\n\n};",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"627.7K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 627709, \"totalSubmissionRaw\": 1281666, \"acRate\": \"49.0%\"}",
        "hints": [],
        "solution": {
            "id": "341",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\n5",
        "metaData": "{\n  \"name\": \"searchMatrix\",\n  \"params\": [\n    {\n      \"name\": \"matrix\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"name\": \"target\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"manual\": true\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "994",
            "date": "2022-07-24",
            "incompleteChallengeCount": 14,
            "streakCount": 0,
            "type": "DAILY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "341",
        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Brute Force\n\n**Intuition**\n\nAs a baseline, we can search the 2D array the same way we might search an\nunsorted 1D array -- by examining each element.\n\n**Algorithm**\n\nThe algorithm doesn't really do anything more clever than what is explained\nby the intuition; we loop over the array, checking each element in turn. If\nwe find it, we return `true`. Otherwise, if we reach the end of the nested\n`for` loop without returning, we return `false`. The algorithm must return\nthe correct answer in all cases because we exhaust the entire search space.\n\n<iframe src=\"https://leetcode.com/playground/WM4UCWwS/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"WM4UCWwS\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(nm)$$\n\n    Becase we perform a constant time operation for each element of an\n    $$n\\times m$$ element matrix, the overall time complexity is equal to the\n    size of the matrix.\n\n* Space complexity : $$\\mathcal{O}(1)$$\n\n    The brute force approach does not allocate more additional space than a\n    handful of pointers, so the memory footprint is constant.\n<br />\n<br />\n\n\n---\n#### Approach 2: Binary Search\n\n**Intuition**\n\nThe fact that the matrix is sorted suggests that there must be some way to use\nbinary search to speed up our algorithm.\n\n**Algorithm**\n\nFirst, we ensure that `matrix` is not `null` and not empty. Then, if we\niterate over the matrix diagonals, we can maintain an invariant that the\nslice of the row and column beginning at the current $$(row, col)$$ pair is\nsorted. Therefore, we can always binary search these row and column slices\nfor `target`. We proceed in a logical fashion, iterating over the diagonals,\nbinary searching the rows and columns until we either run out of diagonals\n(meaning we can return `False`) or find `target` (meaning we can return\n`True`). The `binarySearch` function works just like normal binary search,\nbut is made ugly by the need to search both rows and columns of a\ntwo-dimensional array.\n\n<iframe src=\"https://leetcode.com/playground/QZxbZGqX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"QZxbZGqX\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log(n!))$$\n\n    It's not super obvious how $$\\mathcal{O}(\\log(n!))$$ time complexity arises\n    from this algorithm, so let's analyze it step-by-step. The\n    asymptotically-largest amount of work performed is in the main loop,\n    which runs for $$min(m, n)$$ iterations, where $$m$$ denotes the number\n    of rows and $$n$$ denotes the number of columns. On each iteration, we\n    perform two binary searches on array slices of length $$m-i$$ and\n    $$n-i$$. Therefore, each iteration of the loop runs in\n    $$\\mathcal{O}(\\log(m-i)+\\log(n-i))$$ time, where $$i$$ denotes the current\n    iteration. We can simplify this to $$\\mathcal{O}(2\\cdot \\log(n-i))=\\mathcal{O}(\\log(n-i))$$\n    by seeing that, in the worst case, $$n\\approx m$$. To see why, consider\n    what happens when $$n \\ll m$$ (without loss of generality); $$n$$ will\n    dominate $$m$$ in the asymptotic analysis. By summing the runtimes of all\n    iterations, we get the following expression:\n\n    $$\n        (1) \\quad \\mathcal{O}(\\log(n) + \\log(n-1) + \\log(n-2) + \\ldots + \\log(1))\n    $$\n\n    Then, we can leverage the log multiplication rule ($$\\log(a)+\\log(b)=\\log(ab)$$)\n    to rewrite the complexity as:\n\n    $$\n    \\begin{aligned}\n        (2) \\quad \\mathcal{O}(\\log(n) + \\log(n-1) + \\log(n-2) + \\ldots + \\log(1)) &=\n                  \\mathcal{O}(\\log(n \\cdot (n-1) \\cdot (n-2) \\cdot \\ldots \\cdot 1)) \\\\ &=\n                  \\mathcal{O}(\\log(1 \\cdot \\ldots \\cdot (n-2) \\cdot (n-1) \\cdot n)) \\\\\n                                                             &= \\mathcal{O}(\\log(n!))\n    \\end{aligned}\n    $$\n\n    Because this time complexity is fairly uncommon, it is worth thinking about\n    its relation to the usual analyses. For one, $$\\log(n!) = \\mathcal{O}(n\\log n)$$.\n    To see why, recall step 1 from the analysis above; there are $$n$$ terms, each no\n    greater than $$\\log(n)$$. Therefore, the asymptotic runtime is certainly no worse than\n    that of an $$\\mathcal{O}(n\\log n)$$ algorithm.\n\n* Space complexity : $$\\mathcal{O}(1)$$\n\n    Because our binary search implementation does not literally slice out\n    copies of rows and columns from `matrix`, we can avoid allocating\n    greater-than-constant memory.\n<br />\n<br />\n\n\n---\n#### Approach 3: Divide and Conquer\n\n**Intuition**\n\nWe can partition a sorted two-dimensional matrix into four sorted submatrices,\ntwo of which might contain `target` and two of which definitely do not.\n\n**Algorithm**\n\nBecause this algorithm operates recursively, its correctness can be asserted\nvia the correctness of its base and recursive cases.\n\n*Base Case*\n\nFor a sorted two-dimensional array, there are two ways to determine in\nconstant time whether an arbitrary element `target` can appear in it. First,\nif the array has zero area, it contains no elements and therefore cannot\ncontain `target`. Second, if `target` is smaller than the array's smallest\nelement (found in the top-left corner) or larger than the array's largest\nelement (found in the bottom-right corner), then it definitely is not\npresent.\n\n*Recursive Case*\n\nIf the base case conditions have not been met, then the array has positive\narea and `target` could potentially be present. Therefore, we seek along the\nmatrix's middle column for an index `row` such that\n$$ matrix[row-1][mid] < target < matrix[row][mid] $$ (obviously, if we find\n`target` during this process, we immediately return `true`). The existing\nmatrix can be partitioned into four submatrice around this index; the\ntop-left and bottom-right submatrice cannot contain `target` (via the\nargument outlined in *Base Case* section), so we can prune them from the\nsearch space. Additionally, the bottom-left and top-right submatrice are\nsorted two-dimensional matrices, so we can recursively apply this algorithm\nto them.\n\n<iframe src=\"https://leetcode.com/playground/3uFA67GF/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"3uFA67GF\"></iframe>\n\nHere is a visualization for the above code.\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/570771097\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n\\log n)$$\n\n    First, for ease of analysis, assume that $$n \\approx m$$, as in the\n    analysis of approach 2. Also, assign $$x=n^2=|matrix|$$; this will make\n    the [master method](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms))\n    easier to apply. Now, let's model the runtime of the\n    divide & conquer approach as a recurrence relation:\n\n    $$\n        T(x) = 2 \\cdot T(\\frac{x}{4}) + \\sqrt{x}\n    $$\n\n    The first term ($$2 \\cdot T(\\frac{x}{4})$$) arises from the fact that we\n    recurse on two submatrices of roughly one-quarter size, while\n    $$\\sqrt{x}$$ comes from the time spent seeking along a $$O(n)$$-length\n    column for the partition point. After binding the master method variables\n    ($$a=2;b=4;c=0.5$$) we notice that $$\\log_b{a}=c$$. Therefore, this\n    recurrence falls under case 2 of the master method, and the following\n    falls out:\n\n    $$\n    \\begin{aligned}\n        T(x) &= \\mathcal{O}(x^c \\cdot \\log x) \\\\\n             &= \\mathcal{O}(x^{0.5} \\cdot \\log x) \\\\\n             &= \\mathcal{O}((n^2)^{0.5} \\cdot \\log(n^2)) \\\\\n             &= \\mathcal{O}(n \\cdot \\log(n^2)) \\\\\n             &= \\mathcal{O}(2n \\cdot \\log n) \\\\\n             &= \\mathcal{O}(n \\cdot \\log n) \\\\\n    \\end{aligned}\n    $$\n\n    Extension: what would happen to the complexity if we binary searched for\n    the partition point, rather than used a linear scan?\n\n* Space complexity : $$\\mathcal{O}(\\log n)$$\n\n    Although this approach does not fundamentally require\n    greater-than-constant addition memory, its use of recursion means that it\n    will use memory proportional to the height of its recursion tree. Because\n    this approach discards half of `matrix` on each level of recursion (and\n    makes two recursive calls), the height of the tree is bounded by $$\\log n$$.\n<br />\n<br />\n\n\n---\n#### Approach 4: Search Space Reduction\n\n**Intuition**\n\nBecause the rows and columns of the matrix are sorted (from left-to-right and\ntop-to-bottom, respectively), we can prune $$\\mathcal{O}(m)$$ or \n$$\\mathcal{O}(n)$$ elements when looking at any particular value.\n\n**Algorithm**\n\nFirst, we initialize a $$(row, col)$$ pointer to the bottom-left of the\nmatrix.[^1] Then, until we find `target` and return `true` (or the pointer\npoints to a $$(row, col)$$ that lies outside of the dimensions of the\nmatrix), we do the following: if the currently-pointed-to value is larger\nthan `target` we can move one row \"up\". Otherwise, if the\ncurrently-pointed-to value is smaller than `target`, we can move one column\n\"right\". It is not too tricky to see why doing this will never prune the\ncorrect answer; because the rows are sorted from left-to-right, we know that\nevery value to the right of the current value is larger. Therefore, if the\ncurrent value is already larger than `target`, we know that every value to\nits right will also be too large. A very similar argument can be made for the\ncolumns, so this manner of search will always find `target` in the matrix (if\nit is present).\n\nCheck out some sample runs of the algorithm in the animation below:\n\n!?!../Documents/240_Search_a_2D_Matrix_II.json:1280,720!?!\n\n<iframe src=\"https://leetcode.com/playground/HVVemncP/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"HVVemncP\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n+m)$$\n\n    The key to the time complexity analysis is noticing that, on every\n    iteration (during which we do not return `true`) either `row` or `col` is\n    is decremented/incremented exactly once. Because `row` can only be\n    decremented $$m$$ times and `col` can only be incremented $$n$$ times\n    before causing the `while` loop to terminate, the loop cannot run for\n    more than $$n+m$$ iterations. Because all other work is constant, the\n    overall time complexity is linear in the sum of the dimensions of the\n    matrix.\n\n* Space complexity : $$\\mathcal{O}(1)$$\n\n    Because this approach only manipulates a few pointers, its memory\n    footprint is constant.\n<br />\n\n\n#### Footnotes ####\n\n[^1]: This would work equally well with a pointer initialized to the\ntop-right. Neither of the other two corners would work, as pruning a\nrow/column might prevent us from achieving the correct answer.",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "336",
            "count": 168,
            "average": "4.726",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "search-a-2d-matrix-ii",
    "playgroundData": {
        "WM4UCWwS": {
            "playground": {
                "testcaseInput": "",
                "name": "search-a-2d-matrix-ii-3",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "QZxbZGqX": {
            "playground": {
                "testcaseInput": "",
                "name": "search-a-2d-matrix-ii-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "3uFA67GF": {
            "playground": {
                "testcaseInput": "",
                "name": "search-a-2d-matrix-ii-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "HVVemncP": {
            "playground": {
                "testcaseInput": "",
                "name": "search-a-2d-matrix-ii-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}