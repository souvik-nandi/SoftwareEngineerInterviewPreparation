{
    "id": "246",
    "question": {
        "questionId": "246",
        "questionFrontendId": "246",
        "boundTopicId": null,
        "title": "Strobogrammatic Number",
        "titleSlug": "strobogrammatic-number",
        "content": "<p>Given a string <code>num</code> which represents an integer, return <code>true</code> <em>if</em> <code>num</code> <em>is a <strong>strobogrammatic number</strong></em>.</p>\n\n<p>A <strong>strobogrammatic number</strong> is a number that looks the same when rotated <code>180</code> degrees (looked at upside down).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;69&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;88&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;962&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 50</code></li>\n\t<li><code>num</code> consists of only digits.</li>\n\t<li><code>num</code> does not contain any leading zeros except for zero itself.</li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Easy",
        "likes": 475,
        "dislikes": 806,
        "isLiked": null,
        "similarQuestions": "[{\"title\": \"Strobogrammatic Number II\", \"titleSlug\": \"strobogrammatic-number-ii\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Strobogrammatic Number III\", \"titleSlug\": \"strobogrammatic-number-iii\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Confusing Number\", \"titleSlug\": \"confusing-number\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]",
        "exampleTestcases": "\"69\"\n\"88\"\n\"962\"",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Hash Table",
                "slug": "hash-table",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "String",
                "slug": "string",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"1\": [{\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 16}, {\"taggedByAdmin\": false, \"name\": \"Uber\", \"slug\": \"uber\", \"timesEncountered\": 3}], \"2\": [{\"taggedByAdmin\": true, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}], \"3\": [{\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    bool isStrobogrammatic(string num) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public boolean isStrobogrammatic(String num) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def isStrobogrammatic(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def isStrobogrammatic(self, num: str) -> bool:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\nbool isStrobogrammatic(char * num){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public bool IsStrobogrammatic(string num) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {string} num\n * @return {boolean}\n */\nvar isStrobogrammatic = function(num) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {String} num\n# @return {Boolean}\ndef is_strobogrammatic(num)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func isStrobogrammatic(_ num: String) -> Bool {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func isStrobogrammatic(num string) bool {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def isStrobogrammatic(num: String): Boolean = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun isStrobogrammatic(num: String): Boolean {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn is_strobogrammatic(num: String) -> bool {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param String $num\n     * @return Boolean\n     */\n    function isStrobogrammatic($num) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function isStrobogrammatic(num: string): boolean {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (is-strobogrammatic num)\n  (-> string? boolean?)\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec is_strobogrammatic(Num :: unicode:unicode_binary()) -> boolean().\nis_strobogrammatic(Num) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec is_strobogrammatic(num :: String.t) :: boolean\n  def is_strobogrammatic(num) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"144.3K\", \"totalSubmission\": \"303.1K\", \"totalAcceptedRaw\": 144264, \"totalSubmissionRaw\": 303150, \"acRate\": \"47.6%\"}",
        "hints": [],
        "solution": {
            "id": "1078",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": true,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": "ac",
        "sampleTestCase": "\"69\"",
        "metaData": "{\r\n  \"name\": \"isStrobogrammatic\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"num\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": null,
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1078",
        "content": "[TOC] \n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/520505246\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Overview\n\nGiven a number represented as a string, we need to return `true` if it is strobogrammatic and `false` if it is not. Determining whether or not a number is strobogrammatic requires looking at whether or not it stays the same when rotated by 180 degrees.\n\nWe aren't told very much about which digits count as strobogrammatic. While some people have found it frustrating to not be told everything, this level of uncertainty is intentionally typical of real interviews. A big part of solving this problem is clarifying the requirements, and there is a great way of doing that here on LeetCode, which we'll talk about.\n\n**Rotating a number by 180 degrees**\n\nA good first step is to think carefully about what it means to rotate a number by 180 degrees. Some people find it easy to rotate numbers in their head, whereas others struggle to do so. If you're in the latter group, write some numbers down on a scrap of paper and rotate the paper.\n\n!?!../Documents/246_rotate_all_digits.json:440,440!?!\n\nObserve that rotating a number by 180 degrees reverses the order of the digits and rotates each digit upside-down in its new position. It isn't guaranteed that the rotation will form a valid number, though; some digits will become invalid when rotated in this way. \n\n**Investigating the rotation of each digit**\n\nThe next step is to determine what each digit becomes when rotated by 180 degrees. There are three possibilities for each digit:\n\n1. it becomes invalid\n2. it stays the same\n3. it becomes a different digit\n\nWe'll consider a *digit* to be **rotatable** if, and only if, that digit becomes a valid digit when rotated. For example, `9` becomes `6`, and `8` remains as `8`. On the other hand, `4` becomes `\u07c8`, which is clearly no longer valid. So, we can say that `6`, `9`, and `8` are rotatable, whereas `4` is *not*. Numbers such as `1` might be rotatable, but it is font dependent.\n\nSo, which digits are rotatable? Your interviewer is unlikely to just give you the answer; you'll probably be expected to figure this out by asking good questions and stating your assumptions and conclusions. The main challenge is that the rotatable-ness of a number is somewhat dependent on the font being used.\n\n> Remember, somewhat vague requirements are standard in interviews, and the first step you should take in any interview is to analyze the question, ensure you understood it, clarify the requirements, and state your assumptions. The interviewer *expects* you to ask questions; they don\u2019t want you to *guess* the requirements!\n\nA good idea would be to quickly go through each of the ten digits in order, giving an initial thought on whether or not the digit is rotatable (it's okay if your initial thoughts are different from mine; we're not committed to this yet).\n\n* `0` is probably considered rotatable. Most people draw it as a circle without a \"decoration\" in the middle. \n* `1` may be considered rotatable. On one hand, it's commonly drawn as simply a vertical bar, but on the other, sometimes decorations are added, and most fonts put it off-center. \n* `2` may be considered rotatable. It looks a lot like itself when rotated, although there is a distinctive difference we need to be wary of (see the pictures above).\n* `3` is *not* rotatable.\n* `4` is *not* rotatable.\n* `5` may be considered rotatable, for the same reason `2` might be.\n* `6` is rotatable; we were shown that it becomes `9`.\n* `7` is *not* rotatable. \n* `8` is probably considered rotatable. Most people draw the two \"circles\" the same size.\n* `9` is rotatable; we were shown it becomes `6`.\n\nThe next step is dependent on how your interviewer responds to your initial thoughts. They might give you a more precise definition, ask you to make your own judgment call, or they might even ask you to come up with some specific test cases whose answers would clarify the definition. We're going to go with this latter possibility, as it's what you should do on LeetCode.\n\nBefore you read any further, have a think about which test cases you could use. \n\n> The general rule of thumb for interviews is that you should *state* your assumptions (and be ready to justify them if asked) and *ask* clarifying questions for anything you\u2019re unsure about. Keep in mind that your interviewer is more likely to give you useful answers to specific questions, as opposed to general questions. For example, asking them to list all 1 and 2 digit strobogrammatic numbers might seem like it would be very helpful to you, but they probably won\u2019t be keen on doing your work for you. Instead, you should, for example, ask whether or not `1` and `22` are strobogrammatic numbers. You might need to briefly explain why the cases are unclear (e.g., font).\n\nHere are the simplest test cases you could use. We're going to assume that `3`, `4`, and `7` are *not* rotatable.\n\n* `0`: Will return `true` if `0` is rotatable.\n* `1`: Will return `true` if `1` is rotatable.\n* `8`: Will return `true` if `8` is rotatable.\n* `2`: Will return `true` if `2` is rotatable.\n* `5`: Will return `true` if `5` is rotatable.\n* `69`: Will return `true` if `6` and `9` are rotatable and become each other (we already know this from the example given in the problem, but you might not be given it in an interview).\n\n**On LeetCode, you can simulate the clarification process using the Run Code button!**. Note that this process will **not** affect your solution acceptance statistics. You can use the *Run Code* button as much as you want. If you're not familiar with the trick, here's how you would check whether or not `2` is considered to be strobogrammatic.\n\n1. If you haven\u2019t yet written any code, you\u2019ll first need to modify the template function to return a dummy value (e.g. `return false`).\n2. Type `2` into the *Testcase* panel. \n3. Click the *Run Code* button.\n4. Check what the ***Expected*** output is. In this case, it is `false`, allowing us to conclude that `2` is **not** a strobogrammatic number.\n\nAfter checking test cases, we can refine our thoughts from above.\n\n`8`, `0`, and `1` are themselves upside-down.\n`6` and `9` are each other upside-down.\nAll other numbers, including `2` and `5`, are not themselves up-side-down, nor are they any other number up-side-down.\n\nTherefore, the number `68199866189` is rotatable.\n\n!?!../Documents/246_rotate_68199866189.json:440,440!?!\n\nBut the number `9619196` is not.\n\n!?!../Documents/246_rotate_9619196.json:280,280!?!\n\n> Learning to deal with vague requirements in a calm and methodical way is an often overlooked but *very* important soft skill for both interviews and day-to-day work as a software engineer. If you fail an interview due to misunderstanding the requirements, then this is a sign that you need to work on your requirement clarification skills and *not* a sign that the interviewer just asked you a \"stupid\" question. \n\nFrom here, we're going to look at a couple of different ways of solving this problem.\n\n<br/>\n\n---\n\n#### Approach 1: Make a Rotated Copy\n\n**Intuition**\n\nA straightforward solution is to make a copy of the input that is rotated by 180 degrees. If the rotated copy is identical to the original input, then the input has to be strobogrammatic.\n\n!?!../Documents/246_approach_1.json:960,540!?!\n\n**Algorithm**\n\nRecall that when a number is rotated by 180 degrees, *the order of the digits reverses* and *each digit is rotated upside-down in its new position*. As such, we could build a new rotated string by looping through the original string backward (to reverse it) and rotating + appending each digit to the new string.\n\nRecall from above that the rules for rotating a character are as follows:\n\n* `0` \u27f6 `0`\n* `1` \u27f6 `1`\n* `6` \u27f6 `9`\n* `8` \u27f6 `8`\n* `9` \u27f6 `6`\n\nThe digits `2`, `3`, `4`, `5`, and `7` are not rotatable. Their presence immediately signifies that the input number couldn't possibly be rotatable, and therefore not strobogrammatic.\n\nThe simplest way of doing the rotations in code is to use `if` statements. \n\n```text\ndefine function isStrobogrammatic(num_string):\n    \n    rotated_string = an empty string\n    \n    for each character in num_string, going in reverse:\n        if character is 0, 1, or 8:\n            append character to rotated_string\n        else if character is 6:\n            append 9 to rotated_string\n        else if character is 9:\n            append 6 to rotated_string\n        else (character is invalid):\n            return false\n\n    if rotated_string is the same as num_string:\n        return true\n    return false\n```\n\nAlternatively, you could use a hash map, or even an array, to store the rules for flipping. I've provided code for these alternate approaches in the next section.\n\n**Code**\n\nRecall that we should always use a **string builder** to build a new string, and *not* repeated string concatenations.\n\n>  In most programming languages, the built-in string type is *immutable*. This means that if the string is modified, then a new string object must be made. Appending $$N$$ characters to a string would, therefore, have a cost of $$O(N^2)$$, as for each of the $$N$$ characters, a new string of length $$N / 2$$ (on average) has to be created. This problem is solved by using string builders. A string builder is a list-like data structure that characters are inserted into. Once all characters have been inserted, the characters in the string builder are converted to a string object.\n\nHere is the code that uses `if` statements (based on the algorithm from above). Catching the \"invalid digit\" case in the `else` is best, as it avoids the need for five statements within a single condition. \n\n<iframe src=\"https://leetcode.com/playground/CEXMHpC3/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"CEXMHpC3\"></iframe>\n\nHere is the code using a Hash Map to avoid the need for a complex conditional statement.\n\n<iframe src=\"https://leetcode.com/playground/5oMG6Byn/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"5oMG6Byn\"></iframe>\n\nAlternatively, we could use an Array instead of a Hash Map; the indexes act as keys. It is simplest in code to map the non-rotatable characters to empty strings instead of explicitly checking for them during the string building process. If they were present, then the rotated string will be of a different length to the original, and therefore would be correctly flagged as not strobogrammatic in the final check. You could also check for the invalid characters in the same way we did for the hash map approach\n\nThis approach is nice in that the code is very compact\u2014the conditional inside the loop has been eliminated\u2014but not so nice in that it is somewhat confusing to understand. The Hash Map approach is probably safer in an interview.\n\n<iframe src=\"https://leetcode.com/playground/XbR4FqDd/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"XbR4FqDd\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input string.\n\n- Time complexity : $$O(N)$$.\n\n    In the worst case, all digits in the string will be rotatable. We're going to assume this for the time complexity analysis.\n\n    For each of the $$N$$ digits in the string, we're looking up (with a hash map, array, or cascading `if`) the rotation of that digit. For all three sub-implementations, this has a cost of $$O(1)$$. Appending to the end of a string builder is also $$O(1)$$. Therefore, building the 180-degree rotation of a string has a cost of $$O(N)$$.\n\n    In the final step, we're comparing two strings of length $$N$$. This also has a cost of $$O(N)$$. \n\n    This gives us $$O(N) + O(N)$$. In Big-O notation, we treat this as simply $$O(N)$$.\n\n- Space complexity : $$O(N)$$.\n\n    The string builder requires $$O(N)$$ space. \n\nNote that if you didn't implement your string building sensibly (e.g., if you used string concatenation), then your solution will have a time complexity of $$O(N^2)$$.\n\n<br/>\n\n---\n\n#### Approach 2: Two Pointers\n\n**Intuition**\n\nYou might have observed a pattern in how digits *move* in the rotation: the first and last swap, the second and the second-to-last swap, etc.\n\n![Going from outside to in, pairs of numbers are swapped.](../Figures/246/swaps.png)\n\nFor the number to be strobogrammatic, we have to write the **same** number back into each index. As we deduced earlier, there are only five valid pairs of numbers for this to work.\n\n1. `0` and `0`.\n2. `1` and `1`.\n3. `6` and `9`.\n4. `8` and `8`.\n5. `9` and `6`.\n\nTherefore, we can check each pair that would swap in the reversal for whether or not it is one of the five pairs listed above. If all pairs are on the list, then the number is strobogrammatic. For odd-lengthed numbers, the middle digit has to be `0`, `1`, or `8`.\n\n!?!../Documents/246_approach_2.json:960,540!?!\n\n**Algorithm**\n\nWe initialize two pointers; `left` and `right`. We then iterate both pointers towards the middle at each step, ensuring that the digits at `left` and `right` correspond to one of the five valid pairs. An elegant way of doing this is to define a hash map of valid `left -> right` mappings (like what we did in the hash map variant of approach 1).\n\n```text\ndefine function isStrobogrammatic(num):\n    rotations = a new hash map\n    add to rotations: '0' -> '0', '1' -> '1', '8' -> '8', '6' -> '9', and '9' -> '6'\n    left = 0\n    right = num.length - 1\n    while left <= right:\n        if left is not in rotations:\n            return false\n        expected_rotation = get rotation for character at position left in num\n        if expected_rotation is not the same as the character at right in num:\n            return false\n        add 1 to left\n        subtract 1 from right\n    return true\n```\n\nIf no invalid pairs are found, then the number must be strobogrammatic. Note that the middle-digit-of-an-odd-number case is handled correctly; the final iteration will have `left = right`. If they are both pointing to the same `0`, `1`, or `8`, then the condition will be false, and `true` returned at the end. If they are both pointing at a `6`, then the condition will be true, and `false` will be returned, as `expected_rotation` will be `9`, and `num[right]` will be `6`.\n\n> Be careful of that middle value in an odd-lengthed number. While the number `8 9 0 6 8` is strobogrammatic, the number `8 9 4 6 8` is not. And nor is `8 9 9 6 8` (this last example is one that is particularly likely to catch some people out, as the middle digit is rotatable, but it doesn't become itself).\n\n**Code**\n\n<iframe src=\"https://leetcode.com/playground/8BKSk3gR/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"8BKSk3gR\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input string.\n\n- Time complexity : $$O(N)$$.\n\n    For each of the $$N$$ digits in the string, we're doing a single lookup and comparison.\n\n- Space complexity : $$O(1)$$.\n\n    We are only using constant extra space. This is an in-place algorithm.\n\n<br/>\n\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": true,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1033",
            "count": 35,
            "average": "4.914",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "strobogrammatic-number",
    "playgroundData": {
        "CEXMHpC3": {
            "playground": {
                "testcaseInput": "",
                "name": "strobogrammatic-number-3",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "5oMG6Byn": {
            "playground": {
                "testcaseInput": "",
                "name": "strobogrammatic-number-2",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "XbR4FqDd": {
            "playground": {
                "testcaseInput": "",
                "name": "strobogrammatic-number-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "8BKSk3gR": {
            "playground": {
                "testcaseInput": "",
                "name": "strobogrammatic-number-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}