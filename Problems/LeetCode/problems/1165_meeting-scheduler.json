{
    "id": "1165",
    "question": {
        "questionId": "1165",
        "questionFrontendId": "1229",
        "boundTopicId": null,
        "title": "Meeting Scheduler",
        "titleSlug": "meeting-scheduler",
        "content": "<p>Given the availability time slots arrays <code>slots1</code> and <code>slots2</code> of two people and a meeting duration <code>duration</code>, return the <strong>earliest time slot</strong> that works for both of them and is of duration <code>duration</code>.</p>\n\n<p>If there is no common time slot that satisfies the requirements, return an <strong>empty array</strong>.</p>\n\n<p>The format of a time slot is an array of two elements <code>[start, end]</code> representing an inclusive time range from <code>start</code> to <code>end</code>.</p>\n\n<p>It is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots <code>[start1, end1]</code> and <code>[start2, end2]</code> of the same person, either <code>start1 &gt; end2</code> or <code>start2 &gt; end1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8\n<strong>Output:</strong> [60,68]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= slots1.length, slots2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>slots1[i].length, slots2[i].length == 2</code></li>\n\t<li><code>slots1[i][0] &lt; slots1[i][1]</code></li>\n\t<li><code>slots2[i][0] &lt; slots2[i][1]</code></li>\n\t<li><code>0 &lt;= slots1[i][j], slots2[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= duration &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "translatedTitle": null,
        "translatedContent": null,
        "isPaidOnly": true,
        "difficulty": "Medium",
        "likes": 729,
        "dislikes": 29,
        "isLiked": null,
        "similarQuestions": "[]",
        "exampleTestcases": "[[10,50],[60,120],[140,210]]\n[[0,15],[60,70]]\n8\n[[10,50],[60,120],[140,210]]\n[[0,15],[60,70]]\n12",
        "categoryTitle": "Algorithms",
        "contributors": [],
        "topicTags": [
            {
                "name": "Array",
                "slug": "array",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers",
                "translatedName": null,
                "__typename": "TopicTagNode"
            },
            {
                "name": "Sorting",
                "slug": "sorting",
                "translatedName": null,
                "__typename": "TopicTagNode"
            }
        ],
        "companyTagStats": "{\"3\": [{\"taggedByAdmin\": false, \"name\": \"DoorDash\", \"slug\": \"doordash\", \"timesEncountered\": 10}, {\"taggedByAdmin\": false, \"name\": \"Bloomberg\", \"slug\": \"bloomberg\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Microsoft\", \"slug\": \"microsoft\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Facebook\", \"slug\": \"facebook\", \"timesEncountered\": 2}, {\"taggedByAdmin\": true, \"name\": \"Paypal\", \"slug\": \"paypal\", \"timesEncountered\": 0}, {\"taggedByAdmin\": true, \"name\": \"Pramp\", \"slug\": \"pramp\", \"timesEncountered\": 0}], \"1\": [{\"taggedByAdmin\": false, \"name\": \"Google\", \"slug\": \"google\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Amazon\", \"slug\": \"amazon\", \"timesEncountered\": 3}, {\"taggedByAdmin\": false, \"name\": \"Expedia\", \"slug\": \"expedia\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Adobe\", \"slug\": \"adobe\", \"timesEncountered\": 2}], \"2\": [{\"taggedByAdmin\": false, \"name\": \"Apple\", \"slug\": \"apple\", \"timesEncountered\": 4}, {\"taggedByAdmin\": false, \"name\": \"Oracle\", \"slug\": \"oracle\", \"timesEncountered\": 2}, {\"taggedByAdmin\": false, \"name\": \"Zillow\", \"slug\": \"zillow\", \"timesEncountered\": 2}]}",
        "codeSnippets": [
            {
                "lang": "C++",
                "langSlug": "cpp",
                "code": "class Solution {\npublic:\n    vector<int> minAvailableDuration(vector<vector<int>>& slots1, vector<vector<int>>& slots2, int duration) {\n        \n    }\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Java",
                "langSlug": "java",
                "code": "class Solution {\n    public List<Integer> minAvailableDuration(int[][] slots1, int[][] slots2, int duration) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python",
                "langSlug": "python",
                "code": "class Solution(object):\n    def minAvailableDuration(self, slots1, slots2, duration):\n        \"\"\"\n        :type slots1: List[List[int]]\n        :type slots2: List[List[int]]\n        :type duration: int\n        :rtype: List[int]\n        \"\"\"\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Python3",
                "langSlug": "python3",
                "code": "class Solution:\n    def minAvailableDuration(self, slots1: List[List[int]], slots2: List[List[int]], duration: int) -> List[int]:\n        ",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C",
                "langSlug": "c",
                "code": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minAvailableDuration(int** slots1, int slots1Size, int* slots1ColSize, int** slots2, int slots2Size, int* slots2ColSize, int duration, int* returnSize){\n\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "C#",
                "langSlug": "csharp",
                "code": "public class Solution {\n    public IList<int> MinAvailableDuration(int[][] slots1, int[][] slots2, int duration) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "JavaScript",
                "langSlug": "javascript",
                "code": "/**\n * @param {number[][]} slots1\n * @param {number[][]} slots2\n * @param {number} duration\n * @return {number[]}\n */\nvar minAvailableDuration = function(slots1, slots2, duration) {\n    \n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Ruby",
                "langSlug": "ruby",
                "code": "# @param {Integer[][]} slots1\n# @param {Integer[][]} slots2\n# @param {Integer} duration\n# @return {Integer[]}\ndef min_available_duration(slots1, slots2, duration)\n    \nend",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Swift",
                "langSlug": "swift",
                "code": "class Solution {\n    func minAvailableDuration(_ slots1: [[Int]], _ slots2: [[Int]], _ duration: Int) -> [Int] {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Go",
                "langSlug": "golang",
                "code": "func minAvailableDuration(slots1 [][]int, slots2 [][]int, duration int) []int {\n    \n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Scala",
                "langSlug": "scala",
                "code": "object Solution {\n    def minAvailableDuration(slots1: Array[Array[Int]], slots2: Array[Array[Int]], duration: Int): List[Int] = {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Kotlin",
                "langSlug": "kotlin",
                "code": "class Solution {\n    fun minAvailableDuration(slots1: Array<IntArray>, slots2: Array<IntArray>, duration: Int): List<Int> {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Rust",
                "langSlug": "rust",
                "code": "impl Solution {\n    pub fn min_available_duration(slots1: Vec<Vec<i32>>, slots2: Vec<Vec<i32>>, duration: i32) -> Vec<i32> {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "PHP",
                "langSlug": "php",
                "code": "class Solution {\n\n    /**\n     * @param Integer[][] $slots1\n     * @param Integer[][] $slots2\n     * @param Integer $duration\n     * @return Integer[]\n     */\n    function minAvailableDuration($slots1, $slots2, $duration) {\n        \n    }\n}",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "TypeScript",
                "langSlug": "typescript",
                "code": "function minAvailableDuration(slots1: number[][], slots2: number[][], duration: number): number[] {\n\n};",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Racket",
                "langSlug": "racket",
                "code": "(define/contract (min-available-duration slots1 slots2 duration)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer? (listof exact-integer?))\n\n  )",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Erlang",
                "langSlug": "erlang",
                "code": "-spec min_available_duration(Slots1 :: [[integer()]], Slots2 :: [[integer()]], Duration :: integer()) -> [integer()].\nmin_available_duration(Slots1, Slots2, Duration) ->\n  .",
                "__typename": "CodeSnippetNode"
            },
            {
                "lang": "Elixir",
                "langSlug": "elixir",
                "code": "defmodule Solution do\n  @spec min_available_duration(slots1 :: [[integer]], slots2 :: [[integer]], duration :: integer) :: [integer]\n  def min_available_duration(slots1, slots2, duration) do\n\n  end\nend",
                "__typename": "CodeSnippetNode"
            }
        ],
        "stats": "{\"totalAccepted\": \"59.5K\", \"totalSubmission\": \"107.5K\", \"totalAcceptedRaw\": 59491, \"totalSubmissionRaw\": 107510, \"acRate\": \"55.3%\"}",
        "hints": [
            "Assume that in the solution, the selected slot from slotsA is bigger than the respectively selected slot from slotsB.",
            "Use two pointers in order to try all the possible intersections, and check the length.",
            "Do the same in step N\u00b0 1 but now assume that the selected slot from slotsB is bigger, return the minimum of the two options."
        ],
        "solution": {
            "id": "1110",
            "canSeeDetail": true,
            "paidOnly": true,
            "hasVideoSolution": false,
            "paidOnlyVideo": true,
            "__typename": "ArticleNode"
        },
        "status": null,
        "sampleTestCase": "[[10,50],[60,120],[140,210]]\n[[0,15],[60,70]]\n8",
        "metaData": "{\n  \"name\": \"minAvailableDuration\",\n  \"params\": [\n    {\n      \"name\": \"slots1\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"name\": \"slots2\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"name\": \"duration\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\"\n  }\n}",
        "judgerAvailable": true,
        "judgeType": "large",
        "mysqlSchemas": [],
        "enableRunCode": true,
        "enableTestMode": false,
        "enableDebugger": true,
        "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code> OpenJDK 17 </code>. Java 8 features such as lambda expressions and stream API can be used. </p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu11 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9\\\" target=\\\"_blank\\\">C# 10 with .NET 6 runtime</a></p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 3.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.5.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.17.6</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.10</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13.7</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.58.1</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 8.1</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>TypeScript 4.5.4, Node.js 16.13.2</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.3</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.13.0 with Erlang/OTP 24.2\"]}",
        "libraryUrl": null,
        "adminUrl": null,
        "challengeQuestion": {
            "id": "969",
            "date": "2022-06-22",
            "incompleteChallengeCount": 30,
            "streakCount": 0,
            "type": "WEEKLY",
            "__typename": "ChallengeQuestionNode"
        },
        "__typename": "QuestionNode"
    },
    "solution": {
        "id": "1110",
        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nTo find the earliest time slot that works for both the people, the most straightforward approach would be to examine all possible time slots for them. To improve it, we can either sort both input arrays and apply two pointers, or we can use a heap for sorting the time slots and find the earliest overlapping time slot. We will cover both of these approaches in this article.\n\n</br>\n\n---\n\n#### Approach 1: Two pointers\n\n**Intuition**\n\n![The common slot between two slots.](../Figures/1229/1129-img1.png)\n{:align=\"center\"}\n\n*Figure 1. The common slot between two slots.*\n{:align=\"center\"}\n\nWe want to sort both `slots1` and `slots2` by the start time first, then initialize two pointers, each of which points to the beginning of the two arrays. From there, we will compare the two slots, and move one pointer at a time if the common slot is smaller than `duration`.\n\n> Note that sorting by the start time vs the end time is the same, this is because, if a time slot starts earlier, it will end earlier. Remember that for both people, there're no overlapping time slots\n\n\n\nHere comes the question: how do we decide which pointer should be incremented?\n\nThe answer is: we will always move the one that ends earlier. Assuming that we are comparing `slots1[i]` and `slots2[j]` and `slots1[i][1] > slots2[j][1]`, we would always choose to move the pointer `j`. The reason is that, as both slots are sorted, if `slots1[i][1] > slots2[j][1]`, we know `slots1[i+1][0] > slots2[j][1]` so that there will be no intersection between `slots1[i+1]` and `slots2[j]`.\n\n![Always move the one that ends earlier.](../Figures/1229/1129-img2.png)\n{:align=\"center\"}\n\n*Figure 2. Always move the one that ends earlier.*\n{:align=\"center\"}\n\n**Algorithm**\n\n- Sort both `slots1` and `slots2` by the start time.\n- Initialize two pointers, `pointer1` and `pointer2`, pointing to the beginning of `slots1` and the beginning of `slots2` respectively.\n- Iterate until `pointer1` reaches the end of `slots1` or `pointer2` reaches the end of `slots2`:\n  - Find the common slot of `slots1[pointer1]` and `slots2[pointer2]`.\n  - If the common slot is greater than or equal to `duration`, return the result.\n  - Else, find the slot that ends earlier and move the pointer.\n- If no common slot is found, return an empty array.\n\n\n**Implementation**\n\n\n<iframe src=\"https://leetcode.com/playground/MMhHSKMJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"MMhHSKMJ\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity: $$O(M \\log M + N \\log N)$$, when $$M$$ is the length of `slots1` and $$N$$ is the length of `slots2`.\n\n  Sorting both arrays would take $$O(M \\log M + N \\log N)$$. The two pointers take $$O(M + N)$$ because, during each iteration, we would visit a new element, and there are a total of $$M+N$$ elements. Putting these together, the total time complexity is $$O(M \\log M + N \\log N)$$.\n\n* Space complexity: $$O(1)$$. This is because we do not use any additional data structures; we only use a few fixed-size integer variables.\n\n<br/>\n\n---\n\n#### Approach 2: Heap\n\n**Intuition**\n\nAnother approach of systematically selecting slots and comparing them is using a heap. We would initialize a heap `timeslots` and push all of the time slots into it.\n\nThe key idea here is that **we only need one heap**. That is, we can put the time slots for *both* people into the same heap, and then if we find a common time slot, we know that the two-time slots *couldn't possibly be for the same person*. Before reading the justification for this, have a think for yourself about why we can draw such a bold conclusion.\n\nThe problem description states that the time slots for a single person *do not overlap*. This means that if, for example, we have the time slots `[10, 15]` and `[14, 20]`, then we *know* that these time slots *cannot be for the same person*. Otherwise, we would have a contradiction. So, given that a common time slot has to overlap, the two slots have to be from different people.\n\nA heap returns the smallest items first. Because of this time slots we remove from the heap are sorted by the start time. Taking advantage of this, we can then compare the time slots in the order of time.\n\n![Pop the first time slot out of the heap and compare it against the first element in the heap.](../Figures/1229/1129-img3.png)\n{:align=\"center\"}\n\n*Figure 3. Compare the popped time slot and the top element in the heap.*\n{:align=\"center\"}\n\n**Algorithm**\n\n- Initialize a heap `timeslots` and push time slots that last longer than `duration` into it.\n- Iterate until there's only one time slot remaining in `timeslots`:\n  - Pop the first time slot `[start1, end1]` from `timeslots`.\n  - Retrieve the next time slot `[start2, end2]`, which is the current top element in `timeslots`.\n  - If we find `end1 >= start2 + duration`, because `start1 <= start2`, the common slot is longer than `duration` and we can return it.\n- If we don't find the common slot that is longer than `duration`, return an empty array.\n\n**Implementation**\n\n\n<iframe src=\"https://leetcode.com/playground/B9fU9ihi/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"B9fU9ihi\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity: $$O((M+N) \\log (M+N))$$, when $$M$$ is the length of `slots1` and $$N$$ is the length of `slots2`.\n\n  There are two parts to be analyzed: 1) building up the heap; 2) the iteration when we keep popping elements from the heap. For the second part, popping one element takes $$O(\\log(M + N))$$, therefore, in the worst case, popping $$M + N$$ elements takes $$O((M+N) \\log (M+N))$$.\n\n  Regarding the first part, we have different answers for Java and Python implementations. For Python, `heapq.heapify` transforms a list into a heap, in-place, in linear time; however, in Java, we choose to pop each element into the heap, which leads to a time complexity of $$O((M+N) \\log (M+N))$$. Note that it is possible to convert the array into a heap in linear time using the constructor of `PriorityQueue`; however, that will not influence the overall time complexity and will make it less readable.\n\n  When we put these two parts together, the total time complexity is $$O((M+N) \\log (M+N))$$, which is determined by the first part.\n\n* Space complexity: $$O(M+N)$$. This is because we store all $$M+N$$ time slots in a heap.\n\n\n\n\n\n\n<br/>\n\n\n---",
        "contentTypeId": "107",
        "canSeeDetail": true,
        "paidOnly": true,
        "hasVideoSolution": false,
        "paidOnlyVideo": true,
        "rating": {
            "id": "1069",
            "count": 35,
            "average": "4.971",
            "userRating": null,
            "__typename": "RatingNode"
        },
        "__typename": "ArticleNode"
    },
    "questionCode": "meeting-scheduler",
    "playgroundData": {
        "MMhHSKMJ": {
            "playground": {
                "testcaseInput": "",
                "name": "meeting-scheduler-1",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        },
        "B9fU9ihi": {
            "playground": {
                "testcaseInput": "",
                "name": "meeting-scheduler-0",
                "isUserOwner": false,
                "isLive": false,
                "showRunCode": false,
                "showOpenInPlayground": false,
                "selectedLangSlug": "cpp",
                "isShared": true,
                "__typename": "PlaygroundNode"
            },
            "allPlaygroundCodes": [
                {
                    "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // In case there is no solution, we'll just return null\n        return null;\n    }\n}",
                    "langSlug": "java",
                    "__typename": "PlaygroundCodeNode"
                },
                {
                    "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[j] == target - nums[i]:\n                    return [i, j]",
                    "langSlug": "python3",
                    "__typename": "PlaygroundCodeNode"
                }
            ]
        }
    }
}